<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathscantor Cybersecurity Blog</title>
    <link>https://mathscantor.github.io/</link>
    <description>Recent content on Mathscantor Cybersecurity Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Tue, 21 Jan 2025 12:21:39 +0800</lastBuildDate><atom:link href="https://mathscantor.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GDB Guide Part 2 - Linux Calling Conventions, Breakpoints Etc</title>
      <link>https://mathscantor.github.io/posts/gdb-guide-part2-calling-conventions-breakpoints-etc/</link>
      <pubDate>Tue, 21 Jan 2025 12:21:39 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/gdb-guide-part2-calling-conventions-breakpoints-etc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GDB Guide Part 1 - Basics</title>
      <link>https://mathscantor.github.io/posts/gdb-guide-part1-basics/</link>
      <pubDate>Sun, 19 Jan 2025 10:37:22 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/gdb-guide-part1-basics/</guid>
      <description>1. Introduction Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!
2. Overview Today&amp;rsquo;s guide will show you how to:
 Attach to a Process Set useful GDB Configuration Inspect Registers Disassemble Functions  I will be providing an example C file here for you to compile so that you may follow the walkthrough and deepen your understanding.</description>
    </item>
    
    <item>
      <title>Writing Packets to Pcapng in C</title>
      <link>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</link>
      <pubDate>Fri, 17 Jan 2025 10:56:44 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</guid>
      <description>1. Introduction Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library. The PcapNG file structure can be found on the Official PcapNG Documentation. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&amp;rsquo;t the most comprehensible.
Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file.</description>
    </item>
    
    <item>
      <title>Transferring Python Packages</title>
      <link>https://mathscantor.github.io/posts/transferring-python-packages/</link>
      <pubDate>Fri, 10 Jan 2025 08:38:41 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/transferring-python-packages/</guid>
      <description>1. Introduction Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, strangerâ€”I have you covered!
If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages. This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.</description>
    </item>
    
    <item>
      <title>Installing Linux Packages Offline</title>
      <link>https://mathscantor.github.io/posts/installing-packages-offline/</link>
      <pubDate>Sun, 05 Jan 2025 11:45:27 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/installing-packages-offline/</guid>
      <description>1. Introduction Hi there ðŸ˜Š. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.
For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.
Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.</description>
    </item>
    
    <item>
      <title>Getting Root Shell Mikrotik RouterOS</title>
      <link>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</link>
      <pubDate>Fri, 03 Jan 2025 20:26:00 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</guid>
      <description>1. Introduction I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.
For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface.</description>
    </item>
    
    <item>
      <title>Welcome Stranger</title>
      <link>https://mathscantor.github.io/posts/welcome/</link>
      <pubDate>Fri, 03 Jan 2025 17:43:28 +0800</pubDate>
      
      <guid>https://mathscantor.github.io/posts/welcome/</guid>
      <description>Introduction Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.
Goals The aim of this blog is to teach other researchers tricks and tips that they may not have known.</description>
    </item>
    
  </channel>
</rss>
