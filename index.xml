<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mathscantor&#39;s Cybersecurity Blog</title>
    <link>https://mathscantor.github.io/</link>
    <description>Recent content on Mathscantor&#39;s Cybersecurity Blog</description>
    <generator>Hugo</generator>
    <language>en</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Fri, 01 Aug 2025 09:53:25 +0800</lastBuildDate>
    <atom:link href="https://mathscantor.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>picoCTF 2024 - FactCheck Walkthrough</title>
      <link>https://mathscantor.github.io/posts/picoctf/2024/factcheck/</link>
      <pubDate>Fri, 01 Aug 2025 09:53:25 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/picoctf/2024/factcheck/</guid>
      <description>&lt;h2 id=&#34;1-preparation&#34;&gt;1. Preparation&lt;/h2&gt;&#xA;&lt;p&gt;Before we begin the walkthrough, please ensure to have the following:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;The &lt;a href=&#34;https://artifacts.picoctf.net/c_titan/187/bin&#34;&gt;binary&lt;/a&gt; challenge&lt;/li&gt;&#xA;&lt;li&gt;Ghidra or IDA for static analysis&lt;/li&gt;&#xA;&lt;li&gt;GDB for dynamic analysis&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;2-static-analysis-in-ghidra&#34;&gt;2. Static Analysis in Ghidra&lt;/h2&gt;&#xA;&lt;p&gt;To objectively narrow down the scope, we can cheat a little by searching for &amp;ldquo;picoCTF&amp;rdquo; strings in the binary.&lt;/p&gt;&#xA;&lt;p&gt;&lt;img class=&#34;center&#34; alt=&#34;ghidra-flag-strings&#34; src=&#34;https://mathscantor.github.io/posts/picoctf/2024/factcheck/images/ghidra-flag-strings.png&#34;&gt;&lt;br&gt;&#xA;&lt;link href=&#34;https://mathscantor.github.io/posts/css/caption.css&#34; rel=&#34;stylesheet&#34;&gt;&#xA;&lt;span class=&#34;caption&#34; data-type=&#34;figure&#34;&gt;Flag Substring Search&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;&#xA;&lt;p&gt;From the figure above, Ghidra suggests that the string is found at &lt;code&gt;0x00102005&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Clicking on it leads us to where the string was defined. However, you will notice that the flag is incomplete, and it is referenced in &lt;em&gt;main()&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 8 - Invoking Function Calls</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/</link>
      <pubDate>Sun, 20 Jul 2025 12:34:19 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;It&amp;rsquo;s been quite a while hasn&amp;rsquo;t it? I hope you have been doing well and taking care of yourself. I recently had some junior colleagues asking me how it is possible to directly invoke certain functions while using GDB. Thus, I thought it would be a great opportunity to share some useful tips.&lt;/p&gt;&#xA;&lt;p&gt;We will be looking at how to invoke different functions of different return types using a simple example: &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/resources/gdb_invoke_function.c&#34;&gt;gdb_invoke_function.c&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sniffing SSL Connections in Memory</title>
      <link>https://mathscantor.github.io/posts/sniffing-ssl-connections-in-memory/</link>
      <pubDate>Mon, 23 Jun 2025 22:09:56 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/sniffing-ssl-connections-in-memory/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Hey y&amp;rsquo;all! It&amp;rsquo;s been a while since I posted anything in my blog due to my busy work schedule, and just a teensy-weeny bit of burnout 🤪.&lt;/p&gt;&#xA;&lt;p&gt;Today, I thought it would be interesting to share a simple technique to inspect SSL connections in a process&amp;rsquo;s memory. In particular, we will be targeting OpenSSL&amp;rsquo;s library functions, &lt;em&gt;SSL_read()&lt;/em&gt; and &lt;em&gt;SSL_write()&lt;/em&gt;, in order to read its plaintext buffer.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-preparing-the-experiment&#34;&gt;2. Preparing the Experiment&lt;/h2&gt;&#xA;&lt;p&gt;To demonstrate this technique, we will need to prepare a client and a server written in C. (See Listings 1 and 2)&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF Malware Techniques Part 4 - Hiding Processes</title>
      <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-4-hiding-processes/</link>
      <pubDate>Fri, 09 May 2025 08:16:42 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-4-hiding-processes/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In this post, we explore techniques employed by eBPF to hide processes. When I wrote my first rootkit that hides targeted directories, my go-to reference was this well-written &lt;a href=&#34;https://xcellerator.github.io/posts/linux_rootkits_06/&#34;&gt;blog post&lt;/a&gt; by &lt;a href=&#34;https://github.com/xcellerator&#34;&gt;TheXcellerator&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;As PIDs are tracked under &lt;em&gt;/proc&lt;/em&gt; as a directory, there&amp;rsquo;s no need to re-invent the wheel when it comes to hiding processes. That’s because Linux veterans know that directory listings are handled by the getdents64 syscall — a well-known technique.&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF Malware Techniques Part 3 - Hiding BPF Traces</title>
      <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-3-hiding-bpf-traces/</link>
      <pubDate>Sat, 26 Apr 2025 10:45:47 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-3-hiding-bpf-traces/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;We&amp;rsquo;re finally gonna talk about the juicy stuff now that you are all geared up! Today, we are gonna go into a deep dive on how an eBPF application can hide itself and its child processes by understanding specific crucial Linux internals and how to circumvent them. I will be mainly using &lt;a href=&#34;https://github.com/eeriedusk/nysm&#34;&gt;&lt;em&gt;nysm&lt;/em&gt;&lt;/a&gt;, a eBPF-based malware as my prime example for hiding BPF traces.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-ebpf-enumeration-with-bpf-syscalls&#34;&gt;2. eBPF Enumeration with BPF Syscalls&lt;/h2&gt;&#xA;&lt;p&gt;When working with eBPF, it&amp;rsquo;s important to understand what&amp;rsquo;s actually loaded into the kernel at any point in time. Fortunately, &lt;em&gt;bpftool&lt;/em&gt; gives us powerful inspection capabilities through &lt;em&gt;bpf()&lt;/em&gt; syscalls., which we will take a deeper look in a second.&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF Malware Techniques Part 2 - Setting Appropriate Hooks</title>
      <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-2-setting-appropriate-hooks/</link>
      <pubDate>Fri, 11 Apr 2025 23:42:35 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-2-setting-appropriate-hooks/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;In my previous post, you were introduced to the 3 different major frameworks that eBPFs have to offer. I also briefly talked about how the logic of its hooks.&lt;/p&gt;&#xA;&lt;p&gt;To begin crafting your own eBPF-based malware, you need to understand where and what to hook on to. You don’t just throw an eBPF program into the void and hope it latches onto something juicy. No — you need a plan, a strategy, and most importantly, knowledge of the landscape.&lt;/p&gt;</description>
    </item>
    <item>
      <title>eBPF Malware Techniques Part 1 - Introduction</title>
      <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/</link>
      <pubDate>Sat, 05 Apr 2025 09:20:03 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/</guid>
      <description>&lt;h2 id=&#34;1-background&#34;&gt;1. Background&lt;/h2&gt;&#xA;&lt;p&gt;As a cybersecurity researcher, understanding both traditional and modern methods of kernel-level code execution is crucial. Two prominent techniques you&amp;rsquo;ll encounter are LKM (Loadable Kernel Module) rootkits and eBPF-based applications.&lt;/p&gt;&#xA;&lt;p&gt;eBPF (extended Berkeley Packet Filter) is a Linux kernel technology that allows safe, user-defined code to run in kernel context. Originally intended for packet filtering, eBPF has evolved into a generic in-kernel virtual machine — enabling dynamic tracing, monitoring, networking, and even security enforcement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 7 - Custom Commands</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part7-custom-commands/</link>
      <pubDate>Wed, 19 Mar 2025 22:15:30 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part7-custom-commands/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Today&amp;rsquo;s lesson will focus primarily on creating custom commands in GDB. If you are a long term user of the vanilla GDB, you may find yourself wanting more features to support your research needs. To fulfill those needs, the open-source project, &lt;a href=&#34;https://github.com/hugsy/gef&#34;&gt;GEF (GDB Enhanced Features)&lt;/a&gt; provides many QoL features that aid dynamic analysis.&lt;/p&gt;&#xA;&lt;p&gt;However, GEF is not what I want to talk about today. Instead of using GEF, we will be writing our user-defined commands using native GDB syntax first, then extending them further with python to enhance GDB&amp;rsquo;s capabilities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linux File Monitoring With Fanotify</title>
      <link>https://mathscantor.github.io/posts/linux-file-monitoring-with-fanotify/</link>
      <pubDate>Fri, 14 Mar 2025 20:09:42 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/linux-file-monitoring-with-fanotify/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take a break from the GDB exercises and instead look into something that I have yet to talk about in this blog, and that is - Linux file monitoring with the fanotify API.&lt;/p&gt;&#xA;&lt;p&gt;Fanotify is a Linux kernel API that enables applications to receive notifications about file system events. It is commonly used for:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Real-time security monitoring (e.g., antivirus scanning)&lt;/li&gt;&#xA;&lt;li&gt;Auditing and compliance (e.g., logging file accesses)&lt;/li&gt;&#xA;&lt;li&gt;File system activity tracking (e.g., synchronizing backups)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;The main reason why so many antivirus software products use fanotify over inotify, is because it provides information on the triggering process PID and can even allow/deny any process trying to read a file via the &lt;code&gt;FAN_ALLOW&lt;/code&gt; or &lt;code&gt;FAN_DENY&lt;/code&gt; response.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 6 - Automation</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part6-automation/</link>
      <pubDate>Sat, 01 Mar 2025 09:09:02 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part6-automation/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Now that we have more or less grasp most of the basics commands in GDB, it is time to start automating all these commands.&#xA;Most of the time in my research, watch dog processes will monitor the performance of our target processes very closely. Any performance degradation&#xA;will usually lead to the process getting killed or the entire VM getting restarted. This means that if you use interactive GDB and take your&#xA;sweet time to type out the commands, the process would have held its funeral before you can even type out your 5th command.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 5 - Stepping</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/</link>
      <pubDate>Sun, 23 Feb 2025 13:08:30 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This part of the guide will demonstrate to you the differences between stepping in, over and out.&#xA;In most cases while doing cyber security research, we will not have access to symbols and source code. Thus, the examples&#xA;I provide will only be for stepping through instructions and not source lines.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-example-program&#34;&gt;2. Example Program&lt;/h2&gt;&#xA;&lt;p&gt;For this part of the tutorial, either compile &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise.c&#34;&gt;stepping-exercise.c&lt;/a&gt; or download the static binary &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise&#34;&gt;stepping-exercise&lt;/a&gt; to follow along.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 4 - Examining Memory</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part4-examining-memory/</link>
      <pubDate>Wed, 05 Feb 2025 13:05:09 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part4-examining-memory/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Part 4 of this guide will be kept unusually short as I am currently down with a fever. However, I still wanted to get something out this week.&lt;/p&gt;&#xA;&lt;p&gt;Today, we will be taking a look into the examination of process memory using GDB, and I will even showcase a useful trick to examine memory with &lt;em&gt;eval&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-examine-command-x&#34;&gt;2. Examine Command (x/)&lt;/h2&gt;&#xA;&lt;p&gt;To examine the process&amp;rsquo;s memory, we will always start of with the prefix &lt;code&gt;x/&lt;/code&gt;, followed by whatever we which to examine at a particular address.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 3 - Process Maps</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part3-process-maps/</link>
      <pubDate>Wed, 29 Jan 2025 08:58:52 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part3-process-maps/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Happy Chinese New Year! In my previous post, I did mention that I will be taking a break from posting anything due to the holiday season. However, my workaholic self jolted me out of my bed earlier this morning just so that I can squeeze out part 3 of this guide.&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-overview&#34;&gt;2. Overview&lt;/h2&gt;&#xA;&lt;p&gt;Today&amp;rsquo;s guide will mainly focus on process mappings as I only have about an hour to quickly get this guide out.&#xA;However, I think it is also important to cover some background on dynamic and static executables before talking about Process Maps.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 2 - Breakpoints &amp; Linux Calling Conventions</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/</link>
      <pubDate>Tue, 21 Jan 2025 12:21:39 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;This post is a continuation from the &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/&#34;&gt;previous post in this series&lt;/a&gt; and will cover more fundamentals on GDB and dynamic analysis.&lt;/p&gt;&#xA;&lt;p&gt;To ensure this post is not too long-winded, I have decided to only go through the following topics today:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Breakpoints&lt;/li&gt;&#xA;&lt;li&gt;Linux x86 vs x86_64 Calling Convention&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;2-breakpoints&#34;&gt;2. Breakpoints&lt;/h2&gt;&#xA;&lt;p&gt;A breakpoint is a special marker that you can set in your program to tell GDB to pause (or &amp;ldquo;break&amp;rdquo;) the program&amp;rsquo;s execution when it reaches a certain point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GDB Guide Part 1 - Basics</title>
      <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/</link>
      <pubDate>Sun, 19 Jan 2025 10:37:22 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!&lt;/p&gt;&#xA;&lt;h2 id=&#34;2-overview&#34;&gt;2. Overview&lt;/h2&gt;&#xA;&lt;p&gt;Today&amp;rsquo;s guide will show you how to:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Attach to a Process&lt;/li&gt;&#xA;&lt;li&gt;Set useful GDB Configuration&lt;/li&gt;&#xA;&lt;li&gt;Inspect Registers&lt;/li&gt;&#xA;&lt;li&gt;Disassemble Functions&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;I will be providing an example C file &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c&#34;&gt;here&lt;/a&gt; for you to compile so that you may follow the walkthrough and deepen your understanding.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Writing Packets to Pcapng in C</title>
      <link>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</link>
      <pubDate>Fri, 17 Jan 2025 10:56:44 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library.&#xA;The PcapNG file structure can be found on the &lt;a href=&#34;https://pcapng.com/&#34;&gt;Official PcapNG Documentation&lt;/a&gt;. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&amp;rsquo;t the most comprehensible.&lt;/p&gt;&#xA;&lt;p&gt;Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file. And of course, I will be providing the source code &lt;a href=&#34;https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip&#34;&gt;here&lt;/a&gt; as well.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Transferring Python Packages</title>
      <link>https://mathscantor.github.io/posts/transferring-python-packages/</link>
      <pubDate>Fri, 10 Jan 2025 08:38:41 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/transferring-python-packages/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://mathscantor.github.io/posts/transferring-python-packages/images/sumikko-penguin-nerd-loop.gif&#34; alt=&#34;sumikko-penguin-nerd-loop&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages.&#xA;This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.&#xA;If you were to face conflicting python packages on the base environment, things could get extremely messy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Installing Linux Packages Offline</title>
      <link>https://mathscantor.github.io/posts/installing-packages-offline/</link>
      <pubDate>Sun, 05 Jan 2025 11:45:27 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/installing-packages-offline/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.&lt;/p&gt;&#xA;&lt;p&gt;For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.&lt;/p&gt;&#xA;&lt;p&gt;Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Getting Root Shell Mikrotik RouterOS</title>
      <link>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</link>
      <pubDate>Fri, 03 Jan 2025 20:26:00 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</guid>
      <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;&#xA;&lt;p&gt;I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.&lt;/p&gt;&#xA;&lt;p&gt;For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface. In other words, no bash 🙁.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Welcome Stranger</title>
      <link>https://mathscantor.github.io/posts/welcome/</link>
      <pubDate>Fri, 03 Jan 2025 17:43:28 +0800</pubDate>
      <guid>https://mathscantor.github.io/posts/welcome/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;p&gt;Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.&lt;/p&gt;&#xA;&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;&#xA;&lt;p&gt;The aim of this blog is to teach other researchers tricks and tips that they may not have known. In addition, if the opportunity arises, I will also share in-depth analysis on CVEs I find interesting.&lt;/p&gt;</description>
    </item>
    <item>
      <title>About</title>
      <link>https://mathscantor.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://mathscantor.github.io/about/</guid>
      <description>&lt;p&gt;My work involves reverse engineering, vulnerability research, and building tools that interact directly with the kernel and system internals. I thrive where most abstractions break down — at the interface between hardware, OS, and application.&lt;/p&gt;&#xA;&lt;p&gt;This blog is my lab notebook: a curated collection of write-ups, technical deep dives, and research experiments from my journey through offensive security.&lt;/p&gt;&#xA;&lt;p&gt;Whether you&amp;rsquo;re here to learn, collaborate, or explore the inner workings of Linux with me — welcome! Curiosity is the only requirement.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
