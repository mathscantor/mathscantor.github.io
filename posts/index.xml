<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Mathscantor Cybersecurity Blog</title>
        <link>https://mathscantor.github.io/posts/</link>
        <description>Recent content in Posts on Mathscantor Cybersecurity Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sun, 19 Jan 2025 10:37:22 +0800</lastBuildDate>
        <atom:link href="https://mathscantor.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>GDB Guide Part 1 - Basics</title>
            <link>https://mathscantor.github.io/posts/gdb-guide-part1-basics/</link>
            <pubDate>Sun, 19 Jan 2025 10:37:22 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/gdb-guide-part1-basics/</guid>
            <description>1. Introduction Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!
2. Overview Today&amp;rsquo;s guide will show you how to:
 Attach to a Process Set useful GDB Configuration Inspect Registers Disassemble Functions  I will be providing an example C file here for you to compile so that you may follow the walkthrough and deepen your understanding.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!</p>
<h2 id="2-overview">2. Overview</h2>
<p>Today&rsquo;s guide will show you how to:</p>
<ol>
<li>Attach to a Process</li>
<li>Set useful GDB Configuration</li>
<li>Inspect Registers</li>
<li>Disassemble Functions</li>
</ol>
<p>I will be providing an example C file <a href="/posts/gdb-guide-part1-basics/resources/test.c">here</a> for you to compile so that you may follow the walkthrough and deepen your understanding.</p>
<p>To compile test.c:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gcc test.c -o test
</code></pre></div><h2 id="3-attaching-to-a-process">3. Attaching to a Process</h2>
<p>There are two ways to go about doing this. The first which is the simplest, is to run GDB with the binary path as its parameter.
The second way to do this is to attach to an already running process via its PID.</p>
<h3 id="31-via-binary">3.1 Via Binary</h3>
<p>If you have chosen this method, it means that you know the binary full path and also the parameters to run the binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gdb $BINARY_PATH
</code></pre></div><p>Afterwards, run the binary with its parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r $param1 $param2 ....
</code></pre></div><h3 id="32-via-pid">3.2 Via PID</h3>
<p>Alternatively, you can also attach to a running process via its PID in several ways as well.</p>
<ol>
<li>
<p>You can start either GDB first, then do <code>attach $PID</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gdb
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> attach $pid
</code></pre></div></li>
<li>
<p>OR, you can start GDB with the <code>-p</code> parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gdb -p <span style="color:#e6db74">`</span>pidof $PROC_NAME<span style="color:#e6db74">`</span>
</code></pre></div></li>
</ol>
<h3 id="33-test-example">3.3 Test Example</h3>
<p>I have created a video for those who are more visual learners, using a compiled test.c as an example for GDB to attach to.</p>

 

<video width=100% controls>
    <source src="/posts/gdb-guide-part1-basics/videos/attach-to-process.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="4-useful-gdb-configurations">4. Useful GDB Configurations</h2>
<p>I would recommend the following configurations right from the get-go when doing dynamic analysis.</p>
<ol>
<li>
<p><code>set pagination off</code></p>
<ul>
<li>By default, this is set to &ldquo;on&rdquo; and it is really annoying when you are dealing with large outputs, prompting you to press <code>Enter</code> in order to continue.</li>
</ul>
</li>
<li>
<p><code>set logging enabled on</code></p>
<ul>
<li>By default, this is set to &ldquo;off&rdquo;. This is very useful especially when you want to look back at the commands you ran and the outputs you had. If the file path is not stated, it will be written to gdb.txt. See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Logging-Output.html">here</a> for more information on GDB logging.</li>
</ul>
</li>
<li>
<p><code>set confirm off</code></p>
<ul>
<li>By default, this is set to &ldquo;on&rdquo; as GDB is very cautious. When automating dynamic analysis with a GDB script, this will break your automation. I will recommend turning this off only when you need to automate things.</li>
</ul>
</li>
<li>
<p><code>set print pretty on</code></p>
<ul>
<li>By default, this is set to &ldquo;off&rdquo;. This is more of a personal preference for me. This is more for you to decide whether you want your structure to be printed in one line or in a more readable form.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># set print pretty on</span>
$1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
next <span style="color:#f92672">=</span> 0x0,
flags <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
    sweet <span style="color:#f92672">=</span> 1,
    sour <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
<span style="color:#f92672">}</span>,
meat <span style="color:#f92672">=</span> 0x54 <span style="color:#e6db74">&#34;Pork&#34;</span>
<span style="color:#f92672">}</span>

<span style="color:#75715e"># set print pretty off</span>
$1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>next <span style="color:#f92672">=</span> 0x0, flags <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>sweet <span style="color:#f92672">=</span> 1, sour <span style="color:#f92672">=</span> 1<span style="color:#f92672">}</span>, meat <span style="color:#f92672">=</span> 0x54 <span style="color:#e6db74">&#34;Pork&#34;</span><span style="color:#f92672">}</span>

</code></pre></div></li>
</ul>
</li>
<li>
<p><code>set output-radix 16</code></p>
<ul>
<li>By default, output-radix is set to 10. This would print out numbers in GDB as hexadecimal. I&rsquo;m hard-wired to read hexadecimals when debugging stuff, so this is a must for me.</li>
</ul>
</li>
<li>
<p><code>set disassembly-flavor intel</code></p>
<ul>
<li>By default disassembly-flavor is set to &ldquo;att&rdquo;. However, I prefer the &ldquo;intel&rdquo; style disassembly despite specializing in Linux exploitation 🤡.</li>
</ul>
</li>
<li>
<p><code>set print elements 0</code></p>
<ul>
<li>By default, the limit is set to 200 characters. I will usually set this to 0 which means that printing is unlimited. This is especially useful whenever you are trying to print a very large string from memory.</li>
</ul>
</li>
</ol>
<h2 id="5-inspecting-registers">5. Inspecting Registers</h2>
<p>There are actually several ways to print the values of the registers.</p>
<h3 id="51-via-info-registers">5.1 Via <code>info registers</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Prints all registers&#39; values</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers

<span style="color:#75715e"># Print only rax value</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rax

<span style="color:#75715e"># Print an array of registers</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rdi rsi rdx rcx 
</code></pre></div><h3 id="52-via-print--printf">5.2 Via <code>print</code> / <code>printf</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Print rax value</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> print $rax

<span style="color:#75715e"># Printf rax value</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> printf <span style="color:#e6db74">&#34;rax = %d\n&#34;</span>, $rax

<span style="color:#75715e"># Printf rdi, rsi, rdx, rcx</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> printf <span style="color:#e6db74">&#34;rdi = %d\nrsi = %d\nrdx = %d\nrcx = %d\n&#34;</span>, $rdi, $rsi, $rdx, $rcx
</code></pre></div><h3 id="53-test-example">5.3 Test Example</h3>

 

<video width=100% controls>
    <source src="/posts/gdb-guide-part1-basics/videos/get-register-info.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="6-looking-at-disassembly">6. Looking at Disassembly</h2>
<p>Looking at disassembly provides us more information such as offsets and instruction sets.
Of course, you need not use GDB&rsquo;s disassembly feature for static analysis and can always use <a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a> or IDA (<a href="https://hex-rays.com/ida-free">Free Version</a> or <a href="https://hex-rays.com/ida-pro">Pro</a>)
which is a lot more user-friendly.</p>
<p>Assuming we can only use GDB, then the way to go about doing this is to make use of the <code>disassemble</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># If no address/function is stated, disassemble function at current instruction.</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble

<span style="color:#75715e"># Disassemble the entire function</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>

<span style="color:#75715e"># Disassemble the entire function that contain the given address</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>

<span style="color:#75715e"># Disassemble instruction between start and end address. </span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Start<span style="color:#f92672">]</span>,<span style="color:#f92672">[</span>End<span style="color:#f92672">]</span>

<span style="color:#75715e"># Disassemble from start of function to address of function + offset.</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>,+<span style="color:#f92672">[</span>Length<span style="color:#f92672">]</span>

<span style="color:#75715e"># Disassmble from address to address + offset</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>,+<span style="color:#f92672">[</span>Length<span style="color:#f92672">]</span>

<span style="color:#75715e"># Show the current instruction (rip)</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble /m <span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>

<span style="color:#75715e"># Show the byte values of all instructions</span>
<span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble /r <span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</code></pre></div><h3 id="61-test-example">6.1 Test Example</h3>

 

<video width=100% controls>
    <source src="/posts/gdb-guide-part1-basics/videos/viewing-disassembly.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="7-conclusion">7. Conclusion</h2>
<p>I figured this is a good stopping point and of course, we are not yet done! I barely scratched the surface just for the basics! Stay tuned for part 2, where I will teach you more about Linux calling conventions, setting breakpoints etc.</p>
]]></content>
        </item>
        
        <item>
            <title>Writing Packets to Pcapng in C</title>
            <link>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</link>
            <pubDate>Fri, 17 Jan 2025 10:56:44 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/writing-packets-to-pcapng-in-c/</guid>
            <description>1. Introduction Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library. The PcapNG file structure can be found on the Official PcapNG Documentation. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&amp;rsquo;t the most comprehensible.
Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library.
The PcapNG file structure can be found on the <a href="https://pcapng.com/">Official PcapNG Documentation</a>. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&rsquo;t the most comprehensible.</p>
<p>Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file. And of course, I will be providing the source code <a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">here</a> as well.</p>
<h2 id="2-overall-pcapng-structure">2. Overall PcapNG Structure.</h2>
<img class="center" alt="pcapng-structure" src="/posts/writing-packets-to-pcapng-in-c/images/pcapng-structure.png">
<div style="text-align: center;"><p>Figure 1. PcapNG Structure</p></div>
<p>The overall structure can be broken down into 3 parts:</p>
<ol>
<li>Section Header Block (SHB)
<ul>
<li>Only can have 1</li>
</ul>
</li>
<li>Interface Description Block (IDB)
<ul>
<li>Can have multiple IDBs to represent different interfaces</li>
</ul>
</li>
<li>Enhanced Packet Block (EPB)
<ul>
<li>EPB headers can relate back to different interfaces where the packet was captured.</li>
</ul>
</li>
</ol>
<p>In addition, <strong>the entire structure must be word-aligned</strong> (divisible by 4 bytes). This means that padding is necessary if it&rsquo;s not word-aligned.</p>
<blockquote>
<p>❗ <strong>Important</strong></p>
<ul>
<li>Ensure that you pad with <code>0x00</code> just before the redundant block total length section.</li>
<li>Do not pad <code>0x00</code> at the end of each block!</li>
</ul>
</blockquote>
<h2 id="3-section-header-block-shb">3. Section Header Block (SHB)</h2>
<img class="center" alt="shb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/shb-structure.png">
<div style="text-align: center;"><p>Figure 2. SHB Structure</p></div>
<p>Figure 2 can be partially translated into the following SHB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#66d9ef">uint32_t</span> block_type;
    <span style="color:#66d9ef">uint32_t</span> block_length;
    <span style="color:#66d9ef">uint32_t</span> bom;      
    <span style="color:#66d9ef">uint16_t</span> major_version;
    <span style="color:#66d9ef">uint16_t</span> minor_version;
    <span style="color:#66d9ef">int64_t</span> section_length;
} shb_headers_t;
</code></pre></div><div style="text-align: center;"><p>Listing 1. SHB Header Struct</p></div>
<p>Do take note that I did not include a <code>uint32_t block_length_redundant</code> in the struct. This is because we have to place
a padding before the redundant block length, and the padding length can vary. A struct declaration cannot take in a member with
a variable size and therefore, we have to declare it separately. The same logic will be carried through to the other blocks.</p>
<p>According to the documentation, there are some constants we need to adhere to:</p>
<ul>
<li>Block Type = <code>0x0A0D0D0A</code> &ndash;&gt; SHB Type</li>
<li>Byte-Order Magic = <code>0x1A2B3C4D</code> &ndash;&gt; Little Endian</li>
<li>Major Version = <code>0x0001</code></li>
<li>Minor Version = <code>0x0000</code></li>
<li>Section Length = <code>0xFFFFFFFFFFFFFFFF</code> &ndash;&gt; -1</li>
</ul>
<p>The writing of the SHB section can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define SHB_TYPE 0x0A0D0D0A
</span><span style="color:#75715e">#define BOM 0x1A2B3C4D
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_shb_section</span>(FILE <span style="color:#f92672">*</span>pcapng_file) {
    
    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(shb_headers_t) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
    block_length <span style="color:#f92672">+=</span> padding_length;

    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> malloc(padding_length);
    memset(padding, <span style="color:#ae81ff">0</span>, padding_length);

    shb_headers_t shb_headers <span style="color:#f92672">=</span> {
        .block_type <span style="color:#f92672">=</span> SHB_TYPE,
        .block_length <span style="color:#f92672">=</span> block_length,
        .bom <span style="color:#f92672">=</span> BOM,
        .major_version <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
        .minor_version <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        .section_length <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
    };
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(<span style="color:#f92672">&amp;</span>shb_headers, <span style="color:#66d9ef">sizeof</span>(shb_headers), <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    fflush(pcapng_file);
    <span style="color:#66d9ef">return</span> true;
}
</code></pre></div><div style="text-align: center;"><p>Listing 2. Write SHB Section Example</p></div>
<h2 id="4-interface-description-block-idb">4. Interface Description Block (IDB)</h2>
<img class="center" alt="idb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/idb-structure.png">
<div style="text-align: center;"><p>Figure 3. IDB Structure</p></div>
<p>Figure 3 can be partially translated into the following IDB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#66d9ef">uint32_t</span> block_type;
    <span style="color:#66d9ef">uint32_t</span> block_length;
    <span style="color:#66d9ef">uint16_t</span> link_type;
    <span style="color:#66d9ef">uint16_t</span> reserved;
    <span style="color:#66d9ef">uint32_t</span> snap_len;
} idb_headers_t;
</code></pre></div><div style="text-align: center;"><p>Listing 3. IDB Header Struct</p></div>
<p>Constants to adhere to:</p>
<ul>
<li>Block Type = <code>0x00000001</code> &ndash;&gt; IDB Type</li>
<li>Link Type = <code>0x0001</code> &ndash;&gt; Ethernet</li>
<li>Reserved = <code>0x0000</code></li>
<li>Snap Length = <code>0x0000FFFF</code>(65535 bytes) OR <br>
        = <code>0x00040000</code>(256kB) OR <br>
        = <code>0x00000000</code>(No Limit) <br></li>
</ul>
<p>The writing of the IDB section to a PcapNG file can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#define IDB_TYPE 0x00000001
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_idb_section</span>(FILE <span style="color:#f92672">*</span>pcapng_file) {

    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(idb_headers_t) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
    block_length <span style="color:#f92672">+=</span> padding_length;

    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> malloc(padding_length);
    memset(padding, <span style="color:#ae81ff">0</span>, padding_length);

    idb_headers_t idb_headers <span style="color:#f92672">=</span> {
        .block_type <span style="color:#f92672">=</span> IDB_TYPE,
        .block_length <span style="color:#f92672">=</span> block_length,
        .link_type <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
        .reserved <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        .snap_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">65535</span>

    };
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(<span style="color:#f92672">&amp;</span>idb_headers, <span style="color:#66d9ef">sizeof</span>(idb_headers), <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    fflush(pcapng_file);
    <span style="color:#66d9ef">return</span> true;
}
</code></pre></div><div style="text-align: center;"><p>Listing 4. Write IDB Section Example</p></div>
<h2 id="5-enhanced-packet-block-epb">5. Enhanced Packet Block (EPB)</h2>
<img class="center" alt="epb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/epb-structure.png">
<div style="text-align: center;"><p>Figure 4. EPB Structure</p></div>
<p>Figure 4 can be partially translated into the following EPB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
    <span style="color:#66d9ef">uint32_t</span> block_type;
    <span style="color:#66d9ef">uint32_t</span> block_length;
    <span style="color:#66d9ef">uint32_t</span> interface_id;
    <span style="color:#66d9ef">uint32_t</span> timestamp_high;
    <span style="color:#66d9ef">uint32_t</span> timestamp_low;
    <span style="color:#66d9ef">uint32_t</span> captured_len;
    <span style="color:#66d9ef">uint32_t</span> original_len;
} epb_headers_t;
</code></pre></div><div style="text-align: center;"><p>Listing 5. EPB Header Struct</p></div>
<p>Constants to adhere to:</p>
<ul>
<li>Block Type = <code>0x00000006</code> &ndash;&gt; EPB Type</li>
<li>Interface ID = <code>0x00000000</code> &ndash;&gt; First IDB <br>
       = <code>0x00000001</code> &ndash;&gt; Second IDB (If there is more than 1)</li>
</ul>
<p>Things to note:</p>
<ul>
<li>Timestamp Upper = <code>(uint32_t)(unix_epoch_microseconds &gt;&gt; 32)</code></li>
<li>Timestamp Lower = <code>(uint32_t)(unix_epoch_microseconds)</code></li>
<li>In most cases, <code>captured_length == original_len</code>, unless a short snap length is used.</li>
<li>If a packet is truncated due to a short snap length stated in the IDB section, then <code>captured_length &lt; original_len</code>.</li>
</ul>
<p>The writing of the EPB section to a PcapNG file can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_packet</span>(FILE<span style="color:#f92672">*</span> pcapng_file, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>packet_data, <span style="color:#66d9ef">uint32_t</span> packet_length) {
    
    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(epb_headers_t) <span style="color:#f92672">+</span> packet_length <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
    block_length <span style="color:#f92672">+=</span> padding_length;

    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> malloc(padding_length);
    memset(padding, <span style="color:#ae81ff">0</span>, padding_length);

    <span style="color:#66d9ef">uint32_t</span> ts_high <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">uint32_t</span> ts_low <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
    <span style="color:#66d9ef">struct</span> timeval tv;

    gettimeofday(<span style="color:#f92672">&amp;</span>tv, NULL);
    <span style="color:#66d9ef">uint64_t</span> unix_epoch_microseconds <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint64_t</span>)tv.tv_sec <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000000ULL</span> <span style="color:#f92672">+</span> (<span style="color:#66d9ef">uint64_t</span>)tv.tv_usec;
    
    ts_high <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint32_t</span>)(unix_epoch_microseconds <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">32</span>);
    ts_low <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint32_t</span>)(unix_epoch_microseconds);

    epb_headers_t epb_header <span style="color:#f92672">=</span> {
        .block_type <span style="color:#f92672">=</span> EPB_TYPE,
        .block_length <span style="color:#f92672">=</span> block_length,
        .interface_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
        .timestamp_high <span style="color:#f92672">=</span> ts_high,
        .timestamp_low <span style="color:#f92672">=</span> ts_low,
        .captured_len <span style="color:#f92672">=</span> packet_length,
        .original_len <span style="color:#f92672">=</span> packet_length
    };

    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(<span style="color:#f92672">&amp;</span>epb_header, <span style="color:#66d9ef">sizeof</span>(epb_header), <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(packet_data, packet_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span>fwrite(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
        <span style="color:#66d9ef">return</span> false;
    }
    fflush(pcapng_file);
    <span style="color:#66d9ef">return</span> true;
}
</code></pre></div><div style="text-align: center;"><p>Listing 6. Write EPB Section Example</p></div>
<h2 id="6-example-usage-of-pcapngh">6. Example Usage of pcapng.h</h2>
<p>After putting all the logic into a header file called &ldquo;pcapng.h&rdquo;, and asking chatgpt to generate some sample data for us to test,
we are ready to go! If you want to follow along for this part of the walkthrough, you can get a copy of my files <a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">here</a>.</p>
<p>The following listing shows a simple example of saving packets to a PcapNG file called &ldquo;output.pcapng&rdquo; in the same directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-c" data-lang="c"><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pcapng.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pcapng_samples.h&#34;</span><span style="color:#75715e">
</span><span style="color:#75715e"></span>
<span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">void</span>) {

    FILE <span style="color:#f92672">*</span>pcapng_file <span style="color:#f92672">=</span> pcapng_init_file(<span style="color:#e6db74">&#34;output.pcapng&#34;</span>);
    pcapng_write_packet(pcapng_file, sample_tcp_syn, <span style="color:#66d9ef">sizeof</span>(sample_tcp_syn));
    pcapng_write_packet(pcapng_file, sample_icmp_request, <span style="color:#66d9ef">sizeof</span>(sample_icmp_request));
    pcapng_close_file(pcapng_file);

    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
}
</code></pre></div><div style="text-align: center;"><p>Listing 7. test.c</p></div>
<p>Compile the C program and run it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ gcc test.c -o test
$ ./test
</code></pre></div><div style="text-align: center;"><p>Listing 8. Running Test Case</p></div>
<p>We can now view our &ldquo;output.pcapng&rdquo; file with Wireshark!
<img class="center" alt="wireshark_output_pcapng" src="/posts/writing-packets-to-pcapng-in-c/images/wireshark_output_pcapng.png"></p>
<div style="text-align: center;"><p>Figure 5. Wireshark - output.pcapng</p></div>
<h2 id="7-conclusion">7. Conclusion</h2>
<p>If you have reached this stage after going through the above sections, you are now a qualified expert on writing PcapNG structures 😎.
In my next post, I am going to share some important tips for static and dynamic analysis based on past mistakes that I had made. Till then,
stay safe and keep being awesome. Over and out!
<img alt="pcapng-structure" src="/posts/writing-packets-to-pcapng-in-c/images/tapioca-goodnight-loop.gif" style="zoom:40%;"></p>
<h2 id="8-references">8. References</h2>
<ol>
<li>Official PcapNG Documentation: <a href="https://pcapng.com/">https://pcapng.com/</a></li>
</ol>
<h2 id="9-resources">9. Resources</h2>
<ol>
<li><a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">pcapng-example.zip</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Transferring Python Packages</title>
            <link>https://mathscantor.github.io/posts/transferring-python-packages/</link>
            <pubDate>Fri, 10 Jan 2025 08:38:41 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/transferring-python-packages/</guid>
            <description>1. Introduction Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!
If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages. This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!</p>
<p><img src="/posts/transferring-python-packages/images/sumikko-penguin-nerd-loop.gif" alt="sumikko-penguin-nerd-loop"></p>
<p>If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages.
This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.
If you were to face conflicting python packages on the base environment, things could get extremely messy.</p>
<p>I would highly recommend using <em>miniconda</em> for managing python environments. I have been a long-term user of <em>miniconda</em> and it beats the <em>venv</em> python environment manager when it comes to the transference of packages from one machine to another.</p>
<p>This guide will show you how to:</p>
<ul>
<li>Install <em>miniconda</em></li>
<li>Create python environments with the <code>conda</code> command</li>
<li>Install python packages into the environment</li>
<li>Transfer python environments with the <code>conda</code> command</li>
</ul>
<blockquote>
<p>❗ <strong>Important</strong></p>
<ul>
<li>Before we proceed, is is also important to know the target machine&rsquo;s processor architecture and OS version.</li>
<li>Sections 2 to 5.1 have to be done on a similar machine to the target machine.</li>
<li>If the preperation machine is too different from the target machine, the transfer will fail!</li>
</ul>
</blockquote>
<h2 id="2-installing-miniconda">2. Installing Miniconda</h2>
<h3 id="21-windows">2.1 Windows</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-powershell" data-lang="powershell">PS C:\Users\gerald&gt; curl https<span style="color:#960050;background-color:#1e0010">:</span>//repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o miniconda.exe
PS C:\Users\gerald&gt; Start-Process -FilePath <span style="color:#e6db74">&#34;.\miniconda.exe&#34;</span> -ArgumentList <span style="color:#e6db74">&#34;/S&#34;</span> -Wait
PS C:\Users\gerald&gt; del miniconda.exe
</code></pre></div><p>After installation, open the “Anaconda Powershell Prompt (miniconda3)”.</p>
<h3 id="22-linux">2.2 Linux</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gerald@nexus:~$ mkdir -p ~/miniconda3
gerald@nexus:~$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
gerald@nexus:~$ bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
gerald@nexus:~$ rm ~/miniconda3/miniconda.sh
</code></pre></div><p>After installing, close and reopen your terminal application or refresh it by running the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gerald@nexus:~$ source ~/miniconda3/bin/activate
</code></pre></div><p>To initialize conda on all available shells, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">gerald@nexus:~$ conda init --all
</code></pre></div><h2 id="3-creating-python-environments-with-conda">3. Creating Python Environments with Conda</h2>
<p>Once you have a working setup, you should be able to see that there is a <code>(base)</code> environment in your terminal.
The two figures below are for Windows and Linux, respectively.</p>
<p><img src="/posts/transferring-python-packages/images/miniconda_powershell.png" alt="alt text"></p>
<p><img src="/posts/transferring-python-packages/images/miniconda_bash.png" alt="alt text"></p>
<p>To create a new environment with basic python packages, do the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ conda create -n $ENVIRONMENT_NAME python<span style="color:#f92672">=</span>$PYTHON_VERSION
</code></pre></div><h2 id="4-install-python-packages-in-environment">4. Install Python Packages in Environment</h2>
<p>The following example assumes that I have created an environment called test-env. Do note
that the Linux and Windows conda syntax is exactly the same.</p>
<ol>
<li>
<p>Activate the environment</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ conda activate test-env
</code></pre></div></li>
<li>
<p><strong>IMPORTANT</strong> - Install conda-pack</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ conda install conda-pack
</code></pre></div></li>
<li>
<p>Install whichever python package you need with <em>pip3</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ pip3 install $PYTHON_PACKAGE
</code></pre></div></li>
</ol>
<h2 id="5-transferring-python-environments-with-conda">5. Transferring Python Environments with Conda</h2>
<h3 id="51-packing-the-environment">5.1 Packing the Environment</h3>
<p>While the environment is still activated, run the following command to archive this environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ conda-pack
</code></pre></div><p>On success, this should give you a <code>.tar.gz</code> archive of the environment.</p>
<h3 id="52-unpacking-environment-on-target-machine">5.2 Unpacking Environment on Target Machine</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">user@target:~$ mkdir test-env
user@target:~$ tar -xzf test-env.tar.gz -C test-env
user@target:~$ source test-env/bin/activate
<span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> user@target:~$ conda-unpack
</code></pre></div><p>If everything has been done properly up to this stage, you will have a working python environment with all your packages in your target machine.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>I have been using this workaround for quite some time now and while doing this write-up, I realized that conda has a new feature where you can specify the target platform when creating a new environment. The example shown in their official documentation is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ conda create --platform osx-64 --name python-x64 python
</code></pre></div><p>I have yet to test this new feature out. Perhaps I will do a follow-up post soon to explore this new workflow.
Adios for now!</p>
<h2 id="7-references">7. References</h2>
<ol>
<li><a href="https://docs.anaconda.com/miniconda/install/">https://docs.anaconda.com/miniconda/install/</a></li>
<li><a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Installing Linux Packages Offline</title>
            <link>https://mathscantor.github.io/posts/installing-packages-offline/</link>
            <pubDate>Sun, 05 Jan 2025 11:45:27 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/installing-packages-offline/</guid>
            <description>1. Introduction Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.
For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.
Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.</p>
<p>For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.</p>
<p>Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.</p>
<p>For now, this post will only be going through the steps to install packages offline for Ubuntu and CentOS machines. In the future, I may revist and update this post again if I find more workarounds.</p>
<h2 id="2-ubuntu">2. Ubuntu</h2>
<h3 id="21-editing-apt-source">2.1 Editing Apt Source</h3>
<p>The first thing you want to do is to edit /etc/apt/sources.list and uncomment the lines that start with <code>deb-src</code>.</p>
<p>Once you are done, your /etc/apt/sources.list should look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ cat /etc/apt/sources.list

<span style="color:#75715e">#deb cdrom:[Ubuntu 22.04.1 LTS _Jammy Jellyfish_ - Release amd64 (20220809.1)]/ jammy main restricted</span>

<span style="color:#75715e"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span>
<span style="color:#75715e"># newer versions of the distribution.</span>
deb http://sg.archive.ubuntu.com/ubuntu/ jammy main restricted
deb-src http://sg.archive.ubuntu.com/ubuntu/ jammy main restricted
....
</code></pre></div><p>💡 Tip</p>
<ul>
<li>Depending on the Ubuntu version you are using, the distro name will be different. In my case, my Ubuntu internet-connected machine is 22.04, and hence mine is jammy.</li>
</ul>
<h3 id="22-downloading-main-package-with-dependencies">2.2 Downloading Main Package with Dependencies</h3>
<ol>
<li>
<p>Make a new directory to save your packages</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">user@internet-connected:~$ mkdir $HOME/Downloads/xfer
</code></pre></div></li>
<li>
<p>Change directory</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">user@internet-connected:~$ cd $HOME/Downloads/xfer
</code></pre></div></li>
<li>
<p>Download package with its dependencies</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">user@internet-connected:~/Downloads/xfer$ apt-get download <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">$(</span>apt-cache depends --recurse --no-recommends <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--no-suggests --no-conflicts --no-breaks <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--no-replaces --no-enhances <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>$PACKAGE_NAME | grep <span style="color:#e6db74">&#34;^\w&#34;</span><span style="color:#66d9ef">)</span>
</code></pre></div></li>
</ol>
<h3 id="23-transfer-and-install-on-offline-machine">2.3 Transfer and Install on Offline Machine</h3>
<p>Now that you have the main package with its dependencies, use whichever method you prefer to transfer these packages over to the offline machine.</p>
<p>Then, just run the following command to install all packages. Do not that this is an extremely lazy way of doing things and it does not regard the order in which the packages should be installed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">user@standalone:~/Downloads/xfer$ sudo dpkg -i *.deb
</code></pre></div><p>If the above command does not install everything the first time due to the wrong order of dependencies being installed, just run it a few more times until you see that there&rsquo;s no error. It&rsquo;s abit stupid&hellip;I know. But if it works, it works.</p>
<p><img src="/posts/installing-packages-offline/images/sumikko-gurashi-penguin-throw-book.gif" alt="sumikko-gurashi-penguin-throw-book"></p>
<h3 id="24--bonus----extracting-libraries-and-binaries">2.4 ⭐ BONUS -  Extracting Libraries and Binaries</h3>
<p>Assuming you just want some libraries from the <code>.deb</code> package, you can make use of <code>dpkg-deb</code> extraction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># SYSROOT_PATH refers to the directory to extract to.</span>
$ dpkg-deb -x $PACKAGE_NAME.deb $SYSROOT_PATH
</code></pre></div><p>Here&rsquo;s also a one liner to extract all <code>.deb</code> packages in the same directory for the lazy people out there like myself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ DEBS<span style="color:#f92672">=(</span><span style="color:#66d9ef">$(</span>ls | grep <span style="color:#e6db74">&#34;.deb&#34;</span><span style="color:#66d9ef">)</span><span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">for</span> package in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>DEBS[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">do</span> dpkg-deb -x $package $SYSROOT_PATH; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="3-centos">3. CentOS</h2>
<p>If your CentOS Version has reached EOL (End of Life), you will need to update the remote yum repository URLs. Otherwise, you can skip the steps in sub section 3.1.</p>
<h3 id="31-editing-yum-source">3.1 Editing Yum Source</h3>
<p>For CentOS Versions that have reached EOL, you may find all archived packages in the following 2 URLs:</p>
<ol>
<li><a href="https://vault.centos.org/">https://vault.centos.org/</a></li>
<li><a href="https://archive.kernel.org/centos-vault/">https://archive.kernel.org/centos-vault/</a></li>
</ol>
<p>For this example, I used CentOS 8.5.2111 which has already reached EOL.</p>
<p>For the following 3 repository lists, comment out <code>mirrorlist</code>, and edit the <code>baseurl</code> accordingly:</p>
<ol>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-AppStream.repo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#a6e22e">...</span>
<span style="color:#66d9ef">[appstream]</span>
<span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - AppStream</span>
<span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span>
<span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/AppStream/$basearch/os/</span>
<span style="color:#a6e22e">...</span>
</code></pre></div></li>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-BaseOS.repo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#a6e22e">...</span>
<span style="color:#66d9ef">[baseos]</span>
<span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - BaseOS</span>
<span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=BaseOS&amp;infra=$infra</span>
<span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/BaseOS/$basearch/os/</span>
<span style="color:#a6e22e">...</span>
</code></pre></div></li>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-Extras.repo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ini" data-lang="ini"><span style="color:#a6e22e">...</span>
<span style="color:#66d9ef">[extras]</span>
<span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - Extras</span>
<span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span>
<span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/extras/$basearch/os/</span>
<span style="color:#a6e22e">...</span>
</code></pre></div></li>
</ol>
<p>Once you are done, do a <code>dnf update</code> / <code>yum update</code> to check that the remote reposiotry is working properly.</p>
<h3 id="32-downloading-main-package-with-dependencies">3.2 Downloading Main Package with Dependencies</h3>
<p>You can use either <code>dnf</code> or <code>yum</code> to download your packages.</p>
<h4 id="321-using-dnf">3.2.1 Using dnf</h4>
<ol>
<li>Install dnf-plugins-core (if not already installed)
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ sudo dnf install dnf-plugins-core
</code></pre></div></li>
<li>Download the package together with its dependencies
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ dnf download --resolve <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--destdir $HOME/Downloads/xfer <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>$PACKAGE_NAME
</code></pre></div></li>
</ol>
<h4 id="322-using-yum">3.2.2 Using yum</h4>
<ol>
<li>Install yum-utils (if not already installed)
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ sudo yum install yum-utils
</code></pre></div></li>
<li>Download the package together with its dependencies
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ yumdownloader --resolve <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>--destdir $HOME/Downloads/xfer <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>$PACKAGE_NAME
</code></pre></div></li>
</ol>
<h3 id="33-transfer-and-install-on-offline-machine">3.3 Transfer and Install on Offline Machine</h3>
<p>You can use either <code>dnf</code> or <code>yum</code> to install your packages.</p>
<h4 id="331-using-dnf">3.3.1 Using dnf</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>user@standalone ~<span style="color:#f92672">]</span>$ sudo dnf localinstall *.rpm
</code></pre></div><h4 id="332-using-yum">3.3.2 Using yum</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>user@standalone ~<span style="color:#f92672">]</span>$ sudo yum localinstall *.rpm
</code></pre></div><h3 id="34--bonus----extracting-libraries-and-binaries">3.4 ⭐ BONUS -  Extracting Libraries and Binaries</h3>
<p>Assuming you just want some libraries from the <code>.rpm</code> package, you can make use of
<code>rpm2cpio</code> and <code>cpio</code> for extraction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># SYSROOT_PATH refers to the directory to extract to.</span>
<span style="color:#f92672">[</span>user@localhost ~<span style="color:#f92672">]</span>$ rpm2cpio $PACKAGE_NAME.rpm <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>| <span style="color:#f92672">(</span>cd $SYSROOT_PATH <span style="color:#f92672">&amp;&amp;</span> cpio -idmv<span style="color:#f92672">)</span>
</code></pre></div><p>Here&rsquo;s also a one liner to extract all <code>.rpm</code> packages in the same directory for the lazy people out there like myself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ RPMS<span style="color:#f92672">=(</span><span style="color:#66d9ef">$(</span>ls | grep <span style="color:#e6db74">&#34;.rpm&#34;</span><span style="color:#66d9ef">)</span><span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">for</span> package in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>RPMS[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">do</span> rpm2cpio $package <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span>| <span style="color:#f92672">(</span>cd $SYSROOT_PATH <span style="color:#f92672">&amp;&amp;</span> cpio -idmv<span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#66d9ef">done</span>
</code></pre></div><h2 id="4-conclusion">4. Conclusion</h2>
<p>If you have made it this far, congratulations!
<img src="/posts/installing-packages-offline/images/sumikko-gurashi-party-popper.gif" alt="sumikko-gurashi"></p>
<p>I hope you learnt something useful today and if this works like a charm for you, you are always welcome to come back to reference these set of instructions for your future use. Cheers and have a nice day!</p>
]]></content>
        </item>
        
        <item>
            <title>Getting Root Shell Mikrotik RouterOS</title>
            <link>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</link>
            <pubDate>Fri, 03 Jan 2025 20:26:00 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/getting-root-shell-mikrotik-routeros/</guid>
            <description>1. Introduction I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.
For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.</p>
<p>For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface. In other words, no bash 🙁.</p>
<p>This walkthrough will show a step-by-step process to break out of &ldquo;jail&rdquo;.</p>
<h2 id="2-walkthrough">2. Walkthrough</h2>
<p>Subsection 2.1 shows how to set up the VM.</p>
<p>Subsections 2.2 to 2.4 shows how the jailbreak was discovered.</p>
<p>If you are only interested in the steps to jailbreak, please follow from subsections 2.5 onwards.
Do also note that the walkthrough is based on a older version of Mikrotik RouterOS - 6.42.11.</p>
<h3 id="21-getting-started">2.1 Getting Started</h3>
<p>Firstly, we need to get the ISO file of interest from the official <a href="https://mikrotik.com/download/archive"><strong>mikrotik archives</strong></a>.</p>
<p>Spin up a VM using any hypervisor of your choosing. I would personally recommend using VMWare as it is now free for personal use. However, if you are doing research on a commercial network, please make sure you have a commercial license activated if not you may get yourself into hot water.</p>
<p>To start the installation of the Mikrotik RouterOS, create a new virtual machine from the ISO file and when selecting a guest operating system, choose <em>Other &ndash;&gt; Other</em>.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/vmware-guest-operating-system.png" alt="vmware-guest-operating-system"></p>
<p>Follow the instructions of the installation, and on success you will be prompted to login. By default the administrator username is &lsquo;admin&rsquo; with no password.</p>
<p>If everything is okay up till this point, you will be able to see the RouterOS CLI.</p>
<p><img src="/posts/getting-root-shell-mikrotik-routeros/images/mikrotik-admin-shell.png" alt="vmware-guest-operating-system"></p>
<p>After logging in as admin, we need to assign an IP address to our VM. For this example, I have assigned 172.16.205.150/24 as my RouterOS IP. Please change the values according to your own setup.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>admin@MikroTik &gt; /ip address add address<span style="color:#f92672">=</span>172.16.205.150/24 interface<span style="color:#f92672">=</span>ether1<span style="color:#f92672">]</span>
</code></pre></div><p>After wards, do a simple ping test from your host to see if it is reachable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ping 172.16.205.150

PING 172.16.205.150 <span style="color:#f92672">(</span>172.16.205.150<span style="color:#f92672">)</span> 56<span style="color:#f92672">(</span>84<span style="color:#f92672">)</span> bytes of data.
<span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>37.5 ms
<span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>0.709 ms
<span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>0.391 ms
</code></pre></div><p>Test if FTP works as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ftp admin@172.16.205.150

Connected to 172.16.205.150.
<span style="color:#ae81ff">220</span> MikroTik FTP server <span style="color:#f92672">(</span>MikroTik 6.42.11<span style="color:#f92672">)</span> ready
<span style="color:#ae81ff">331</span> Password required <span style="color:#66d9ef">for</span> admin
Password: 
<span style="color:#ae81ff">230</span> User admin logged in
Remote system type is UNIX.
Using binary mode to transfer files.
ftp&gt;
</code></pre></div><h3 id="22-getting-system-file-npk-from-iso">2.2 Getting system file (.npk) from ISO</h3>
<p>On my ubuntu host, I used 7zip to extract the iso to get its corresponding .npk files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ 7z x mikrotik-6.42.11.iso

<span style="color:#75715e"># Output</span>
7-Zip <span style="color:#f92672">[</span>64<span style="color:#f92672">]</span> 9.20  Copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 1999-2010 Igor Pavlov  2010-11-18
p7zip Version 9.20 <span style="color:#f92672">(</span>locale<span style="color:#f92672">=</span>en_US.UTF-8,Utf16<span style="color:#f92672">=</span>on,HugeFiles<span style="color:#f92672">=</span>on,4 CPUs<span style="color:#f92672">)</span>
Processing archive: mikrotik-6.42.11.iso
Extracting  advanced-tools-6.42.11.npk
Extracting  calea-6.42.11.npk
Extracting  defpacks
Extracting  dhcp-6.42.11.npk
Extracting  dude-6.42.11.npk
Extracting  gps-6.42.11.npk
...
</code></pre></div><p>The only file that we are interested in is the system .npk file.</p>
<h3 id="23-unpacking-system-npk-file">2.3 Unpacking System .npk File</h3>
<p>Using binwalk, we can extract the system file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ binwalk -e system-6.42.11.npk

<span style="color:#75715e"># Output</span>
DECIMAL       HEXADECIMAL     DESCRIPTION
--------------------------------------------------------------------
<span style="color:#ae81ff">0</span>             0x0             NPK firmware header, image size: 15616295, image name: <span style="color:#e6db74">&#34;system&#34;</span>, description: <span style="color:#e6db74">&#34;&#34;</span>
<span style="color:#ae81ff">4096</span>          0x1000          Squashfs filesystem, little endian, version 4.0, compression:xz, size: <span style="color:#ae81ff">9818075</span> bytes, <span style="color:#ae81ff">1340</span> inodes, blocksize: <span style="color:#ae81ff">262144</span> bytes, created: 2018-12-21 09:18:10
<span style="color:#ae81ff">9822304</span>       0x95E060        ELF, 32-bit LSB executable, Intel 80386, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>
<span style="color:#ae81ff">9842177</span>       0x962E01        Unix path: /sys/devices/system/cpu
...
</code></pre></div><p>If everything runs successfully up to this point, a <strong>_system-$VERSION.npk.extracted</strong> directory will be created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ ls -la _system-6.42.11.npk.extracted/squashfs-root/	

total <span style="color:#ae81ff">72</span>
drwxr-xr-x <span style="color:#ae81ff">18</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:41 .
drwxrwxr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 ..
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 bin
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> boot
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> dev
lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 dude -&gt; /dev/null
drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 etc
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> flash
drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> home
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> initrd
drwxr-xr-x  <span style="color:#ae81ff">4</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 lib
drwxr-xr-x  <span style="color:#ae81ff">5</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 nova
drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> old
lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 pckg -&gt; /dev/null
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> proc
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> ram
lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 rw -&gt; /dev/null
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> sbin
drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> sys
lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 tmp -&gt; /dev/null
</code></pre></div><h3 id="24-jailbreak-discovery">2.4 Jailbreak Discovery</h3>
<p>Looking through the files, you will stumble upon <strong>squashfs-root/etc/rc.d/run.d/S12defconf</strong>.
A snippet of the bash script is shown in the listing below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">...
defcf<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /rw/DEFCONF<span style="color:#66d9ef">)</span>
echo &gt; /ram/defconf-params
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -f /nova/bin/flash <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	/nova/bin/flash --fetch-defconf-params /ram/defconf-params
<span style="color:#66d9ef">fi</span>
<span style="color:#f92672">(</span>eval <span style="color:#66d9ef">$(</span>cat /ram/defconf-params<span style="color:#66d9ef">)</span> action<span style="color:#f92672">=</span>apply /bin/gosh $defcf;
cp $defcf $confirm; rm /rw/DEFCONF /ram/defconf-params<span style="color:#f92672">)</span> &amp;
</code></pre></div><p>The above suggests that <strong>/rw/DEFCONF</strong> is a Go Shell script that will be executed on boot.
It is also removed right after finishing execution.
This means that if we can edit/add this script, we will be able to do whatever with want with the system.</p>
<h3 id="25-download-busybox-on-host-machine">2.5 Download busybox on host machine</h3>
<p>BusyBox is a software suite that provides several Unix utilities in a single executable file. The idea is to upload the busybox executable via FTP and edit the <strong>/rw/DEFCONF</strong> to run our busybox.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ curl https://www.busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-i686 &gt; busybox-i686
</code></pre></div><h3 id="26-upload-the-busybox-via-ftp">2.6 Upload the busybox via FTP</h3>
<p>Again, we can login as admin via FTP with no password and we will upload our previously downloaded busybox executable binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">ftp&gt; put busybox-i686

local: busybox-i686 remote: busybox-i686
<span style="color:#ae81ff">229</span> Entering Extended Passive Mode <span style="color:#f92672">(||</span>|55029|<span style="color:#f92672">)</span>
<span style="color:#ae81ff">150</span> Opening BINARY mode data connection <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;/busybox-i686&#39;</span>
100% |***********************************|   <span style="color:#ae81ff">901</span> KiB   18.72 MiB/s    00:00 ETA
<span style="color:#ae81ff">226</span> BINARY transfer complete
<span style="color:#ae81ff">922936</span> bytes sent in 00:00 <span style="color:#f92672">(</span>17.56 MiB/s
</code></pre></div><p>After this, power off your virtual machine.</p>
<h3 id="27-boot-from-centos-6-iso">2.7 Boot from CentOS 6 ISO</h3>
<p>The CentOS 6 ISO can be gotten from <a href="https://ftp.riken.jp/Linux/centos-vault/6.8/isos/x86_64/CentOS-6.8-x86_64-LiveCD.iso"><strong>here</strong></a></p>
<p>Switch out the ISO file attached to the CD/ROM hardware component of the VM.</p>
<p>We will then force the first boot to go through the bios by adding the following line in the .vmx file of our VM.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ vim Mikrotik-6.42.11.vmx

<span style="color:#75715e"># Add the following line any where</span>
bios.forceSetupOnce <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRUE&#34;</span>
</code></pre></div><p>Change the boot order by pushing the CD/ROM to the first. Press F10 to save and exit.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/bios-boot-order-cd-first.png" alt="bios-boot-order-cd-first"></p>
<p>Upon exiting, you will see the CentOS 6 installer option. Choose the <em>Boot</em> option.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/boot-centos-livecd.png" alt="boot-centos-livecd"></p>
<p>Once inside CentOS 6, Click on the top left <em>Applications &ndash;&gt; System Tools &ndash;&gt; Terminal</em>.
Run the following commands to mount the routeros sysroot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#f92672">[</span>centos@livecd centoslive<span style="color:#f92672">]</span>$ sudo su
<span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ mkdir /mnt/routeros-sysroot
<span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ mount /dev/sda2 /mnt/routeros-sysroot
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Create a new DEFCONF file that runs busy box</span>
<span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ echo <span style="color:#e6db74">&#34;ok; /rw/disk/busybox-i686 telnetd -l /bin/sh -p 1270;&#34;</span> &gt; /mnt/routeros-sysroot/rw/DEFCONF

<span style="color:#75715e"># Ensure that busybox has executable permission</span>
<span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ chmod +x /mnt/routeros-sysroot/rw/disk/busybox-i686
</code></pre></div><h3 id="28-getting-root-shell">2.8 Getting Root Shell</h3>
<p>Once done, shutdown the VM, edit the <em>hardware settings &ndash;&gt; CD/DVD (IDE)</em> and uncheck <em>Connect at power on</em>.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/iso-uncheck-connect-at-power-on.png" alt="iso-uncheck-connect-at-power-on"></p>
<p>Upon powering on the VM, you will see this output instead of the normal login screen.</p>
<p><img src="/posts/getting-root-shell-mikrotik-routeros/images/busybox-running1.png" alt="busybox-running1"></p>
<p>We can now telnet into our RouterOS via port 1270.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ telnet 172.16.205.150 <span style="color:#ae81ff">1270</span>
</code></pre></div><p><img src="/posts/getting-root-shell-mikrotik-routeros/images/telnet-success.png" alt="telnet-success"></p>
<h3 id="29-running-commands">2.9 Running Commands</h3>
<p>Unlike the typical unix shell, we cannot run the normal linux commands as it is as we would need
to piggyback on busybox in order to run anything.
<img src="/posts/getting-root-shell-mikrotik-routeros/images/busybox-piggyback-ls.png" alt="busybox-piggyback-ls"></p>
<p>Thus to put simply, the template to run any bash commands is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">$ /rw/disk/busybox-i686 $COMMAND
</code></pre></div><h2 id="3-conclusion">3. Conclusion</h2>
<p>I hope this guide is comprehensive enough for those who want to get started on
doing vulnerability research on Mikrotik RouterOS systems. If you made it this far,
I hope you learnt a lot and had fun along the way. Cheers and see you in the next post 😃.</p>
]]></content>
        </item>
        
        <item>
            <title>Welcome Stranger</title>
            <link>https://mathscantor.github.io/posts/welcome/</link>
            <pubDate>Fri, 03 Jan 2025 17:43:28 +0800</pubDate>
            
            <guid>https://mathscantor.github.io/posts/welcome/</guid>
            <description>Introduction Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.
Goals The aim of this blog is to teach other researchers tricks and tips that they may not have known.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.</p>
<h2 id="goals">Goals</h2>
<p>The aim of this blog is to teach other researchers tricks and tips that they may not have known. In addition, if the opportunity arises, I will also share in-depth analysis on CVEs I find interesting.</p>
<h2 id="future">Future</h2>
<p>This blog will most likely be continuously updated as the years go by as it is free. Thanks Hugo!</p>
]]></content>
        </item>
        
    </channel>
</rss>
