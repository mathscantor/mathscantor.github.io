<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Mathscantor&#39;s Cybersecurity Blog</title>
        <link>http://localhost:1313/posts/</link>
        <description>Recent content in Posts on Mathscantor&#39;s Cybersecurity Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Sat, 01 Mar 2025 09:09:02 +0800</lastBuildDate>
        <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>GDB Guide Part 6 - Automation</title>
            <link>http://localhost:1313/posts/gdb-guides/gdb-guide-part6-automation/</link>
            <pubDate>Sat, 01 Mar 2025 09:09:02 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/gdb-guides/gdb-guide-part6-automation/</guid>
            <description>1. Introduction Now that we have more or less grasp most of the basics commands in GDB, it is time to start automating all these commands. Most of the time in my research, watch dog processes will monitor the performance of our target processes very closely. Any performance degradation will usually lead to the process getting killed or the entire VM getting restarted. This means that if you use interactive GDB and take your sweet time to type out the commands, the process would have held its funeral before you can even type out your 5th command.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Now that we have more or less grasp most of the basics commands in GDB, it is time to start automating all these commands.
Most of the time in my research, watch dog processes will monitor the performance of our target processes very closely. Any performance degradation
will usually lead to the process getting killed or the entire VM getting restarted. This means that if you use interactive GDB and take your
sweet time to type out the commands, the process would have held its funeral before you can even type out your 5th command.</p>
<p>At this point you may ask, &ldquo;If we can debug processes, doesn&rsquo;t that mean we are already root and we control the VM?&rdquo;. Unfortunately, we often share
test beds with other researchers and we have to becareful how we debug processes, as it can be very disruptive for other people.</p>
<h2 id="2-test-program">2. Test Program</h2>
<p>To make you appreciate this tutorial better, I generated a test program using chatgpt to create a watchdog and a watched child process.
In the video below, I demonstrated that the moment the watched process&rsquo;s execution is paused, it will be killed by the watchdog.</p>

 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part6-automation/videos/watchdog-kills-process.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<p>It is recommended to get the <a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise.c">source file</a> or the <a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise">static binary</a> to follow along from this section onwards.</p>
<h2 id="3-assigning-commands-to-breakpoints">3. Assigning Commands to Breakpoints</h2>
<p>To assign a set of commands to any breakpoint, use <code>commands</code>.
According to the gdb manual:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span>(gdb) help commands
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Set commands to be executed when the given breakpoints are hit.
</span></span><span style="display:flex;"><span>Give a space<span style="color:#f92672">-</span>separated breakpoint list as argument after <span style="color:#e6db74">&#34;commands&#34;</span>.
</span></span><span style="display:flex;"><span>A list element can be a breakpoint <span style="color:#a6e22e">number</span> (e.g. <span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">5</span><span style="color:#960050;background-color:#1e0010">&#39;</span>) or a range of <span style="color:#a6e22e">numbers</span>
</span></span><span style="display:flex;"><span>(e.g. <span style="color:#960050;background-color:#1e0010">`</span><span style="color:#ae81ff">5</span><span style="color:#f92672">-</span><span style="color:#ae81ff">7</span><span style="color:#960050;background-color:#1e0010">&#39;</span>).
</span></span><span style="display:flex;"><span>With no argument, the targeted breakpoint is the last one set.
</span></span><span style="display:flex;"><span>The commands themselves follow starting on the next line.
</span></span><span style="display:flex;"><span>Type a line containing <span style="color:#e6db74">&#34;end&#34;</span> to indicate the end of them.
</span></span><span style="display:flex;"><span>Give <span style="color:#e6db74">&#34;silent&#34;</span> as the first line to make the breakpoint silent;
</span></span><span style="display:flex;"><span>then no output is printed when it is hit, except what the commands print.
</span></span></code></pre></div><p>Let&rsquo;s test this out in practice by inspecting the the 3 arguments supplied to the <em>write</em> function call.
To do so, we will write all our commands into a gdb script, called automation-exercise.gdb.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>set pag off
</span></span><span style="display:flex;"><span>set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span>set confirm off
</span></span><span style="display:flex;"><span>set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>b write
</span></span><span style="display:flex;"><span>commands
</span></span><span style="display:flex;"><span>  info registers rdi rsi rdx
</span></span><span style="display:flex;"><span>  <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>end
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># After setting the breakpoint and  commands, resume the process.</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">continue</span>
</span></span></code></pre></div><p>In order to attach to the process and run the commands from our file, we need to supply gdb <code>--batch</code> and <code>-x</code>.
According to the gdb manual page,</p>
<blockquote>
<p><code>--batch</code></p>
<ul>
<li>Run  in  batch  mode.  Exit with status 0 after processing all the  command files specified with -x (and .gdbinit, if not  inhibited).  Exit  with  nonzero status if an error occurs in executing the GDB commands in the command files.</li>
</ul>
<p><code>-x file</code></p>
<ul>
<li>Execute GDB commands from file.</li>
</ul>
</blockquote>
<p>Thus, our gdb arguments will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb --batch -x automation-exercise.gdb -p $PID
</span></span></code></pre></div>
 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part6-automation/videos/breakpoint-write-commands-info-registers.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<p>Just for practice, edit the above gdb script to only print out messages sent from the child process to the watchdog.
As a start, you need to find out which argument is the one that contains the buffer. You can also filter out irrelevant write calls by
the file descriptor.Since we do not want the write calls from printf, we can ignore it if the file descriptor is 1 (stdout fd is 1).</p>
<p>If you have done everything right, your output will look something similar to the example shown below.</p>

 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part6-automation/videos/extra-exercise.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<p>If you still cannot figure it out, that&rsquo;s alright. Here&rsquo;s the <a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise-extras.gdb">answer</a> to the extra exercise.</p>
<h2 id="4-conclusion">4. Conclusion</h2>
<p>After today&rsquo;s exercise, I hope you have gained more confidence in debugging targets that cannot have their executions paused indefinitely. In the next post, I will be sharing more about more automation techinques by defining your own custom commands.</p>
<h2 id="5-resources">5. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise.c">automation-exercise.c</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise">automation-exercise</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise.gdb">automation-exercise.gdb</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part6-automation/resources/automation-exercise-extras.gdb">automation-exercise-extras.gdb</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 5 - Stepping</title>
            <link>http://localhost:1313/posts/gdb-guides/gdb-guide-part5-stepping/</link>
            <pubDate>Sun, 23 Feb 2025 13:08:30 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/gdb-guides/gdb-guide-part5-stepping/</guid>
            <description>1. Introduction This part of the guide will demonstrate to you the differences between stepping in, over and out. In most cases while doing cyber security research, we will not have access to symbols and source code. Thus, the examples I provide will only be for stepping through instructions and not source lines.
2. Example Program For this part of the tutorial, either compile stepping-exercise.c or download the static binary stepping-exercise to follow along.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>This part of the guide will demonstrate to you the differences between stepping in, over and out.
In most cases while doing cyber security research, we will not have access to symbols and source code. Thus, the examples
I provide will only be for stepping through instructions and not source lines.</p>
<h2 id="2-example-program">2. Example Program</h2>
<p>For this part of the tutorial, either compile <a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise.c">stepping-exercise.c</a> or download the static binary <a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise">stepping-exercise</a> to follow along.</p>
<h2 id="2-stepping-in">2. Stepping In</h2>
<p>To step through one instruction at a time, the command to use will be <code>stepi / si</code>.
For more information, see the help usage of <code>stepi / si</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> help si
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>stepi, si
</span></span><span style="display:flex;"><span>Step one instruction exactly.
</span></span><span style="display:flex;"><span>Usage: stepi <span style="color:#f92672">[</span>N<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Argument N means step N times <span style="color:#f92672">(</span>or till program stops <span style="color:#66d9ef">for</span> another reason<span style="color:#f92672">)</span>.
</span></span></code></pre></div><p>The following example shows the relevant commands for stepping into 5 instructions after we hit the breakpoint at the start of <em>fib_num()</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b fib_num
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x4018bd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the program and enter any number</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
</span></span><span style="display:flex;"><span>Enter Fibonacci Sequence: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x00000000004018bd in fib_num <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inspect 10 instructions from the current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/10i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x4018bd &lt;fib_num+8&gt;:        mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,edi
</span></span><span style="display:flex;"><span>   0x4018c0 &lt;fib_num+11&gt;:       mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x10<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x4018c7 &lt;fib_num+18&gt;:       mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0xc<span style="color:#f92672">]</span>,0x1
</span></span><span style="display:flex;"><span>   0x4018ce &lt;fib_num+25&gt;:       mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x8<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x4018d5 &lt;fib_num+32&gt;:       cmp    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,0x0
</span></span><span style="display:flex;"><span>   0x4018d9 &lt;fib_num+36&gt;:       jne    0x4018e0 &lt;fib_num+43&gt;
</span></span><span style="display:flex;"><span>   0x4018db &lt;fib_num+38&gt;:       mov    eax,DWORD PTR <span style="color:#f92672">[</span>rbp-0x10<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x4018de &lt;fib_num+41&gt;:       jmp    0x40191a &lt;fib_num+101&gt;
</span></span><span style="display:flex;"><span>   0x4018e0 &lt;fib_num+43&gt;:       cmp    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,0x1
</span></span><span style="display:flex;"><span>   0x4018e4 &lt;fib_num+47&gt;:       jne    0x4018eb &lt;fib_num+54&gt;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Step into 5 instructions</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> si <span style="color:#ae81ff">5</span>
</span></span><span style="display:flex;"><span>0x00000000004018d9 in fib_num <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inspect the current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x4018d9 &lt;fib_num+36&gt;:       jne    0x4018e0 &lt;fib_num+43&gt;
</span></span></code></pre></div><h2 id="3-stepping-over">3. Stepping Over</h2>
<p>Stepping over is slightly different from stepping as it treats a function/subroutine call as one instruction. To step over instructions, the command to use is <code>nexti / ni</code>.
To see more information on <code>nexti / ni</code>, refer to the help usage.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> help ni
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>nexti, ni
</span></span><span style="display:flex;"><span>Step one instruction, but proceed through subroutine calls.
</span></span><span style="display:flex;"><span>Usage: nexti <span style="color:#f92672">[</span>N<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>Argument N means step N times <span style="color:#f92672">(</span>or till program stops <span style="color:#66d9ef">for</span> another reason<span style="color:#f92672">)</span>.
</span></span></code></pre></div><p>The following example shows the relevant commands for stepping over the fib_num call after we hit the breakpoint at the function call to <em>fib_num()</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Diassemble main to find the offset of the call to fib_num()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disass main
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> main:
</span></span><span style="display:flex;"><span>   ...
</span></span><span style="display:flex;"><span>   0x0000000000401959 &lt;+61&gt;:    mov    rdi,rax
</span></span><span style="display:flex;"><span>   0x000000000040195c &lt;+64&gt;:    mov    eax,0x0
</span></span><span style="display:flex;"><span>   0x0000000000401961 &lt;+69&gt;:    call   0x404e00 &lt;__isoc99_scanf&gt;
</span></span><span style="display:flex;"><span>   0x0000000000401966 &lt;+74&gt;:    mov    eax,DWORD PTR <span style="color:#f92672">[</span>rbp-0xc<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>   0x0000000000401969 &lt;+77&gt;:    mov    edi,eax
</span></span><span style="display:flex;"><span>   0x000000000040196b &lt;+79&gt;:    call   0x4018b5 &lt;fib_num&gt;
</span></span><span style="display:flex;"><span>   0x0000000000401970 &lt;+84&gt;:    mov    esi,eax
</span></span><span style="display:flex;"><span>   ...
</span></span><span style="display:flex;"><span>End of assembler dump.
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set a breakpoint at the call instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b *<span style="color:#f92672">(</span>main + 79<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x40196b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Run the program and enter any number</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
</span></span><span style="display:flex;"><span>Enter Fibonacci Sequence: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x000000000040196b in main <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Inspect 5 instructions from the current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/5i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x40196b &lt;main+79&gt;:  call   0x4018b5 &lt;fib_num&gt;
</span></span><span style="display:flex;"><span>   0x401970 &lt;main+84&gt;:  mov    esi,eax
</span></span><span style="display:flex;"><span>   0x401972 &lt;main+86&gt;:  lea    rax,<span style="color:#f92672">[</span>rip+0x9b6d1<span style="color:#f92672">]</span>        <span style="color:#75715e"># 0x49d04a</span>
</span></span><span style="display:flex;"><span>   0x401979 &lt;main+93&gt;:  mov    rdi,rax
</span></span><span style="display:flex;"><span>   0x40197c &lt;main+96&gt;:  mov    eax,0x0
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Current instruction is after fib_num() call.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x401970 &lt;main+84&gt;:  mov    esi,eax
</span></span></code></pre></div><h2 id="4-stepping-out">4. Stepping Out</h2>
<p>The last method of stepping is to execute everything in the current function and return back to the caller. To do so, use the
<code>finish</code> command. To see more information on <code>finish</code>, refer to the help usage.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> help finish
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>finish, fin
</span></span><span style="display:flex;"><span>Execute <span style="color:#66d9ef">until</span> selected stack frame returns.
</span></span><span style="display:flex;"><span>Usage: finish
</span></span><span style="display:flex;"><span>Upon <span style="color:#66d9ef">return</span>, the value returned is printed and put in the value history.
</span></span></code></pre></div><p>The following example shows the relevant commands for stepping out of the <em>fib_num()</em> function and getting its return value.
The</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pag off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b fib_num
</span></span><span style="display:flex;"><span>Breakpoint <span style="color:#ae81ff">1</span> at 0x4018bd
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r
</span></span><span style="display:flex;"><span>Starting program: /home/gerald/Desktop/Repositories/hugo-blog/staging.mathscantor.github.io/static/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise 
</span></span><span style="display:flex;"><span>Enter Fibonacci Sequence: <span style="color:#ae81ff">10</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Breakpoint 1, 0x00000000004018bd in fib_num <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> finish
</span></span><span style="display:flex;"><span>Run till exit from <span style="color:#75715e">#0  0x00000000004018bd in fib_num ()</span>
</span></span><span style="display:flex;"><span>0x0000000000401970 in main <span style="color:#f92672">()</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># See current instruction</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/i $pc
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x401970 &lt;main+84&gt;:  mov    esi,eax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Get the return value of fib_num()</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p $rax
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#ae81ff">55</span>
</span></span></code></pre></div><h2 id="5-conclusion">5. Conclusion</h2>
<p>Now that you have made it this far, you have mastered the basics of GDB! In the next few guides, I will be going through more advanced techniques to achieve greater efficiency in dynamic analysis through automation.</p>
<p>Stay safe and healthy folks!</p>
<h2 id="6-resources">6. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise.c">stepping-exercise.c</a></li>
<li><a href="/posts/gdb-guides/gdb-guide-part5-stepping/resources/stepping-exercise">stepping-exercise</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 4 - Examining Memory</title>
            <link>http://localhost:1313/posts/gdb-guides/gdb-guide-part4-examining-memory/</link>
            <pubDate>Wed, 05 Feb 2025 13:05:09 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/gdb-guides/gdb-guide-part4-examining-memory/</guid>
            <description>1. Introduction Part 4 of this guide will be kept unusually short as I am currently down with a fever. However, I still wanted to get something out this week.
Today, we will be taking a look into the examination of process memory using GDB, and I will even showcase a useful trick to examine memory with eval.
2. Examine Command (x/) To examine the process&amp;rsquo;s memory, we will always start of with the prefix x/, followed by whatever we which to examine at a particular address.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Part 4 of this guide will be kept unusually short as I am currently down with a fever. However, I still wanted to get something out this week.</p>
<p>Today, we will be taking a look into the examination of process memory using GDB, and I will even showcase a useful trick to examine memory with <em>eval</em>.</p>
<h2 id="2-examine-command-x">2. Examine Command (x/)</h2>
<p>To examine the process&rsquo;s memory, we will always start of with the prefix <code>x/</code>, followed by whatever we which to examine at a particular address.</p>
<h3 id="21-bytes">2.1 Bytes</h3>
<p>This example shows you how to display 16 bytes from 0x7ffd2d856f1b.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/16bx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x48    0x65    0x6c    0x6c    0x6f    0x20    0x57    0x6f
</span></span><span style="display:flex;"><span>0x7ffd2d856f23: 0x72    0x6c    0x64    0x21    0x00    0x00    0x7f    0xfb
</span></span></code></pre></div><h3 id="22-half-words-2-bytes">2.2 Half Words (2 Bytes)</h3>
<p>This example shows you how to display 8 half words from 0x7ffd2d856f1b.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/8hx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x6548  0x6c6c  0x206f  0x6f57  0x6c72  0x2164  0x0000  0xfb7f
</span></span></code></pre></div><h3 id="23-words-4-bytes">2.3 Words (4 Bytes)</h3>
<p>This example shows you how to display 4 words from 0x7ffd2d856f1b.
When dealing with 32 bit binaries, it will be useful to display the memory as a word if there is a pointer at the address of examination.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/4wx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x6c6c6548      0x6f57206f      0x21646c72      0xfb7f0000
</span></span></code></pre></div><h3 id="24-giant-words-8-bytes">2.4 Giant Words (8 Bytes)</h3>
<p>This example shows you how to display 2 giant words from 0x7ffd2d856f1b.
For 64 bit binaries, it will be useful to display the memory as a giant word if there is a pointer at the address of examination.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/2gx 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x6f57206f6c6c6548      0xfb7f000021646c72
</span></span></code></pre></div><h3 id="25-strings">2.5 Strings</h3>
<p>This example shows you how to display the bytes as ASCII characters. This command will iteratively convert the byte from the starting address until it hits a <code>0x00</code> byte.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/s 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: <span style="color:#e6db74">&#34;Hello World!&#34;</span>
</span></span></code></pre></div><h3 id="26-instructions">2.6 Instructions</h3>
<p>This example shows you how to display 5 instructions from the current instruction.
Note that on x86-64, <code>$pc</code> is just an alias for <code>$rip</code>, which is the instruction pointer.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> x/5i $pc
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">=</span>&gt; 0x5ecd0af2e1d1 &lt;func_1+8&gt;:   sub    $0x10,%rsp
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1d5 &lt;func_1+12&gt;:  mov    %rdi,-0x8<span style="color:#f92672">(</span>%rbp<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1d9 &lt;func_1+16&gt;:  mov    %rsi,-0x10<span style="color:#f92672">(</span>%rbp<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1dd &lt;func_1+20&gt;:  mov    -0x8<span style="color:#f92672">(</span>%rbp<span style="color:#f92672">)</span>,%rax
</span></span><span style="display:flex;"><span>   0x5ecd0af2e1e1 &lt;func_1+24&gt;:  mov    %rax,%rsi
</span></span></code></pre></div><h2 id="3-creative-usage-of-eval">3. Creative usage of eval</h2>
<p>If you want to automate your GDB script and set different sizes when examining bytes, you can do the following using <em>eval</em>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $num_bytes <span style="color:#f92672">=</span> <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $addr <span style="color:#f92672">=</span> 0x7ffd2d856f1b
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> eval <span style="color:#e6db74">&#34;x/%dbx %p&#34;</span>, $num_bytes, $addr
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>0x7ffd2d856f1b: 0x48    0x65    0x6c    0x6c    0x6f    0x20    0x57    0x6f
</span></span><span style="display:flex;"><span>0x7ffd2d856f23: 0x72    0x6c    0x64    0x21    0x00    0x00    0x7f    0xfb
</span></span></code></pre></div><h2 id="4-conclusion">4. Conclusion</h2>
<p>That is it folks. T&rsquo;was short and mundane, but I hope you found the eval usage meaningful to use in your everyday work. Gotta go rest in bed now.
<img alt="sumikko-bedtime-loop" src="/posts/gdb-guides/gdb-guide-part4-examining-memory/images/sumikko-bedtime-loop.gif"></p>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 3 - Process Maps</title>
            <link>http://localhost:1313/posts/gdb-guides/gdb-guide-part3-process-maps/</link>
            <pubDate>Wed, 29 Jan 2025 08:58:52 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/gdb-guides/gdb-guide-part3-process-maps/</guid>
            <description>1. Introduction Happy Chinese New Year! In my previous post, I did mention that I will be taking a break from posting anything due to the holiday season. However, my workaholic self jolted me out of my bed earlier this morning just so that I can squeeze out part 3 of this guide.
2. Overview Today&amp;rsquo;s guide will mainly focus on process mappings as I only have about an hour to quickly get this guide out.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Happy Chinese New Year! In my previous post, I did mention that I will be taking a break from posting anything due to the holiday season. However, my workaholic self jolted me out of my bed earlier this morning just so that I can squeeze out part 3 of this guide.</p>
<h2 id="2-overview">2. Overview</h2>
<p>Today&rsquo;s guide will mainly focus on process mappings as I only have about an hour to quickly get this guide out.
However, I think it is also important to cover some background on dynamic and static executables before talking about Process Maps.</p>
<p>Again, the examples used for this walkthrough is the same <a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a> file from earlier parts of the guide.</p>
<h2 id="3-dynamic-executables">3. Dynamic Executables</h2>
<p>Firstly, we will compile our test file without any fanciful GCC flags.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test_d
</span></span></code></pre></div><p>We can then use the <em>ldd</em> command to inspect the libraries that it depends on.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ldd test_d
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>  linux-vdso.so.1 <span style="color:#f92672">(</span>0x00007ffe93378000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  libc.so.6 <span style="color:#f92672">=</span>&gt; /lib/x86_64-linux-gnu/libc.so.6 <span style="color:#f92672">(</span>0x000076a082a00000<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>  /lib64/ld-linux-x86-64.so.2 <span style="color:#f92672">(</span>0x000076a082d7a000<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Looking at the output above, it seems at first glance, that we require 3 libraries. However, <em>linux-vdso.so.1</em>, is just a virtual shared object that doesn&rsquo;t have any physical file on the disk. It&rsquo;s actually part of the kernel that&rsquo;s exported into every program&rsquo;s address space when it&rsquo;s loaded.</p>
<p>Thus, our test binary actually only loads <em>libc.so.6</em> and <em>ld-linux-x86-64.so.2</em> upon running.</p>
<h2 id="4-static-executables">4. Static Executables</h2>
<p>To compile a static executable, we will require additional GCC flags that tell the compiler to cramp all the different library functions into one single binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc -static test.c -o test_s
</span></span></code></pre></div><p>Again, we can use the <em>ldd</em> command to check that it is now a standalone executable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ldd test_s
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>  <span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>  not a dynamic executable
</span></span></code></pre></div><h2 id="5-process-maps">5. Process Maps</h2>
<p>Process Maps are basically a mapping of memory regions to certain sections of a binary or library. Understanding Process Maps will play a crucial part in doing dynamic analysis on a stripped binary. A stripped binary means that it does not contain any symbols and thus, we cannot simply set breakpoints on a function name.</p>
<p>To inspect the memory regions, we can either do it via the old-school method by looking at /proc/$PID/maps or using GDB.</p>
<h3 id="51-via-procpidmaps">5.1 Via /proc/pid/maps</h3>
<p>Run <em>test_d</em> in one of the terminals, and run the following command in a new terminal:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ cat /proc/<span style="color:#e6db74">`</span>pidof test_d<span style="color:#e6db74">`</span>/maps
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>615276507000-615276508000 r--p <span style="color:#ae81ff">00000000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>615276508000-615276509000 r-xp <span style="color:#ae81ff">00001000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>615276509000-61527650a000 r--p <span style="color:#ae81ff">00002000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>61527650a000-61527650b000 r--p <span style="color:#ae81ff">00002000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>61527650b000-61527650c000 rw-p <span style="color:#ae81ff">00003000</span> fc:01 <span style="color:#ae81ff">49020965</span>    /tmp/test_d
</span></span><span style="display:flex;"><span>6152a572b000-6152a574c000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>741be5800000-741be5828000 r--p <span style="color:#ae81ff">00000000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5828000-741be59bd000 r-xp <span style="color:#ae81ff">00028000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be59bd000-741be5a15000 r--p 001bd000 fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a15000-741be5a16000 ---p <span style="color:#ae81ff">00215000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a16000-741be5a1a000 r--p <span style="color:#ae81ff">00215000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a1a000-741be5a1c000 rw-p <span style="color:#ae81ff">00219000</span> fc:01 <span style="color:#ae81ff">7080047</span>     /usr/lib/x86_64-linux-gnu/libc.so.6
</span></span><span style="display:flex;"><span>741be5a1c000-741be5a29000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span>741be5a8b000-741be5a8e000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span>741be5aa1000-741be5aa3000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span> 
</span></span><span style="display:flex;"><span>741be5aa3000-741be5aa5000 r--p <span style="color:#ae81ff">00000000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5aa5000-741be5acf000 r-xp <span style="color:#ae81ff">00002000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5acf000-741be5ada000 r--p 0002c000 fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5adb000-741be5add000 r--p <span style="color:#ae81ff">00037000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>741be5add000-741be5adf000 rw-p <span style="color:#ae81ff">00039000</span> fc:01 <span style="color:#ae81ff">7080039</span>     /usr/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
</span></span><span style="display:flex;"><span>7ffc8ca55000-7ffc8ca76000 rw-p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>stack<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>7ffc8cb04000-7ffc8cb08000 r--p <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>vvar<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>7ffc8cb08000-7ffc8cb0a000 r-xp <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>           <span style="color:#f92672">[</span>vdso<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>ffffffffff600000-ffffffffff601000 --xp <span style="color:#ae81ff">00000000</span> 00:00 <span style="color:#ae81ff">0</span>   <span style="color:#f92672">[</span>vsyscall<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>From the output above, we know the following base addresses:</p>
<ol>
<li><em>test_d</em> &ndash;&gt; <code>0x615276507000</code></li>
<li><em>libc.so.6</em> &ndash;&gt; <code>0x741be5800000</code></li>
<li><em>ld-linux-x86-64.so.2</em> &ndash;&gt; <code>0x741be5aa3000</code></li>
</ol>
<p>As practice, you can do the same with <em>test_s</em> and get the base address of itself.</p>
<h3 id="52-via-gdb">5.2 Via GDB</h3>
<p>GDB also has a feature to look at the Process Maps via <code>info proc mappings</code>.</p>
<p>For this example, we shall run <em>test_s</em> and attach to it using another terminal.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb -p <span style="color:#e6db74">`</span>pidof test_s<span style="color:#e6db74">`</span>
</span></span></code></pre></div><p>Then, run the following command to inspect the Process Maps:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info proc mappings
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>process <span style="color:#ae81ff">24816</span>
</span></span><span style="display:flex;"><span>Mapped address spaces:
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>          Start Addr           End Addr       Size     Offset  Perms  objfile
</span></span><span style="display:flex;"><span>            0x400000           0x401000     0x1000        0x0  r--p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x401000           0x4b7000    0xb6000     0x1000  r-xp   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4b7000           0x4e1000    0x2a000    0xb7000  r--p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4e2000           0x4e6000     0x4000    0xe1000  r--p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4e6000           0x4e9000     0x3000    0xe5000  rw-p   /tmp/test_s
</span></span><span style="display:flex;"><span>            0x4e9000           0x4ee000     0x5000        0x0  rw-p   
</span></span><span style="display:flex;"><span>          0x2e5b6000         0x2e5d8000    0x22000        0x0  rw-p   <span style="color:#f92672">[</span>heap<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      0x7fffc2860000     0x7fffc2881000    0x21000        0x0  rw-p   <span style="color:#f92672">[</span>stack<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      0x7fffc29b1000     0x7fffc29b5000     0x4000        0x0  r--p   <span style="color:#f92672">[</span>vvar<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>      0x7fffc29b5000     0x7fffc29b7000     0x2000        0x0  r-xp   <span style="color:#f92672">[</span>vdso<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>  0xffffffffff600000 0xffffffffff601000     0x1000        0x0  --xp   <span style="color:#f92672">[</span>vsyscall<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>From the output above, we know that the base address of <em>test_s</em> is <code>0x400000</code>.</p>
<p>As practice, you can do the same with <em>test_d</em> and get the base address of itself and its libraries.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>With the memory regions mapped out, we will be able to debug stripped binaries easily. Stay tuned for part 4 where I will be going through on how we can debug our stripped test program. Adios!</p>
<h2 id="7-resources">7. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 2 - Breakpoints &amp; Linux Calling Conventions</title>
            <link>http://localhost:1313/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/</link>
            <pubDate>Tue, 21 Jan 2025 12:21:39 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/</guid>
            <description>1. Introduction This post is a continuation from the previous post in this series and will cover more fundamentals on GDB and dynamic analysis.
To ensure this post is not too long-winded, I have decided to only go through the following topics today:
Breakpoints Linux x86 vs x86_64 Calling Convention 2. Breakpoints A breakpoint is a special marker that you can set in your program to tell GDB to pause (or &amp;ldquo;break&amp;rdquo;) the program&amp;rsquo;s execution when it reaches a certain point.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>This post is a continuation from the <a href="/posts/gdb-guides/gdb-guide-part1-basics/">previous post in this series</a> and will cover more fundamentals on GDB and dynamic analysis.</p>
<p>To ensure this post is not too long-winded, I have decided to only go through the following topics today:</p>
<ol>
<li>Breakpoints</li>
<li>Linux x86 vs x86_64 Calling Convention</li>
</ol>
<h2 id="2-breakpoints">2. Breakpoints</h2>
<p>A breakpoint is a special marker that you can set in your program to tell GDB to pause (or &ldquo;break&rdquo;) the program&rsquo;s execution when it reaches a certain point.</p>
<p>When you set a breakpoint at a specific line of code or address, GDB will make the program stop executing by inserting a <code>int 3</code> instruction just before that point is reached.</p>
<h3 id="21-setting-breakpoints">2.1 Setting Breakpoints</h3>
<p>You can set a breakpoint with the following syntax:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> break <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> break *<span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>
</span></span></code></pre></div><blockquote>
<p>💡 Tip</p>
<ul>
<li>You can use the shorthand &lsquo;b&rsquo; instead of &ldquo;break&rdquo;</li>
</ul>
</blockquote>
<h3 id="22-regex-breakpoints">2.2 Regex Breakpoints</h3>
<p>Apart from setting breakpoint at specific functions or addresses, there&rsquo;s another cool trick to break on functions that match a regular expression.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Break on every function available</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> rbreak .
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Break on function that starts with &#34;func_&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> rbreak ^func_.$
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Break on function that ends with &#34;nc_1&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> rbreak .nc_1$
</span></span></code></pre></div><h3 id="23-viewing-breakpoints">2.3 Viewing Breakpoints</h3>
<p>When you have too many breakpoints and things start to get a little messy, you can list down your current breakpoints by doing the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info breakpoints
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Example Output</span>
</span></span><span style="display:flex;"><span>Num     Type           Disp Enb Address            What
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">1</span>       breakpoint     keep y   0x000062086fb611d1 &lt;func_1+8&gt;
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">2</span>       breakpoint     keep y   0x000062086fb61203 &lt;func_2+8&gt;
</span></span></code></pre></div><h3 id="24-deleting-breakpoints">2.4 Deleting Breakpoints</h3>
<p>If you have finished debugging at one of the breakpoints, you can delete them via the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>If you need to delete more than one breakpoint, here are some other examples:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># If no number is specified, it will delete all breakpoints</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints 
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete breakpoints 2, 4 and 6</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints <span style="color:#ae81ff">2</span> <span style="color:#ae81ff">4</span> <span style="color:#ae81ff">6</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Delete breakpoints 1 to 6</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> delete breakpoints 1-6
</span></span></code></pre></div><h3 id="25-disabling--enabling-breakpoints">2.5 Disabling / Enabling Breakpoints</h3>
<p>Depending on the situation, you may also want to consider disabling and re-enabling certain breakpoints.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disable breakpoints <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> enable breakpoints <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>If you need to disable / enable more than one breakpoint, you can follow the syntax in <a href="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/#24-deleting-breakpoints">Section 2.4</a></p>
<h3 id="26-conditional-breakpoints">2.6 Conditional Breakpoints</h3>
<p>At times you will find that your breakpoint keeps getting triggered by random sources and is generating too much noise.
In that case, you may consider adding a <code>condition</code> clause to the breakpoint.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> condition <span style="color:#f92672">[</span>Breakpoint Number<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>....<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>The example below demonstrates how to set a conditional breakpoint to <em>func_1()</em>, such that this breakpoint only triggers if <code>valueAt(EBP + 0xC) == 0xD</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b func_1
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> condition <span style="color:#ae81ff">1</span> <span style="color:#f92672">{</span>unsigned long<span style="color:#f92672">}(</span>$ebp+0xc<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> 0xd
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Alternatively</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> condition <span style="color:#ae81ff">1</span> *<span style="color:#f92672">(</span>unsigned long *<span style="color:#f92672">)(</span>$ebp+0xc<span style="color:#f92672">)</span> <span style="color:#f92672">==</span> 0xd
</span></span></code></pre></div><h2 id="3-linux-calling-conventions">3. Linux Calling Conventions</h2>
<p>Depending on the architecture, the way registers are &ldquo;loaded&rdquo; in memory will be different.
Bear in mind that this section will not cover ARM. Perhaps in the future, I will do a separate post about it. For now, we will keep things simple and stick to x86(32 bit) and x86_64(64 bit) architectures.</p>
<h3 id="31-32-bit---x86">3.1 32 Bit - x86</h3>
<p>You can read the full details <a href="https://en.wikipedia.org/wiki/X86_calling_conventions">here</a>, but if you just want the gist of it, the following diagram summarizes the x86 calling convention.</p>
<img class="center" alt="epb-structure" src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/images/x86_calling_convention.png">
<div style="text-align: center;"><p>Figure 1. x86 Stack Frame</p></div>
<p>Following the above diagram as an example, if we have a function that takes in 3 parameters, the 3rd parameter will get pushed onto the stack first, followed by the 2nd then the 1st. 4 bytes after the address of EBP, it contains the return address after the function call.</p>
<p>Unlike 64 bit binaries, <strong>addresses are only stored as a 4-byte value</strong>.</p>
<p>We can actually test this out by compiling our <a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a> program shown previously in part 1 of the tutorial, as a 32 bit ELF binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc -m32 test.c -o test32
</span></span></code></pre></div><p>To practice what we have learned earlier, let us set a breakpoint on <em>func_2()</em> and print out its parameters and return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Set the GDB configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pagination off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set confirm off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set breakpoint at func_2 and continue</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b func_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># In the process, select option 2 to trigger the breakpoint</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## We know that param 1 is a char *.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## and param_2 is an unsigned long.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>char *<span style="color:#f92672">}(</span>$ebp + 0x8<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_2 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long<span style="color:#f92672">}(</span>$ebp + 0xc<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $return_addr <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long<span style="color:#f92672">}(</span>$ebp + 0x4<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>char *<span style="color:#f92672">)</span>$param_1
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>unsigned long<span style="color:#f92672">)</span>$param_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span>$return_addr
</span></span></code></pre></div>
 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/videos/x86-calling-convention-example.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h3 id="32-64-bit---x86_64">3.2 64 Bit - x86_64</h3>
<p>The <a href="http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html#:~:text=Calling%20Convention&text=The%20caller%20uses%20registers%20to,off%20the%20stack%20in%20order.">MIT documentation</a> on 64-bit Linux does get straight to the point but lack concrete examples. Instead, I found out this other <a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">blog post</a>
talking about it and found it a lot more comprehensible. You could give it a read if you have the time.</p>
<p>For those of you who just want the TLDR, refer to the diagram below.</p>
<img class="center" alt="epb-structure" src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/images/x86_64_calling_convention.png">
<div style="text-align: center;"><p>Figure 2. x86_64 Stack Frame</p></div>
<p>At the start of the function, the following parameters will be stored in its respective registers:</p>
<ol>
<li><code>RDI</code> &mdash; Param 1</li>
<li><code>RSI</code> &mdash; Param 2</li>
<li><code>RDX</code> &mdash; Param 3</li>
<li><code>RCX</code> &mdash; Param 4</li>
<li><code>R8</code> &mdash; Param 5</li>
<li><code>R9</code> &mdash; Param 6</li>
</ol>
<p>This is followed by a set of instructions to push the values stored in <code>RDI</code>, <code>RSI</code>, <code>RDX</code>, <code>RCX</code>, <code>R8</code> and <code>R9</code> onto the stack sequentially.</p>
<p>The example below shows a possible set of instructions near the start of <em>test_func()</em> that takes in 6 parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disass test_func
</span></span><span style="display:flex;"><span>Dump of assembler code <span style="color:#66d9ef">for</span> <span style="color:#66d9ef">function</span> test_func:
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1c9 &lt;+0&gt;:     endbr64 
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1cd &lt;+4&gt;:     push   rbp
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1ce &lt;+5&gt;:     mov    rbp,rsp
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1d1 &lt;+8&gt;:     sub    rsp,0x20
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1d5 &lt;+12&gt;:    mov    QWORD PTR <span style="color:#f92672">[</span>rbp-0x8<span style="color:#f92672">]</span>,rdi
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1d9 &lt;+16&gt;:    mov    QWORD PTR <span style="color:#f92672">[</span>rbp-0x10<span style="color:#f92672">]</span>,rsi
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1dd &lt;+20&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x14<span style="color:#f92672">]</span>,edx
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1e0 &lt;+23&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x18<span style="color:#f92672">]</span>,ecx
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1e3 &lt;+26&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x1c<span style="color:#f92672">]</span>,r8d
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1e7 &lt;+30&gt;:    mov    DWORD PTR <span style="color:#f92672">[</span>rbp-0x20<span style="color:#f92672">]</span>,r9d
</span></span><span style="display:flex;"><span>   0x00005988a0e0c1eb &lt;+34&gt;:    mov    rax,QWORD PTR <span style="color:#f92672">[</span>rbp-0x8<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>Upon entry into <em>test_func()</em>, RIP is at <code>&lt;test_func+0&gt;</code>. At this point, all the parameter values are still stored in the 6 registers.
However, when the RIP is at <code>&lt;test_func+34&gt;</code>, the Stack Frame will be similar to the one shown in Figure 2.</p>
<p>Enough talking and let&rsquo;s get to work!</p>
<p>Similar to the GDB exercise shown in <a href="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/#31-32-bit---x86">Section 3.1</a>, we will do the same here for a 64-bit binary. In case you haven&rsquo;t compiled already, please run the following command to compile a 64-bit ELF binary:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test
</span></span></code></pre></div><p>Again, we shall do the same to set a breakpoint on <em>func_2()</em> and print out its parameters and return address.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Set the GDB configuration</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set pagination off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set confirm off
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set output-radix <span style="color:#ae81ff">16</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set disassembly-flavor intel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Set breakpoint at func_2 and continue</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> b func_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> <span style="color:#66d9ef">continue</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># In the process, select option 2 to trigger the breakpoint</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## We know that param 1 is a char *.</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">## and param_2 is an unsigned long.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_1 <span style="color:#f92672">=</span> $rdi
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $param_2 <span style="color:#f92672">=</span> $rsi
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> set $return_addr <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>unsigned long long<span style="color:#f92672">}(</span>$rbp + 0x8<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>char *<span style="color:#f92672">)</span>$param_1
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>unsigned long<span style="color:#f92672">)</span>$param_2
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> p <span style="color:#f92672">(</span>void *<span style="color:#f92672">)</span>$return_addr
</span></span></code></pre></div>
 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part2-breakpoints-and-linux-calling-conventions/videos/x86-64-calling-convention-example.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="4-conclusion">4. Conclusion</h2>
<p>Good job making it this far! There won&rsquo;t be any more new posts for a while from now as Chinese New Year is around the corner.</p>
<p>Until then, keep practicing and stay awesome!</p>
<h2 id="5-references">5. References</h2>
<ol>
<li><a href="https://en.wikipedia.org/wiki/X86_calling_conventions">x86 Calling Convention</a></li>
<li><a href="http://6.s081.scripts.mit.edu/sp18/x86-64-architecture-guide.html">MIT x86-64 Architecture Guide</a></li>
<li><a href="https://www.ired.team/miscellaneous-reversing-forensics/windows-kernel-internals/linux-x64-calling-convention-stack-frame">IRed Team Blog - Linux x64 Calling Convention Stack Frame</a></li>
</ol>
<h2 id="6-resources">6. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>GDB Guide Part 1 - Basics</title>
            <link>http://localhost:1313/posts/gdb-guides/gdb-guide-part1-basics/</link>
            <pubDate>Sun, 19 Jan 2025 10:37:22 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/gdb-guides/gdb-guide-part1-basics/</guid>
            <description>1. Introduction Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!
2. Overview Today&amp;rsquo;s guide will show you how to:
Attach to a Process Set useful GDB Configuration Inspect Registers Disassemble Functions I will be providing an example C file here for you to compile so that you may follow the walkthrough and deepen your understanding.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Part 1 of this series is meant as an introduction to GDB for beginners. As I progress through this series, I will be sharing more advanced tips and even provide a nice template in writing your own custom GDB commands using python!</p>
<h2 id="2-overview">2. Overview</h2>
<p>Today&rsquo;s guide will show you how to:</p>
<ol>
<li>Attach to a Process</li>
<li>Set useful GDB Configuration</li>
<li>Inspect Registers</li>
<li>Disassemble Functions</li>
</ol>
<p>I will be providing an example C file <a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">here</a> for you to compile so that you may follow the walkthrough and deepen your understanding.</p>
<p>To compile test.c:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test
</span></span></code></pre></div><h2 id="3-attaching-to-a-process">3. Attaching to a Process</h2>
<p>There are two ways to go about doing this. The first which is the simplest, is to run GDB with the binary path as its parameter.
The second way to do this is to attach to an already running process via its PID.</p>
<h3 id="31-via-binary">3.1 Via Binary</h3>
<p>If you have chosen this method, it means that you know the binary full path and also the parameters to run the binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb $BINARY_PATH
</span></span></code></pre></div><p>Afterwards, run the binary with its parameters.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> r $param1 $param2 ....
</span></span></code></pre></div><h3 id="32-via-pid">3.2 Via PID</h3>
<p>Alternatively, you can also attach to a running process via its PID in several ways as well.</p>
<ol>
<li>
<p>You can start either GDB first, then do <code>attach $PID</code>.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> attach $pid
</span></span></code></pre></div></li>
<li>
<p>OR, you can start GDB with the <code>-p</code> parameter.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gdb -p <span style="color:#e6db74">`</span>pidof $PROC_NAME<span style="color:#e6db74">`</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="33-test-example">3.3 Test Example</h3>
<p>I have created a video for those who are more visual learners, using a compiled test.c as an example for GDB to attach to.</p>

 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part1-basics/videos/attach-to-process.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="4-useful-gdb-configurations">4. Useful GDB Configurations</h2>
<p>I would recommend the following configurations right from the get-go when doing dynamic analysis.</p>
<ol>
<li>
<p><code>set pagination off</code></p>
<ul>
<li>By default, this is set to &ldquo;on&rdquo; and it is really annoying when you are dealing with large outputs, prompting you to press <code>Enter</code> in order to continue.</li>
</ul>
</li>
<li>
<p><code>set logging enabled on</code></p>
<ul>
<li>By default, this is set to &ldquo;off&rdquo;. This is very useful especially when you want to look back at the commands you ran and the outputs you had. If the file path is not stated, it will be written to gdb.txt. See <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/Logging-Output.html">here</a> for more information on GDB logging.</li>
</ul>
</li>
<li>
<p><code>set confirm off</code></p>
<ul>
<li>By default, this is set to &ldquo;on&rdquo; as GDB is very cautious. When automating dynamic analysis with a GDB script, this will break your automation. I will recommend turning this off only when you need to automate things.</li>
</ul>
</li>
<li>
<p><code>set print pretty on</code></p>
<ul>
<li>By default, this is set to &ldquo;off&rdquo;. This is more of a personal preference for me. This is more for you to decide whether you want your structure to be printed in one line or in a more readable form.
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># set print pretty on</span>
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>next <span style="color:#f92672">=</span> 0x0,
</span></span><span style="display:flex;"><span>flags <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>
</span></span><span style="display:flex;"><span>    sweet <span style="color:#f92672">=</span> 1,
</span></span><span style="display:flex;"><span>    sour <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>,
</span></span><span style="display:flex;"><span>meat <span style="color:#f92672">=</span> 0x54 <span style="color:#e6db74">&#34;Pork&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">}</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># set print pretty off</span>
</span></span><span style="display:flex;"><span>$1 <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>next <span style="color:#f92672">=</span> 0x0, flags <span style="color:#f92672">=</span> <span style="color:#f92672">{</span>sweet <span style="color:#f92672">=</span> 1, sour <span style="color:#f92672">=</span> 1<span style="color:#f92672">}</span>, meat <span style="color:#f92672">=</span> 0x54 <span style="color:#e6db74">&#34;Pork&#34;</span><span style="color:#f92672">}</span>
</span></span></code></pre></div></li>
</ul>
</li>
<li>
<p><code>set output-radix 16</code></p>
<ul>
<li>By default, output-radix is set to 10. This would print out numbers in GDB as hexadecimal. I&rsquo;m hard-wired to read hexadecimals when debugging stuff, so this is a must for me.</li>
</ul>
</li>
<li>
<p><code>set disassembly-flavor intel</code></p>
<ul>
<li>By default disassembly-flavor is set to &ldquo;att&rdquo;. However, I prefer the &ldquo;intel&rdquo; style disassembly despite specializing in Linux exploitation 🤡.</li>
</ul>
</li>
<li>
<p><code>set print elements 0</code></p>
<ul>
<li>By default, the limit is set to 200 characters. I will usually set this to 0 which means that printing is unlimited. This is especially useful whenever you are trying to print a very large string from memory.</li>
</ul>
</li>
</ol>
<h2 id="5-inspecting-registers">5. Inspecting Registers</h2>
<p>There are actually several ways to print the values of the registers.</p>
<h3 id="51-via-info-registers">5.1 Via <code>info registers</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Prints all registers&#39; values</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print only rax value</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Print an array of registers</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> info registers rdi rsi rdx rcx 
</span></span></code></pre></div><h3 id="52-via-print--printf">5.2 Via <code>print</code> / <code>printf</code></h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Print rax value</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> print $rax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Printf rax value</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> printf <span style="color:#e6db74">&#34;rax = %d\n&#34;</span>, $rax
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Printf rdi, rsi, rdx, rcx</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> printf <span style="color:#e6db74">&#34;rdi = %d\nrsi = %d\nrdx = %d\nrcx = %d\n&#34;</span>, $rdi, $rsi, $rdx, $rcx
</span></span></code></pre></div><h3 id="53-test-example">5.3 Test Example</h3>

 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part1-basics/videos/get-register-info.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="6-looking-at-disassembly">6. Looking at Disassembly</h2>
<p>Looking at disassembly provides us more information such as offsets and instruction sets.
Of course, you need not use GDB&rsquo;s disassembly feature for static analysis and can always use <a href="https://github.com/NationalSecurityAgency/ghidra">Ghidra</a> or IDA (<a href="https://hex-rays.com/ida-free">Free Version</a> or <a href="https://hex-rays.com/ida-pro">Pro</a>)
which is a lot more user-friendly.</p>
<p>Assuming we can only use GDB, then the way to go about doing this is to make use of the <code>disassemble</code> command.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># If no address/function is stated, disassemble function at current instruction.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble the entire function</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble the entire function that contain the given address</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble instruction between start and end address. </span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Start<span style="color:#f92672">]</span>,<span style="color:#f92672">[</span>End<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassemble from start of function to address of function + offset.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Function<span style="color:#f92672">]</span>,+<span style="color:#f92672">[</span>Length<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Disassmble from address to address + offset</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble <span style="color:#f92672">[</span>Address<span style="color:#f92672">]</span>,+<span style="color:#f92672">[</span>Length<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Show the current instruction (rip)</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble /m <span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Show the byte values of all instructions</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>gdb<span style="color:#f92672">)</span> disassemble /r <span style="color:#f92672">[</span>...<span style="color:#f92672">]</span>
</span></span></code></pre></div><h3 id="61-test-example">6.1 Test Example</h3>

 

<video width=100% controls>
    <source src="/posts/gdb-guides/gdb-guide-part1-basics/videos/viewing-disassembly.webm" type="video/webm">
    Your browser does not support the video tag.  
</video>


<h2 id="7-conclusion">7. Conclusion</h2>
<p>I figured this is a good stopping point and of course, we are not yet done! I barely scratched the surface just for the basics! Stay tuned for part 2, where I will teach you more about Linux calling conventions, setting breakpoints etc.</p>
<h2 id="8-references">8. References</h2>
<ol>
<li>GDB Manual: <a href="https://sourceware.org/gdb/current/onlinedocs/gdb.html/">https://sourceware.org/gdb/current/onlinedocs/gdb.html/</a></li>
</ol>
<h2 id="9-resources">9. Resources</h2>
<ol>
<li><a href="/posts/gdb-guides/gdb-guide-part1-basics/resources/test.c">test.c</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Writing Packets to Pcapng in C</title>
            <link>http://localhost:1313/posts/writing-packets-to-pcapng-in-c/</link>
            <pubDate>Fri, 17 Jan 2025 10:56:44 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/writing-packets-to-pcapng-in-c/</guid>
            <description>1. Introduction Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library. The PcapNG file structure can be found on the Official PcapNG Documentation. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&amp;rsquo;t the most comprehensible.
Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Welcome back fellow researchers! Recently, I was developing custom tools for packet sniffing in C and needed to write my own PcapNG library.
The PcapNG file structure can be found on the <a href="https://pcapng.com/">Official PcapNG Documentation</a>. Even though Erik Hjelmvik, the author was nice enough to provide examples for different section blocks, the guide isn&rsquo;t the most comprehensible.</p>
<p>Therefore, I thought it would be good to share some insights on writing a simple library in C to save your packets in a PcapNG file. And of course, I will be providing the source code <a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">here</a> as well.</p>
<h2 id="2-overall-pcapng-structure">2. Overall PcapNG Structure.</h2>
<img class="center" alt="pcapng-structure" src="/posts/writing-packets-to-pcapng-in-c/images/pcapng-structure.png">
<div style="text-align: center;"><p>Figure 1. PcapNG Structure</p></div>
<p>The overall structure can be broken down into 3 parts:</p>
<ol>
<li>Section Header Block (SHB)
<ul>
<li>Only can have 1</li>
</ul>
</li>
<li>Interface Description Block (IDB)
<ul>
<li>Can have multiple IDBs to represent different interfaces</li>
</ul>
</li>
<li>Enhanced Packet Block (EPB)
<ul>
<li>EPB headers can relate back to different interfaces where the packet was captured.</li>
</ul>
</li>
</ol>
<p>In addition, <strong>the entire structure must be word-aligned</strong> (divisible by 4 bytes). This means that padding is necessary if it&rsquo;s not word-aligned.</p>
<blockquote>
<p>❗ <strong>Important</strong></p>
<ul>
<li>Ensure that you pad with <code>0x00</code> just before the redundant block total length section.</li>
<li>Do not pad <code>0x00</code> at the end of each block!</li>
</ul>
</blockquote>
<h2 id="3-section-header-block-shb">3. Section Header Block (SHB)</h2>
<img class="center" alt="shb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/shb-structure.png">
<div style="text-align: center;"><p>Figure 2. SHB Structure</p></div>
<p>Figure 2 can be partially translated into the following SHB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> bom;      
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> major_version;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> minor_version;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">int64_t</span> section_length;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">shb_headers_t</span>;
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 1. SHB Header Struct</p></div>
<p>Do take note that I did not include a <code>uint32_t block_length_redundant</code> in the struct. This is because we have to place
a padding before the redundant block length, and the padding length can vary. A struct declaration cannot take in a member with
a variable size and therefore, we have to declare it separately. The same logic will be carried through to the other blocks.</p>
<p>According to the documentation, there are some constants we need to adhere to:</p>
<ul>
<li>Block Type = <code>0x0A0D0D0A</code> &ndash;&gt; SHB Type</li>
<li>Byte-Order Magic = <code>0x1A2B3C4D</code> &ndash;&gt; Little Endian</li>
<li>Major Version = <code>0x0001</code></li>
<li>Minor Version = <code>0x0000</code></li>
<li>Section Length = <code>0xFFFFFFFFFFFFFFFF</code> &ndash;&gt; -1</li>
</ul>
<p>The writing of the SHB section can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define SHB_TYPE 0x0A0D0D0A
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#define BOM 0x1A2B3C4D
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_shb_section</span>(FILE <span style="color:#f92672">*</span>pcapng_file) {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">shb_headers_t</span>) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    block_length <span style="color:#f92672">+=</span> padding_length;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(padding_length);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(padding, <span style="color:#ae81ff">0</span>, padding_length);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">shb_headers_t</span> shb_headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .block_type <span style="color:#f92672">=</span> SHB_TYPE,
</span></span><span style="display:flex;"><span>        .block_length <span style="color:#f92672">=</span> block_length,
</span></span><span style="display:flex;"><span>        .bom <span style="color:#f92672">=</span> BOM,
</span></span><span style="display:flex;"><span>        .major_version <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>        .minor_version <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        .section_length <span style="color:#f92672">=</span> <span style="color:#f92672">-</span><span style="color:#ae81ff">1</span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>shb_headers, <span style="color:#66d9ef">sizeof</span>(shb_headers), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fflush</span>(pcapng_file);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> true;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 2. Write SHB Section Example</p></div>
<h2 id="4-interface-description-block-idb">4. Interface Description Block (IDB)</h2>
<img class="center" alt="idb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/idb-structure.png">
<div style="text-align: center;"><p>Figure 3. IDB Structure</p></div>
<p>Figure 3 can be partially translated into the following IDB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> link_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint16_t</span> reserved;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> snap_len;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">idb_headers_t</span>;
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 3. IDB Header Struct</p></div>
<p>Constants to adhere to:</p>
<ul>
<li>Block Type = <code>0x00000001</code> &ndash;&gt; IDB Type</li>
<li>Link Type = <code>0x0001</code> &ndash;&gt; Ethernet</li>
<li>Reserved = <code>0x0000</code></li>
<li>Snap Length = <code>0x0000FFFF</code>(65535 bytes) OR <br>
        = <code>0x00040000</code>(256kB) OR <br>
        = <code>0x00000000</code>(No Limit) <br></li>
</ul>
<p>The writing of the IDB section to a PcapNG file can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#define IDB_TYPE 0x00000001
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_idb_section</span>(FILE <span style="color:#f92672">*</span>pcapng_file) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">idb_headers_t</span>) <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    block_length <span style="color:#f92672">+=</span> padding_length;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(padding_length);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(padding, <span style="color:#ae81ff">0</span>, padding_length);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">idb_headers_t</span> idb_headers <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .block_type <span style="color:#f92672">=</span> IDB_TYPE,
</span></span><span style="display:flex;"><span>        .block_length <span style="color:#f92672">=</span> block_length,
</span></span><span style="display:flex;"><span>        .link_type <span style="color:#f92672">=</span> <span style="color:#ae81ff">1</span>,
</span></span><span style="display:flex;"><span>        .reserved <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        .snap_len <span style="color:#f92672">=</span> <span style="color:#ae81ff">65535</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>idb_headers, <span style="color:#66d9ef">sizeof</span>(idb_headers), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fflush</span>(pcapng_file);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> true;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 4. Write IDB Section Example</p></div>
<h2 id="5-enhanced-packet-block-epb">5. Enhanced Packet Block (EPB)</h2>
<img class="center" alt="epb-structure" src="/posts/writing-packets-to-pcapng-in-c/images/epb-structure.png">
<div style="text-align: center;"><p>Figure 4. EPB Structure</p></div>
<p>Figure 4 can be partially translated into the following EPB header struct:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">typedef</span> <span style="color:#66d9ef">struct</span> {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_type;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> interface_id;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> timestamp_high;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> timestamp_low;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> captured_len;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> original_len;
</span></span><span style="display:flex;"><span>} <span style="color:#66d9ef">epb_headers_t</span>;
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 5. EPB Header Struct</p></div>
<p>Constants to adhere to:</p>
<ul>
<li>Block Type = <code>0x00000006</code> &ndash;&gt; EPB Type</li>
<li>Interface ID = <code>0x00000000</code> &ndash;&gt; First IDB <br>
       = <code>0x00000001</code> &ndash;&gt; Second IDB (If there is more than 1)</li>
</ul>
<p>Things to note:</p>
<ul>
<li>Timestamp Upper = <code>(uint32_t)(unix_epoch_microseconds &gt;&gt; 32)</code></li>
<li>Timestamp Lower = <code>(uint32_t)(unix_epoch_microseconds)</code></li>
<li>In most cases, <code>captured_length == original_len</code>, unless a short snap length is used.</li>
<li>If a packet is truncated due to a short snap length stated in the IDB section, then <code>captured_length &lt; original_len</code>.</li>
</ul>
<p>The writing of the EPB section to a PcapNG file can be translated into the following C snippet:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#66d9ef">bool</span> <span style="color:#a6e22e">pcapng_write_packet</span>(FILE<span style="color:#f92672">*</span> pcapng_file, <span style="color:#66d9ef">unsigned</span> <span style="color:#66d9ef">char</span> <span style="color:#f92672">*</span>packet_data, <span style="color:#66d9ef">uint32_t</span> packet_length) {
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> block_length <span style="color:#f92672">=</span> <span style="color:#66d9ef">sizeof</span>(<span style="color:#66d9ef">epb_headers_t</span>) <span style="color:#f92672">+</span> packet_length <span style="color:#f92672">+</span> <span style="color:#66d9ef">sizeof</span>(block_length);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> padding_length <span style="color:#f92672">=</span> <span style="color:#ae81ff">4</span> <span style="color:#f92672">-</span> (block_length <span style="color:#f92672">%</span> <span style="color:#ae81ff">4</span>);
</span></span><span style="display:flex;"><span>    block_length <span style="color:#f92672">+=</span> padding_length;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">char</span> <span style="color:#66d9ef">unsigned</span> <span style="color:#f92672">*</span>padding <span style="color:#f92672">=</span> <span style="color:#a6e22e">malloc</span>(padding_length);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">memset</span>(padding, <span style="color:#ae81ff">0</span>, padding_length);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> ts_high <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint32_t</span> ts_low <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">struct</span> timeval tv;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">gettimeofday</span>(<span style="color:#f92672">&amp;</span>tv, NULL);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">uint64_t</span> unix_epoch_microseconds <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint64_t</span>)tv.tv_sec <span style="color:#f92672">*</span> <span style="color:#ae81ff">1000000ULL</span> <span style="color:#f92672">+</span> (<span style="color:#66d9ef">uint64_t</span>)tv.tv_usec;
</span></span><span style="display:flex;"><span>    
</span></span><span style="display:flex;"><span>    ts_high <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint32_t</span>)(unix_epoch_microseconds <span style="color:#f92672">&gt;&gt;</span> <span style="color:#ae81ff">32</span>);
</span></span><span style="display:flex;"><span>    ts_low <span style="color:#f92672">=</span> (<span style="color:#66d9ef">uint32_t</span>)(unix_epoch_microseconds);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">epb_headers_t</span> epb_header <span style="color:#f92672">=</span> {
</span></span><span style="display:flex;"><span>        .block_type <span style="color:#f92672">=</span> EPB_TYPE,
</span></span><span style="display:flex;"><span>        .block_length <span style="color:#f92672">=</span> block_length,
</span></span><span style="display:flex;"><span>        .interface_id <span style="color:#f92672">=</span> <span style="color:#ae81ff">0</span>,
</span></span><span style="display:flex;"><span>        .timestamp_high <span style="color:#f92672">=</span> ts_high,
</span></span><span style="display:flex;"><span>        .timestamp_low <span style="color:#f92672">=</span> ts_low,
</span></span><span style="display:flex;"><span>        .captured_len <span style="color:#f92672">=</span> packet_length,
</span></span><span style="display:flex;"><span>        .original_len <span style="color:#f92672">=</span> packet_length
</span></span><span style="display:flex;"><span>    };
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>epb_header, <span style="color:#66d9ef">sizeof</span>(epb_header), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(packet_data, packet_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(padding, padding_length, <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#f92672">!</span><span style="color:#a6e22e">fwrite</span>(<span style="color:#f92672">&amp;</span>block_length, <span style="color:#66d9ef">sizeof</span>(block_length), <span style="color:#ae81ff">1</span>, pcapng_file)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span> false;
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">fflush</span>(pcapng_file);
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> true;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 6. Write EPB Section Example</p></div>
<h2 id="6-example-usage-of-pcapngh">6. Example Usage of pcapng.h</h2>
<p>After putting all the logic into a header file called &ldquo;pcapng.h&rdquo;, and asking chatgpt to generate some sample data for us to test,
we are ready to go! If you want to follow along for this part of the walkthrough, you can get a copy of my files <a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">here</a>.</p>
<p>The following listing shows a simple example of saving packets to a PcapNG file called &ldquo;output.pcapng&rdquo; in the same directory.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-c" data-lang="c"><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pcapng.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e">#include</span> <span style="color:#75715e">&#34;pcapng_samples.h&#34;</span><span style="color:#75715e">
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">int</span> <span style="color:#a6e22e">main</span> (<span style="color:#66d9ef">void</span>) {
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    FILE <span style="color:#f92672">*</span>pcapng_file <span style="color:#f92672">=</span> <span style="color:#a6e22e">pcapng_init_file</span>(<span style="color:#e6db74">&#34;output.pcapng&#34;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pcapng_write_packet</span>(pcapng_file, sample_tcp_syn, <span style="color:#66d9ef">sizeof</span>(sample_tcp_syn));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pcapng_write_packet</span>(pcapng_file, sample_icmp_request, <span style="color:#66d9ef">sizeof</span>(sample_icmp_request));
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">pcapng_close_file</span>(pcapng_file);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> <span style="color:#ae81ff">0</span>;
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 7. test.c</p></div>
<p>Compile the C program and run it.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ gcc test.c -o test
</span></span><span style="display:flex;"><span>$ ./test
</span></span></code></pre></div><div style="text-align: center;"><p>Listing 8. Running Test Case</p></div>
<p>We can now view our &ldquo;output.pcapng&rdquo; file with Wireshark!
<img class="center" alt="wireshark_output_pcapng" src="/posts/writing-packets-to-pcapng-in-c/images/wireshark_output_pcapng.png"></p>
<div style="text-align: center;"><p>Figure 5. Wireshark - output.pcapng</p></div>
<h2 id="7-conclusion">7. Conclusion</h2>
<p>If you have reached this stage after going through the above sections, you are now a qualified expert on writing PcapNG structures 😎.
In my next post, I am going to share some important tips for static and dynamic analysis based on past mistakes that I had made. Till then,
stay safe and keep being awesome. Over and out!
<img alt="pcapng-structure" src="/posts/writing-packets-to-pcapng-in-c/images/tapioca-goodnight-loop.gif" style="zoom:40%;"></p>
<h2 id="8-references">8. References</h2>
<ol>
<li>Official PcapNG Documentation: <a href="https://pcapng.com/">https://pcapng.com/</a></li>
</ol>
<h2 id="9-resources">9. Resources</h2>
<ol>
<li><a href="/posts/writing-packets-to-pcapng-in-c/resources/pcapng-example.zip">pcapng-example.zip</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Transferring Python Packages</title>
            <link>http://localhost:1313/posts/transferring-python-packages/</link>
            <pubDate>Fri, 10 Jan 2025 08:38:41 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/transferring-python-packages/</guid>
            <description>1. Introduction Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!
If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages. This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Have you ever needed to transfer isolated Python environments from one machine to another but were unsure of the best way to do it? Fret not, stranger—I have you covered!</p>
<p><img alt="sumikko-penguin-nerd-loop" src="/posts/transferring-python-packages/images/sumikko-penguin-nerd-loop.gif"></p>
<p>If you are unfamiliar with Python environments, they are basically a self-contained directory that has its own python binary, along with other python packages.
This means that if you accidentally install a conflicting package in that Python environment, you can simply delete the entire folder and start again, hassle-free.
If you were to face conflicting python packages on the base environment, things could get extremely messy.</p>
<p>I would highly recommend using <em>miniconda</em> for managing python environments. I have been a long-term user of <em>miniconda</em> and it beats the <em>venv</em> python environment manager when it comes to the transference of packages from one machine to another.</p>
<p>This guide will show you how to:</p>
<ul>
<li>Install <em>miniconda</em></li>
<li>Create python environments with the <code>conda</code> command</li>
<li>Install python packages into the environment</li>
<li>Transfer python environments with the <code>conda</code> command</li>
</ul>
<blockquote>
<p>❗ <strong>Important</strong></p>
<ul>
<li>Before we proceed, is is also important to know the target machine&rsquo;s processor architecture and OS version.</li>
<li>Sections 2 to 5.1 have to be done on a similar machine to the target machine.</li>
<li>If the preperation machine is too different from the target machine, the transfer will fail!</li>
</ul>
</blockquote>
<h2 id="2-installing-miniconda">2. Installing Miniconda</h2>
<h3 id="21-windows">2.1 Windows</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-powershell" data-lang="powershell"><span style="display:flex;"><span>PS C:\Users\gerald&gt; curl https<span style="color:#960050;background-color:#1e0010">:</span>//repo.anaconda.com/miniconda/Miniconda3-latest-Windows-x86_64.exe -o miniconda.exe
</span></span><span style="display:flex;"><span>PS C:\Users\gerald&gt; Start-Process -FilePath <span style="color:#e6db74">&#34;.\miniconda.exe&#34;</span> -ArgumentList <span style="color:#e6db74">&#34;/S&#34;</span> -Wait
</span></span><span style="display:flex;"><span>PS C:\Users\gerald&gt; del miniconda.exe
</span></span></code></pre></div><p>After installation, open the “Anaconda Powershell Prompt (miniconda3)”.</p>
<h3 id="22-linux">2.2 Linux</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gerald@nexus:~$ mkdir -p ~/miniconda3
</span></span><span style="display:flex;"><span>gerald@nexus:~$ wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda3/miniconda.sh
</span></span><span style="display:flex;"><span>gerald@nexus:~$ bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
</span></span><span style="display:flex;"><span>gerald@nexus:~$ rm ~/miniconda3/miniconda.sh
</span></span></code></pre></div><p>After installing, close and reopen your terminal application or refresh it by running the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gerald@nexus:~$ source ~/miniconda3/bin/activate
</span></span></code></pre></div><p>To initialize conda on all available shells, run the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>gerald@nexus:~$ conda init --all
</span></span></code></pre></div><h2 id="3-creating-python-environments-with-conda">3. Creating Python Environments with Conda</h2>
<p>Once you have a working setup, you should be able to see that there is a <code>(base)</code> environment in your terminal.
The two figures below are for Windows and Linux, respectively.</p>
<p><img alt="alt text" src="/posts/transferring-python-packages/images/miniconda_powershell.png"></p>
<p><img alt="alt text" src="/posts/transferring-python-packages/images/miniconda_bash.png"></p>
<p>To create a new environment with basic python packages, do the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ conda create -n $ENVIRONMENT_NAME python<span style="color:#f92672">=</span>$PYTHON_VERSION
</span></span></code></pre></div><h2 id="4-install-python-packages-in-environment">4. Install Python Packages in Environment</h2>
<p>The following example assumes that I have created an environment called test-env. Do note
that the Linux and Windows conda syntax is exactly the same.</p>
<ol>
<li>
<p>Activate the environment</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ conda activate test-env
</span></span></code></pre></div></li>
<li>
<p><strong>IMPORTANT</strong> - Install conda-pack</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ conda install conda-pack
</span></span></code></pre></div></li>
<li>
<p>Install whichever python package you need with <em>pip3</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ pip3 install $PYTHON_PACKAGE
</span></span></code></pre></div></li>
</ol>
<h2 id="5-transferring-python-environments-with-conda">5. Transferring Python Environments with Conda</h2>
<h3 id="51-packing-the-environment">5.1 Packing the Environment</h3>
<p>While the environment is still activated, run the following command to archive this environment:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> gerald@nexus:~$ conda-pack
</span></span></code></pre></div><p>On success, this should give you a <code>.tar.gz</code> archive of the environment.</p>
<h3 id="52-unpacking-environment-on-target-machine">5.2 Unpacking Environment on Target Machine</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@target:~$ mkdir test-env
</span></span><span style="display:flex;"><span>user@target:~$ tar -xzf test-env.tar.gz -C test-env
</span></span><span style="display:flex;"><span>user@target:~$ source test-env/bin/activate
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>test-env<span style="color:#f92672">)</span> user@target:~$ conda-unpack
</span></span></code></pre></div><p>If everything has been done properly up to this stage, you will have a working python environment with all your packages in your target machine.</p>
<h2 id="6-conclusion">6. Conclusion</h2>
<p>I have been using this workaround for quite some time now and while doing this write-up, I realized that conda has a new feature where you can specify the target platform when creating a new environment. The example shown in their official documentation is as follows:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ conda create --platform osx-64 --name python-x64 python
</span></span></code></pre></div><p>I have yet to test this new feature out. Perhaps I will do a follow-up post soon to explore this new workflow.
Adios for now!</p>
<h2 id="7-references">7. References</h2>
<ol>
<li><a href="https://docs.anaconda.com/miniconda/install/">https://docs.anaconda.com/miniconda/install/</a></li>
<li><a href="https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html">https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</a></li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>Installing Linux Packages Offline</title>
            <link>http://localhost:1313/posts/installing-packages-offline/</link>
            <pubDate>Sun, 05 Jan 2025 11:45:27 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/installing-packages-offline/</guid>
            <description>1. Introduction Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.
For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.
Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>Hi there 😊. Another day, another post. Today, I thought it would be useful to share some tips and tricks when installing new software on a standalone linux machine / VM.</p>
<p>For cybersecurity researchers that have to adhere to company policy to disconnect research machines from the internet, this post will be useful for your future workflows.</p>
<p>Before I begin the walkthrough, it is important to have 1 internet-connected machine that is of a similar OS Version to the offline machine so as to minimize incompatibilities between systems.</p>
<p>For now, this post will only be going through the steps to install packages offline for Ubuntu and CentOS machines. In the future, I may revist and update this post again if I find more workarounds.</p>
<h2 id="2-ubuntu">2. Ubuntu</h2>
<h3 id="21-editing-apt-source">2.1 Editing Apt Source</h3>
<p>The first thing you want to do is to edit /etc/apt/sources.list and uncomment the lines that start with <code>deb-src</code>.</p>
<p>Once you are done, your /etc/apt/sources.list should look something like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">(</span>base<span style="color:#f92672">)</span> gerald@nexus:~$ cat /etc/apt/sources.list
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#deb cdrom:[Ubuntu 22.04.1 LTS _Jammy Jellyfish_ - Release amd64 (20220809.1)]/ jammy main restricted</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># newer versions of the distribution.</span>
</span></span><span style="display:flex;"><span>deb http://sg.archive.ubuntu.com/ubuntu/ jammy main restricted
</span></span><span style="display:flex;"><span>deb-src http://sg.archive.ubuntu.com/ubuntu/ jammy main restricted
</span></span><span style="display:flex;"><span>....
</span></span></code></pre></div><blockquote>
<p>💡 Tip</p>
<ul>
<li>Depending on the Ubuntu version you are using, the distro name will be different. In my case, my Ubuntu internet-connected machine is 22.04, and hence mine is jammy.</li>
</ul>
</blockquote>
<h3 id="22-downloading-main-package-with-dependencies">2.2 Downloading Main Package with Dependencies</h3>
<ol>
<li>
<p>Make a new directory to save your packages</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@internet-connected:~$ mkdir $HOME/Downloads/xfer
</span></span></code></pre></div></li>
<li>
<p>Change directory</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@internet-connected:~$ cd $HOME/Downloads/xfer
</span></span></code></pre></div></li>
<li>
<p>Download package with its dependencies</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@internet-connected:~/Downloads/xfer$ apt-get download <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">$(</span>apt-cache depends --recurse --no-recommends <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--no-suggests --no-conflicts --no-breaks <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--no-replaces --no-enhances <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>$PACKAGE_NAME | grep <span style="color:#e6db74">&#34;^\w&#34;</span><span style="color:#66d9ef">)</span>
</span></span></code></pre></div></li>
</ol>
<h3 id="23-transfer-and-install-on-offline-machine">2.3 Transfer and Install on Offline Machine</h3>
<p>Now that you have the main package with its dependencies, use whichever method you prefer to transfer these packages over to the offline machine.</p>
<p>Then, just run the following command to install all packages. Do not that this is an extremely lazy way of doing things and it does not regard the order in which the packages should be installed.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>user@standalone:~/Downloads/xfer$ sudo dpkg -i *.deb
</span></span></code></pre></div><p>If the above command does not install everything the first time due to the wrong order of dependencies being installed, just run it a few more times until you see that there&rsquo;s no error. It&rsquo;s abit stupid&hellip;I know. But if it works, it works.</p>
<p><img alt="sumikko-gurashi-penguin-throw-book" src="/posts/installing-packages-offline/images/sumikko-gurashi-penguin-throw-book.gif"></p>
<h3 id="24--bonus----extracting-libraries-and-binaries">2.4 ⭐ BONUS -  Extracting Libraries and Binaries</h3>
<p>Assuming you just want some libraries from the <code>.deb</code> package, you can make use of <code>dpkg-deb</code> extraction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># SYSROOT_PATH refers to the directory to extract to.</span>
</span></span><span style="display:flex;"><span>$ dpkg-deb -x $PACKAGE_NAME.deb $SYSROOT_PATH
</span></span></code></pre></div><p>Here&rsquo;s also a one liner to extract all <code>.deb</code> packages in the same directory for the lazy people out there like myself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ DEBS<span style="color:#f92672">=(</span><span style="color:#66d9ef">$(</span>ls | grep <span style="color:#e6db74">&#34;.deb&#34;</span><span style="color:#66d9ef">)</span><span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">for</span> package in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>DEBS[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">do</span> dpkg-deb -x $package $SYSROOT_PATH; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="3-centos">3. CentOS</h2>
<p>If your CentOS Version has reached EOL (End of Life), you will need to update the remote yum repository URLs. Otherwise, you can skip the steps in sub section 3.1.</p>
<h3 id="31-editing-yum-source">3.1 Editing Yum Source</h3>
<p>For CentOS Versions that have reached EOL, you may find all archived packages in the following 2 URLs:</p>
<ol>
<li><a href="https://vault.centos.org/">https://vault.centos.org/</a></li>
<li><a href="https://archive.kernel.org/centos-vault/">https://archive.kernel.org/centos-vault/</a></li>
</ol>
<p>For this example, I used CentOS 8.5.2111 which has already reached EOL.</p>
<p>For the following 3 repository lists, comment out <code>mirrorlist</code>, and edit the <code>baseurl</code> accordingly:</p>
<ol>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-AppStream.repo:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[appstream]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - AppStream</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=AppStream&amp;infra=$infra</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/AppStream/$basearch/os/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span></code></pre></div></li>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-BaseOS.repo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[baseos]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - BaseOS</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=BaseOS&amp;infra=$infra</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/BaseOS/$basearch/os/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span></code></pre></div></li>
<li>
<p>Edit /etc/yum.repos.d/CentOS-Linux-Extras.repo</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-ini" data-lang="ini"><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">[extras]</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">name</span><span style="color:#f92672">=</span><span style="color:#e6db74">CentOS Linux $releasever - Extras</span>
</span></span><span style="display:flex;"><span><span style="color:#75715e">#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;arch=$basearch&amp;repo=extras&amp;infra=$infra</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">baseurl</span><span style="color:#f92672">=</span><span style="color:#e6db74">http://archive.kernel.org/centos-vault/8.5.2111/extras/$basearch/os/</span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">...</span>
</span></span></code></pre></div></li>
</ol>
<p>Once you are done, do a <code>dnf update</code> / <code>yum update</code> to check that the remote reposiotry is working properly.</p>
<h3 id="32-downloading-main-package-with-dependencies">3.2 Downloading Main Package with Dependencies</h3>
<p>You can use either <code>dnf</code> or <code>yum</code> to download your packages.</p>
<h4 id="321-using-dnf">3.2.1 Using dnf</h4>
<ol>
<li>Install dnf-plugins-core (if not already installed)
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ sudo dnf install dnf-plugins-core
</span></span></code></pre></div></li>
<li>Download the package together with its dependencies
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ dnf download --resolve <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--destdir $HOME/Downloads/xfer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>$PACKAGE_NAME
</span></span></code></pre></div></li>
</ol>
<h4 id="322-using-yum">3.2.2 Using yum</h4>
<ol>
<li>Install yum-utils (if not already installed)
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ sudo yum install yum-utils
</span></span></code></pre></div></li>
<li>Download the package together with its dependencies
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@internet-connected ~<span style="color:#f92672">]</span>$ yumdownloader --resolve <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>--destdir $HOME/Downloads/xfer <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>$PACKAGE_NAME
</span></span></code></pre></div></li>
</ol>
<h3 id="33-transfer-and-install-on-offline-machine">3.3 Transfer and Install on Offline Machine</h3>
<p>You can use either <code>dnf</code> or <code>yum</code> to install your packages.</p>
<h4 id="331-using-dnf">3.3.1 Using dnf</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@standalone ~<span style="color:#f92672">]</span>$ sudo dnf localinstall *.rpm
</span></span></code></pre></div><h4 id="332-using-yum">3.3.2 Using yum</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>user@standalone ~<span style="color:#f92672">]</span>$ sudo yum localinstall *.rpm
</span></span></code></pre></div><h3 id="34--bonus----extracting-libraries-and-binaries">3.4 ⭐ BONUS -  Extracting Libraries and Binaries</h3>
<p>Assuming you just want some libraries from the <code>.rpm</code> package, you can make use of
<code>rpm2cpio</code> and <code>cpio</code> for extraction.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># SYSROOT_PATH refers to the directory to extract to.</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>user@localhost ~<span style="color:#f92672">]</span>$ rpm2cpio $PACKAGE_NAME.rpm <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>| <span style="color:#f92672">(</span>cd $SYSROOT_PATH <span style="color:#f92672">&amp;&amp;</span> cpio -idmv<span style="color:#f92672">)</span>
</span></span></code></pre></div><p>Here&rsquo;s also a one liner to extract all <code>.rpm</code> packages in the same directory for the lazy people out there like myself.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ RPMS<span style="color:#f92672">=(</span><span style="color:#66d9ef">$(</span>ls | grep <span style="color:#e6db74">&#34;.rpm&#34;</span><span style="color:#66d9ef">)</span><span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">for</span> package in <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">${</span>RPMS[@]<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">do</span> rpm2cpio $package <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span>| <span style="color:#f92672">(</span>cd $SYSROOT_PATH <span style="color:#f92672">&amp;&amp;</span> cpio -idmv<span style="color:#f92672">)</span>; <span style="color:#ae81ff">\
</span></span></span><span style="display:flex;"><span><span style="color:#ae81ff"></span><span style="color:#66d9ef">done</span>
</span></span></code></pre></div><h2 id="4-conclusion">4. Conclusion</h2>
<p>If you have made it this far, congratulations!
<img alt="sumikko-gurashi" src="/posts/installing-packages-offline/images/sumikko-gurashi-party-popper.gif"></p>
<p>I hope you learnt something useful today and if this works like a charm for you, you are always welcome to come back to reference these set of instructions for your future use. Cheers and have a nice day!</p>
]]></content>
        </item>
        
        <item>
            <title>Getting Root Shell Mikrotik RouterOS</title>
            <link>http://localhost:1313/posts/getting-root-shell-mikrotik-routeros/</link>
            <pubDate>Fri, 03 Jan 2025 20:26:00 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/getting-root-shell-mikrotik-routeros/</guid>
            <description>1. Introduction I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.
For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface.</description>
            <content type="html"><![CDATA[<h2 id="1-introduction">1. Introduction</h2>
<p>I was digging through some of the stuff I did previously several years ago and I thought that this technique may come in handy one day for researchers doing Vulnerability Research on Mikrotik RouterOS systems.</p>
<p>For those that have already done their hands-on spinning up a Mikrotik RouterOS with the default installation on a VM, you will quickly realize that you are restricted to only using the MikroTik Command Line Interface. In other words, no bash 🙁.</p>
<p>This walkthrough will show a step-by-step process to break out of &ldquo;jail&rdquo;.</p>
<h2 id="2-walkthrough">2. Walkthrough</h2>
<p>Subsection 2.1 shows how to set up the VM.</p>
<p>Subsections 2.2 to 2.4 shows how the jailbreak was discovered.</p>
<p>If you are only interested in the steps to jailbreak, please follow from subsections 2.5 onwards.
Do also note that the walkthrough is based on a older version of Mikrotik RouterOS - 6.42.11.</p>
<h3 id="21-getting-started">2.1 Getting Started</h3>
<p>Firstly, we need to get the ISO file of interest from the official <a href="https://mikrotik.com/download/archive"><strong>mikrotik archives</strong></a>.</p>
<p>Spin up a VM using any hypervisor of your choosing. I would personally recommend using VMWare as it is now free for personal use. However, if you are doing research on a commercial network, please make sure you have a commercial license activated if not you may get yourself into hot water.</p>
<p>To start the installation of the Mikrotik RouterOS, create a new virtual machine from the ISO file and when selecting a guest operating system, choose <em>Other &ndash;&gt; Other</em>.
<img alt="vmware-guest-operating-system" src="/posts/getting-root-shell-mikrotik-routeros/images/vmware-guest-operating-system.png"></p>
<p>Follow the instructions of the installation, and on success you will be prompted to login. By default the administrator username is &lsquo;admin&rsquo; with no password.</p>
<p>If everything is okay up till this point, you will be able to see the RouterOS CLI.</p>
<p><img alt="vmware-guest-operating-system" src="/posts/getting-root-shell-mikrotik-routeros/images/mikrotik-admin-shell.png"></p>
<p>After logging in as admin, we need to assign an IP address to our VM. For this example, I have assigned 172.16.205.150/24 as my RouterOS IP. Please change the values according to your own setup.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>admin@MikroTik &gt; /ip address add address<span style="color:#f92672">=</span>172.16.205.150/24 interface<span style="color:#f92672">=</span>ether1<span style="color:#f92672">]</span>
</span></span></code></pre></div><p>After wards, do a simple ping test from your host to see if it is reachable.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ping 172.16.205.150
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>PING 172.16.205.150 <span style="color:#f92672">(</span>172.16.205.150<span style="color:#f92672">)</span> 56<span style="color:#f92672">(</span>84<span style="color:#f92672">)</span> bytes of data.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">1</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>37.5 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>0.709 ms
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">64</span> bytes from 172.16.205.150: icmp_seq<span style="color:#f92672">=</span><span style="color:#ae81ff">3</span> ttl<span style="color:#f92672">=</span><span style="color:#ae81ff">64</span> time<span style="color:#f92672">=</span>0.391 ms
</span></span></code></pre></div><p>Test if FTP works as well.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ftp admin@172.16.205.150
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>Connected to 172.16.205.150.
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">220</span> MikroTik FTP server <span style="color:#f92672">(</span>MikroTik 6.42.11<span style="color:#f92672">)</span> ready
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">331</span> Password required <span style="color:#66d9ef">for</span> admin
</span></span><span style="display:flex;"><span>Password: 
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">230</span> User admin logged in
</span></span><span style="display:flex;"><span>Remote system type is UNIX.
</span></span><span style="display:flex;"><span>Using binary mode to transfer files.
</span></span><span style="display:flex;"><span>ftp&gt;
</span></span></code></pre></div><h3 id="22-getting-system-file-npk-from-iso">2.2 Getting system file (.npk) from ISO</h3>
<p>On my ubuntu host, I used 7zip to extract the iso to get its corresponding .npk files</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ 7z x mikrotik-6.42.11.iso
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>7-Zip <span style="color:#f92672">[</span>64<span style="color:#f92672">]</span> 9.20  Copyright <span style="color:#f92672">(</span>c<span style="color:#f92672">)</span> 1999-2010 Igor Pavlov  2010-11-18
</span></span><span style="display:flex;"><span>p7zip Version 9.20 <span style="color:#f92672">(</span>locale<span style="color:#f92672">=</span>en_US.UTF-8,Utf16<span style="color:#f92672">=</span>on,HugeFiles<span style="color:#f92672">=</span>on,4 CPUs<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span>Processing archive: mikrotik-6.42.11.iso
</span></span><span style="display:flex;"><span>Extracting  advanced-tools-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  calea-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  defpacks
</span></span><span style="display:flex;"><span>Extracting  dhcp-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  dude-6.42.11.npk
</span></span><span style="display:flex;"><span>Extracting  gps-6.42.11.npk
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>The only file that we are interested in is the system .npk file.</p>
<h3 id="23-unpacking-system-npk-file">2.3 Unpacking System .npk File</h3>
<p>Using binwalk, we can extract the system file.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ binwalk -e system-6.42.11.npk
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Output</span>
</span></span><span style="display:flex;"><span>DECIMAL       HEXADECIMAL     DESCRIPTION
</span></span><span style="display:flex;"><span>--------------------------------------------------------------------
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">0</span>             0x0             NPK firmware header, image size: 15616295, image name: <span style="color:#e6db74">&#34;system&#34;</span>, description: <span style="color:#e6db74">&#34;&#34;</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">4096</span>          0x1000          Squashfs filesystem, little endian, version 4.0, compression:xz, size: <span style="color:#ae81ff">9818075</span> bytes, <span style="color:#ae81ff">1340</span> inodes, blocksize: <span style="color:#ae81ff">262144</span> bytes, created: 2018-12-21 09:18:10
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9822304</span>       0x95E060        ELF, 32-bit LSB executable, Intel 80386, version <span style="color:#ae81ff">1</span> <span style="color:#f92672">(</span>SYSV<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">9842177</span>       0x962E01        Unix path: /sys/devices/system/cpu
</span></span><span style="display:flex;"><span>...
</span></span></code></pre></div><p>If everything runs successfully up to this point, a <strong>_system-$VERSION.npk.extracted</strong> directory will be created.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ ls -la _system-6.42.11.npk.extracted/squashfs-root/	
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>total <span style="color:#ae81ff">72</span>
</span></span><span style="display:flex;"><span>drwxr-xr-x <span style="color:#ae81ff">18</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:41 .
</span></span><span style="display:flex;"><span>drwxrwxr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 ..
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 bin
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> boot
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> dev
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 dude -&gt; /dev/null
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 etc
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> flash
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> home
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> initrd
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">4</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 lib
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">5</span> gerald gerald <span style="color:#ae81ff">4096</span> Mar <span style="color:#ae81ff">16</span> 21:13 nova
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">3</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> old
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 pckg -&gt; /dev/null
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> proc
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> ram
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 rw -&gt; /dev/null
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> sbin
</span></span><span style="display:flex;"><span>drwxr-xr-x  <span style="color:#ae81ff">2</span> gerald gerald <span style="color:#ae81ff">4096</span> Dec <span style="color:#ae81ff">21</span>  <span style="color:#ae81ff">2018</span> sys
</span></span><span style="display:flex;"><span>lrwxrwxrwx  <span style="color:#ae81ff">1</span> gerald gerald    <span style="color:#ae81ff">9</span> Mar <span style="color:#ae81ff">16</span> 21:13 tmp -&gt; /dev/null
</span></span></code></pre></div><h3 id="24-jailbreak-discovery">2.4 Jailbreak Discovery</h3>
<p>Looking through the files, you will stumble upon <strong>squashfs-root/etc/rc.d/run.d/S12defconf</strong>.
A snippet of the bash script is shown in the listing below.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>...
</span></span><span style="display:flex;"><span>defcf<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>cat /rw/DEFCONF<span style="color:#66d9ef">)</span>
</span></span><span style="display:flex;"><span>echo &gt; /ram/defconf-params
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> -f /nova/bin/flash <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
</span></span><span style="display:flex;"><span>	/nova/bin/flash --fetch-defconf-params /ram/defconf-params
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">fi</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">(</span>eval <span style="color:#66d9ef">$(</span>cat /ram/defconf-params<span style="color:#66d9ef">)</span> action<span style="color:#f92672">=</span>apply /bin/gosh $defcf;
</span></span><span style="display:flex;"><span>cp $defcf $confirm; rm /rw/DEFCONF /ram/defconf-params<span style="color:#f92672">)</span> &amp;
</span></span></code></pre></div><p>The above suggests that <strong>/rw/DEFCONF</strong> is a Go Shell script that will be executed on boot.
It is also removed right after finishing execution.
This means that if we can edit/add this script, we will be able to do whatever with want with the system.</p>
<h3 id="25-download-busybox-on-host-machine">2.5 Download busybox on host machine</h3>
<p>BusyBox is a software suite that provides several Unix utilities in a single executable file. The idea is to upload the busybox executable via FTP and edit the <strong>/rw/DEFCONF</strong> to run our busybox.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ curl https://www.busybox.net/downloads/binaries/1.26.2-defconfig-multiarch/busybox-i686 &gt; busybox-i686
</span></span></code></pre></div><h3 id="26-upload-the-busybox-via-ftp">2.6 Upload the busybox via FTP</h3>
<p>Again, we can login as admin via FTP with no password and we will upload our previously downloaded busybox executable binary.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>ftp&gt; put busybox-i686
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>local: busybox-i686 remote: busybox-i686
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">229</span> Entering Extended Passive Mode <span style="color:#f92672">(||</span>|55029|<span style="color:#f92672">)</span>
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">150</span> Opening BINARY mode data connection <span style="color:#66d9ef">for</span> <span style="color:#e6db74">&#39;/busybox-i686&#39;</span>
</span></span><span style="display:flex;"><span>100% |***********************************|   <span style="color:#ae81ff">901</span> KiB   18.72 MiB/s    00:00 ETA
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">226</span> BINARY transfer complete
</span></span><span style="display:flex;"><span><span style="color:#ae81ff">922936</span> bytes sent in 00:00 <span style="color:#f92672">(</span>17.56 MiB/s
</span></span></code></pre></div><p>After this, power off your virtual machine.</p>
<h3 id="27-boot-from-centos-6-iso">2.7 Boot from CentOS 6 ISO</h3>
<p>The CentOS 6 ISO can be gotten from <a href="https://ftp.riken.jp/Linux/centos-vault/6.8/isos/x86_64/CentOS-6.8-x86_64-LiveCD.iso"><strong>here</strong></a></p>
<p>Switch out the ISO file attached to the CD/ROM hardware component of the VM.</p>
<p>We will then force the first boot to go through the bios by adding the following line in the .vmx file of our VM.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ vim Mikrotik-6.42.11.vmx
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Add the following line any where</span>
</span></span><span style="display:flex;"><span>bios.forceSetupOnce <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;TRUE&#34;</span>
</span></span></code></pre></div><p>Change the boot order by pushing the CD/ROM to the first. Press F10 to save and exit.
<img alt="bios-boot-order-cd-first" src="/posts/getting-root-shell-mikrotik-routeros/images/bios-boot-order-cd-first.png"></p>
<p>Upon exiting, you will see the CentOS 6 installer option. Choose the <em>Boot</em> option.
<img alt="boot-centos-livecd" src="/posts/getting-root-shell-mikrotik-routeros/images/boot-centos-livecd.png"></p>
<p>Once inside CentOS 6, Click on the top left <em>Applications &ndash;&gt; System Tools &ndash;&gt; Terminal</em>.
Run the following commands to mount the routeros sysroot.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#f92672">[</span>centos@livecd centoslive<span style="color:#f92672">]</span>$ sudo su
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ mkdir /mnt/routeros-sysroot
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ mount /dev/sda2 /mnt/routeros-sysroot
</span></span></code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span><span style="color:#75715e"># Create a new DEFCONF file that runs busy box</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ echo <span style="color:#e6db74">&#34;ok; /rw/disk/busybox-i686 telnetd -l /bin/sh -p 1270;&#34;</span> &gt; /mnt/routeros-sysroot/rw/DEFCONF
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Ensure that busybox has executable permission</span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">[</span>root@livecd centoslive<span style="color:#f92672">]</span>$ chmod +x /mnt/routeros-sysroot/rw/disk/busybox-i686
</span></span></code></pre></div><h3 id="28-getting-root-shell">2.8 Getting Root Shell</h3>
<p>Once done, shutdown the VM, edit the <em>hardware settings &ndash;&gt; CD/DVD (IDE)</em> and uncheck <em>Connect at power on</em>.
<img alt="iso-uncheck-connect-at-power-on" src="/posts/getting-root-shell-mikrotik-routeros/images/iso-uncheck-connect-at-power-on.png"></p>
<p>Upon powering on the VM, you will see this output instead of the normal login screen.</p>
<p><img alt="busybox-running1" src="/posts/getting-root-shell-mikrotik-routeros/images/busybox-running1.png"></p>
<p>We can now telnet into our RouterOS via port 1270.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ telnet 172.16.205.150 <span style="color:#ae81ff">1270</span>
</span></span></code></pre></div><p><img alt="telnet-success" src="/posts/getting-root-shell-mikrotik-routeros/images/telnet-success.png"></p>
<h3 id="29-running-commands">2.9 Running Commands</h3>
<p>Unlike the typical unix shell, we cannot run the normal linux commands as it is as we would need
to piggyback on busybox in order to run anything.
<img alt="busybox-piggyback-ls" src="/posts/getting-root-shell-mikrotik-routeros/images/busybox-piggyback-ls.png"></p>
<p>Thus to put simply, the template to run any bash commands is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-bash" data-lang="bash"><span style="display:flex;"><span>$ /rw/disk/busybox-i686 $COMMAND
</span></span></code></pre></div><h2 id="3-conclusion">3. Conclusion</h2>
<p>I hope this guide is comprehensive enough for those who want to get started on
doing vulnerability research on Mikrotik RouterOS systems. If you made it this far,
I hope you learnt a lot and had fun along the way. Cheers and see you in the next post 😃.</p>
]]></content>
        </item>
        
        <item>
            <title>Welcome Stranger</title>
            <link>http://localhost:1313/posts/welcome/</link>
            <pubDate>Fri, 03 Jan 2025 17:43:28 +0800</pubDate>
            
            <guid>http://localhost:1313/posts/welcome/</guid>
            <description>Introduction Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.
Goals The aim of this blog is to teach other researchers tricks and tips that they may not have known.</description>
            <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello there, I do not know how you manage to come here but I welcome you nevertheless. For those of you who may not know me, I am but a simple cyber security researcher. This blog would serve as a way to document down technical details of vulnerabilities / useful workflows I found while progressing through my career.</p>
<h2 id="goals">Goals</h2>
<p>The aim of this blog is to teach other researchers tricks and tips that they may not have known. In addition, if the opportunity arises, I will also share in-depth analysis on CVEs I find interesting.</p>
<h2 id="future">Future</h2>
<p>This blog will most likely be continuously updated as the years go by as it is free. Thanks Hugo!</p>
]]></content>
        </item>
        
    </channel>
</rss>
